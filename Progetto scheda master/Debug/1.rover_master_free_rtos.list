
1.rover_master_free_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac70  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800ae50  0800ae50  0000be50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af68  0800af68  0000c064  2**0
                  CONTENTS
  4 .ARM          00000008  0800af68  0800af68  0000bf68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af70  0800af70  0000c064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af70  0800af70  0000bf70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800af74  0800af74  0000bf74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800af78  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002048  20000064  0800afdc  0000c064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020ac  0800afdc  0000c0ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bab1  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057c2  00000000  00000000  00037b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002280  00000000  00000000  0003d308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001aca  00000000  00000000  0003f588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006e43  00000000  00000000  00041052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bd8e  00000000  00000000  00047e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012217d  00000000  00000000  00073c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00195da0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096e0  00000000  00000000  00195de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0019f4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ae38 	.word	0x0800ae38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	0800ae38 	.word	0x0800ae38

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	@ 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2iz>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009c4:	d215      	bcs.n	80009f2 <__aeabi_d2iz+0x36>
 80009c6:	d511      	bpl.n	80009ec <__aeabi_d2iz+0x30>
 80009c8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d912      	bls.n	80009f8 <__aeabi_d2iz+0x3c>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009e2:	fa23 f002 	lsr.w	r0, r3, r2
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d105      	bne.n	8000a04 <__aeabi_d2iz+0x48>
 80009f8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009fc:	bf08      	it	eq
 80009fe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b96a 	b.w	8000cf8 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	460c      	mov	r4, r1
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d14e      	bne.n	8000ae6 <__udivmoddi4+0xaa>
 8000a48:	4694      	mov	ip, r2
 8000a4a:	458c      	cmp	ip, r1
 8000a4c:	4686      	mov	lr, r0
 8000a4e:	fab2 f282 	clz	r2, r2
 8000a52:	d962      	bls.n	8000b1a <__udivmoddi4+0xde>
 8000a54:	b14a      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a56:	f1c2 0320 	rsb	r3, r2, #32
 8000a5a:	4091      	lsls	r1, r2
 8000a5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a64:	4319      	orrs	r1, r3
 8000a66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a6e:	fa1f f68c 	uxth.w	r6, ip
 8000a72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a82:	fb04 f106 	mul.w	r1, r4, r6
 8000a86:	4299      	cmp	r1, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x64>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a92:	f080 8112 	bcs.w	8000cba <__udivmoddi4+0x27e>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 810f 	bls.w	8000cba <__udivmoddi4+0x27e>
 8000a9c:	3c02      	subs	r4, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a59      	subs	r1, r3, r1
 8000aa2:	fa1f f38e 	uxth.w	r3, lr
 8000aa6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aaa:	fb07 1110 	mls	r1, r7, r0, r1
 8000aae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab2:	fb00 f606 	mul.w	r6, r0, r6
 8000ab6:	429e      	cmp	r6, r3
 8000ab8:	d90a      	bls.n	8000ad0 <__udivmoddi4+0x94>
 8000aba:	eb1c 0303 	adds.w	r3, ip, r3
 8000abe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac2:	f080 80fc 	bcs.w	8000cbe <__udivmoddi4+0x282>
 8000ac6:	429e      	cmp	r6, r3
 8000ac8:	f240 80f9 	bls.w	8000cbe <__udivmoddi4+0x282>
 8000acc:	4463      	add	r3, ip
 8000ace:	3802      	subs	r0, #2
 8000ad0:	1b9b      	subs	r3, r3, r6
 8000ad2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	b11d      	cbz	r5, 8000ae2 <__udivmoddi4+0xa6>
 8000ada:	40d3      	lsrs	r3, r2
 8000adc:	2200      	movs	r2, #0
 8000ade:	e9c5 3200 	strd	r3, r2, [r5]
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d905      	bls.n	8000af6 <__udivmoddi4+0xba>
 8000aea:	b10d      	cbz	r5, 8000af0 <__udivmoddi4+0xb4>
 8000aec:	e9c5 0100 	strd	r0, r1, [r5]
 8000af0:	2100      	movs	r1, #0
 8000af2:	4608      	mov	r0, r1
 8000af4:	e7f5      	b.n	8000ae2 <__udivmoddi4+0xa6>
 8000af6:	fab3 f183 	clz	r1, r3
 8000afa:	2900      	cmp	r1, #0
 8000afc:	d146      	bne.n	8000b8c <__udivmoddi4+0x150>
 8000afe:	42a3      	cmp	r3, r4
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xcc>
 8000b02:	4290      	cmp	r0, r2
 8000b04:	f0c0 80f0 	bcc.w	8000ce8 <__udivmoddi4+0x2ac>
 8000b08:	1a86      	subs	r6, r0, r2
 8000b0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	2d00      	cmp	r5, #0
 8000b12:	d0e6      	beq.n	8000ae2 <__udivmoddi4+0xa6>
 8000b14:	e9c5 6300 	strd	r6, r3, [r5]
 8000b18:	e7e3      	b.n	8000ae2 <__udivmoddi4+0xa6>
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	f040 8090 	bne.w	8000c40 <__udivmoddi4+0x204>
 8000b20:	eba1 040c 	sub.w	r4, r1, ip
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	fa1f f78c 	uxth.w	r7, ip
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b36:	fb08 4416 	mls	r4, r8, r6, r4
 8000b3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b3e:	fb07 f006 	mul.w	r0, r7, r6
 8000b42:	4298      	cmp	r0, r3
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x11c>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x11a>
 8000b50:	4298      	cmp	r0, r3
 8000b52:	f200 80cd 	bhi.w	8000cf0 <__udivmoddi4+0x2b4>
 8000b56:	4626      	mov	r6, r4
 8000b58:	1a1c      	subs	r4, r3, r0
 8000b5a:	fa1f f38e 	uxth.w	r3, lr
 8000b5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b62:	fb08 4410 	mls	r4, r8, r0, r4
 8000b66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b6a:	fb00 f707 	mul.w	r7, r0, r7
 8000b6e:	429f      	cmp	r7, r3
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x148>
 8000b72:	eb1c 0303 	adds.w	r3, ip, r3
 8000b76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b7a:	d202      	bcs.n	8000b82 <__udivmoddi4+0x146>
 8000b7c:	429f      	cmp	r7, r3
 8000b7e:	f200 80b0 	bhi.w	8000ce2 <__udivmoddi4+0x2a6>
 8000b82:	4620      	mov	r0, r4
 8000b84:	1bdb      	subs	r3, r3, r7
 8000b86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8a:	e7a5      	b.n	8000ad8 <__udivmoddi4+0x9c>
 8000b8c:	f1c1 0620 	rsb	r6, r1, #32
 8000b90:	408b      	lsls	r3, r1
 8000b92:	fa22 f706 	lsr.w	r7, r2, r6
 8000b96:	431f      	orrs	r7, r3
 8000b98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000ba0:	ea43 030c 	orr.w	r3, r3, ip
 8000ba4:	40f4      	lsrs	r4, r6
 8000ba6:	fa00 f801 	lsl.w	r8, r0, r1
 8000baa:	0c38      	lsrs	r0, r7, #16
 8000bac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bb0:	fbb4 fef0 	udiv	lr, r4, r0
 8000bb4:	fa1f fc87 	uxth.w	ip, r7
 8000bb8:	fb00 441e 	mls	r4, r0, lr, r4
 8000bbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000bc4:	45a1      	cmp	r9, r4
 8000bc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bca:	d90a      	bls.n	8000be2 <__udivmoddi4+0x1a6>
 8000bcc:	193c      	adds	r4, r7, r4
 8000bce:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bd2:	f080 8084 	bcs.w	8000cde <__udivmoddi4+0x2a2>
 8000bd6:	45a1      	cmp	r9, r4
 8000bd8:	f240 8081 	bls.w	8000cde <__udivmoddi4+0x2a2>
 8000bdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000be0:	443c      	add	r4, r7
 8000be2:	eba4 0409 	sub.w	r4, r4, r9
 8000be6:	fa1f f983 	uxth.w	r9, r3
 8000bea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bee:	fb00 4413 	mls	r4, r0, r3, r4
 8000bf2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bf6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bfa:	45a4      	cmp	ip, r4
 8000bfc:	d907      	bls.n	8000c0e <__udivmoddi4+0x1d2>
 8000bfe:	193c      	adds	r4, r7, r4
 8000c00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c04:	d267      	bcs.n	8000cd6 <__udivmoddi4+0x29a>
 8000c06:	45a4      	cmp	ip, r4
 8000c08:	d965      	bls.n	8000cd6 <__udivmoddi4+0x29a>
 8000c0a:	3b02      	subs	r3, #2
 8000c0c:	443c      	add	r4, r7
 8000c0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c12:	fba0 9302 	umull	r9, r3, r0, r2
 8000c16:	eba4 040c 	sub.w	r4, r4, ip
 8000c1a:	429c      	cmp	r4, r3
 8000c1c:	46ce      	mov	lr, r9
 8000c1e:	469c      	mov	ip, r3
 8000c20:	d351      	bcc.n	8000cc6 <__udivmoddi4+0x28a>
 8000c22:	d04e      	beq.n	8000cc2 <__udivmoddi4+0x286>
 8000c24:	b155      	cbz	r5, 8000c3c <__udivmoddi4+0x200>
 8000c26:	ebb8 030e 	subs.w	r3, r8, lr
 8000c2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c32:	40cb      	lsrs	r3, r1
 8000c34:	431e      	orrs	r6, r3
 8000c36:	40cc      	lsrs	r4, r1
 8000c38:	e9c5 6400 	strd	r6, r4, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e750      	b.n	8000ae2 <__udivmoddi4+0xa6>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f103 	lsr.w	r1, r0, r3
 8000c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c50:	4094      	lsls	r4, r2
 8000c52:	430c      	orrs	r4, r1
 8000c54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c5c:	fa1f f78c 	uxth.w	r7, ip
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3110 	mls	r1, r8, r0, r3
 8000c68:	0c23      	lsrs	r3, r4, #16
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f107 	mul.w	r1, r0, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x24c>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c7e:	d22c      	bcs.n	8000cda <__udivmoddi4+0x29e>
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d92a      	bls.n	8000cda <__udivmoddi4+0x29e>
 8000c84:	3802      	subs	r0, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c90:	fb08 3311 	mls	r3, r8, r1, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb01 f307 	mul.w	r3, r1, r7
 8000c9c:	42a3      	cmp	r3, r4
 8000c9e:	d908      	bls.n	8000cb2 <__udivmoddi4+0x276>
 8000ca0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca8:	d213      	bcs.n	8000cd2 <__udivmoddi4+0x296>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d911      	bls.n	8000cd2 <__udivmoddi4+0x296>
 8000cae:	3902      	subs	r1, #2
 8000cb0:	4464      	add	r4, ip
 8000cb2:	1ae4      	subs	r4, r4, r3
 8000cb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb8:	e739      	b.n	8000b2e <__udivmoddi4+0xf2>
 8000cba:	4604      	mov	r4, r0
 8000cbc:	e6f0      	b.n	8000aa0 <__udivmoddi4+0x64>
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e706      	b.n	8000ad0 <__udivmoddi4+0x94>
 8000cc2:	45c8      	cmp	r8, r9
 8000cc4:	d2ae      	bcs.n	8000c24 <__udivmoddi4+0x1e8>
 8000cc6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cce:	3801      	subs	r0, #1
 8000cd0:	e7a8      	b.n	8000c24 <__udivmoddi4+0x1e8>
 8000cd2:	4631      	mov	r1, r6
 8000cd4:	e7ed      	b.n	8000cb2 <__udivmoddi4+0x276>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	e799      	b.n	8000c0e <__udivmoddi4+0x1d2>
 8000cda:	4630      	mov	r0, r6
 8000cdc:	e7d4      	b.n	8000c88 <__udivmoddi4+0x24c>
 8000cde:	46d6      	mov	lr, sl
 8000ce0:	e77f      	b.n	8000be2 <__udivmoddi4+0x1a6>
 8000ce2:	4463      	add	r3, ip
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	e74d      	b.n	8000b84 <__udivmoddi4+0x148>
 8000ce8:	4606      	mov	r6, r0
 8000cea:	4623      	mov	r3, r4
 8000cec:	4608      	mov	r0, r1
 8000cee:	e70f      	b.n	8000b10 <__udivmoddi4+0xd4>
 8000cf0:	3e02      	subs	r6, #2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	e730      	b.n	8000b58 <__udivmoddi4+0x11c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08c      	sub	sp, #48	@ 0x30
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2220      	movs	r2, #32
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f009 ffa7 	bl	800ac68 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d1a:	4b32      	ldr	r3, [pc, #200]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000d1c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d22:	4b30      	ldr	r3, [pc, #192]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000d24:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d30:	4b2c      	ldr	r3, [pc, #176]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d36:	4b2b      	ldr	r3, [pc, #172]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d3c:	4b29      	ldr	r3, [pc, #164]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d42:	4b28      	ldr	r3, [pc, #160]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000d44:	2204      	movs	r2, #4
 8000d46:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d48:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d4e:	4b25      	ldr	r3, [pc, #148]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000d54:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d5a:	4b22      	ldr	r3, [pc, #136]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d62:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d68:	4b1e      	ldr	r3, [pc, #120]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d76:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d7c:	4b19      	ldr	r3, [pc, #100]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d84:	4817      	ldr	r0, [pc, #92]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000d86:	f001 fef9 	bl	8002b7c <HAL_ADC_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000d90:	f001 f86c 	bl	8001e6c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4811      	ldr	r0, [pc, #68]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000da0:	f002 fd0e 	bl	80037c0 <HAL_ADCEx_MultiModeConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000daa:	f001 f85f 	bl	8001e6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <MX_ADC1_Init+0xec>)
 8000db0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db2:	2306      	movs	r3, #6
 8000db4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dba:	237f      	movs	r3, #127	@ 0x7f
 8000dbc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4806      	ldr	r0, [pc, #24]	@ (8000de4 <MX_ADC1_Init+0xe8>)
 8000dcc:	f002 f892 	bl	8002ef4 <HAL_ADC_ConfigChannel>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000dd6:	f001 f849 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	3730      	adds	r7, #48	@ 0x30
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000080 	.word	0x20000080
 8000de8:	cb840000 	.word	0xcb840000

08000dec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b098      	sub	sp, #96	@ 0x60
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	2254      	movs	r2, #84	@ 0x54
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f009 ff33 	bl	800ac68 <memset>
  if(adcHandle->Instance==ADC1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e0a:	d11b      	bne.n	8000e44 <HAL_ADC_MspInit+0x58>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e10:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e12:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e16:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f004 fb05 	bl	800542c <HAL_RCCEx_PeriphCLKConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8000e28:	f001 f820 	bl	8001e6c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e2c:	4b07      	ldr	r3, [pc, #28]	@ (8000e4c <HAL_ADC_MspInit+0x60>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e30:	4a06      	ldr	r2, [pc, #24]	@ (8000e4c <HAL_ADC_MspInit+0x60>)
 8000e32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e38:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <HAL_ADC_MspInit+0x60>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e44:	bf00      	nop
 8000e46:	3760      	adds	r7, #96	@ 0x60
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40021000 	.word	0x40021000

08000e50 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
	Ultrasonic_Init(&sensor1, triggerS1_GPIO_Port, triggerS1_Pin, echoS1_GPIO_Port, echoS1_Pin, &htim1);
 8000e56:	4b24      	ldr	r3, [pc, #144]	@ (8000ee8 <MX_FREERTOS_Init+0x98>)
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	4b22      	ldr	r3, [pc, #136]	@ (8000eec <MX_FREERTOS_Init+0x9c>)
 8000e62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e66:	4921      	ldr	r1, [pc, #132]	@ (8000eec <MX_FREERTOS_Init+0x9c>)
 8000e68:	4821      	ldr	r0, [pc, #132]	@ (8000ef0 <MX_FREERTOS_Init+0xa0>)
 8000e6a:	f000 fdf5 	bl	8001a58 <Ultrasonic_Init>
	Ultrasonic_Init(&sensor2, triggerS2_GPIO_Port, triggerS2_Pin, echoS2_GPIO_Port, echoS2_Pin, &htim2);
 8000e6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ef4 <MX_FREERTOS_Init+0xa4>)
 8000e70:	9301      	str	r3, [sp, #4]
 8000e72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <MX_FREERTOS_Init+0x9c>)
 8000e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e7e:	491b      	ldr	r1, [pc, #108]	@ (8000eec <MX_FREERTOS_Init+0x9c>)
 8000e80:	481d      	ldr	r0, [pc, #116]	@ (8000ef8 <MX_FREERTOS_Init+0xa8>)
 8000e82:	f000 fde9 	bl	8001a58 <Ultrasonic_Init>
	Ultrasonic_Init(&sensor3, triggerS3_GPIO_Port, triggerS3_Pin, echoS3_GPIO_Port, echoS3_Pin,&htim7);
 8000e86:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <MX_FREERTOS_Init+0xac>)
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e98:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8000e9c:	4818      	ldr	r0, [pc, #96]	@ (8000f00 <MX_FREERTOS_Init+0xb0>)
 8000e9e:	f000 fddb 	bl	8001a58 <Ultrasonic_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of lettura */
  letturaHandle = osThreadNew(letturaTask, NULL, &lettura_attributes);
 8000ea2:	4a18      	ldr	r2, [pc, #96]	@ (8000f04 <MX_FREERTOS_Init+0xb4>)
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4818      	ldr	r0, [pc, #96]	@ (8000f08 <MX_FREERTOS_Init+0xb8>)
 8000ea8:	f007 f9db 	bl	8008262 <osThreadNew>
 8000eac:	4603      	mov	r3, r0
 8000eae:	4a17      	ldr	r2, [pc, #92]	@ (8000f0c <MX_FREERTOS_Init+0xbc>)
 8000eb0:	6013      	str	r3, [r2, #0]

  /* creation of comunicazione */
  comunicazioneHandle = osThreadNew(comunicazioneTask, NULL, &comunicazione_attributes);
 8000eb2:	4a17      	ldr	r2, [pc, #92]	@ (8000f10 <MX_FREERTOS_Init+0xc0>)
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4817      	ldr	r0, [pc, #92]	@ (8000f14 <MX_FREERTOS_Init+0xc4>)
 8000eb8:	f007 f9d3 	bl	8008262 <osThreadNew>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	4a16      	ldr	r2, [pc, #88]	@ (8000f18 <MX_FREERTOS_Init+0xc8>)
 8000ec0:	6013      	str	r3, [r2, #0]

  /* creation of degradato */
  degradatoHandle = osThreadNew(degradatoTask, NULL, &degradato_attributes);
 8000ec2:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <MX_FREERTOS_Init+0xcc>)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4816      	ldr	r0, [pc, #88]	@ (8000f20 <MX_FREERTOS_Init+0xd0>)
 8000ec8:	f007 f9cb 	bl	8008262 <osThreadNew>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4a15      	ldr	r2, [pc, #84]	@ (8000f24 <MX_FREERTOS_Init+0xd4>)
 8000ed0:	6013      	str	r3, [r2, #0]

  /* creation of emergenza */
  emergenzaHandle = osThreadNew(emergenzaTask, NULL, &emergenza_attributes);
 8000ed2:	4a15      	ldr	r2, [pc, #84]	@ (8000f28 <MX_FREERTOS_Init+0xd8>)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4815      	ldr	r0, [pc, #84]	@ (8000f2c <MX_FREERTOS_Init+0xdc>)
 8000ed8:	f007 f9c3 	bl	8008262 <osThreadNew>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4a14      	ldr	r2, [pc, #80]	@ (8000f30 <MX_FREERTOS_Init+0xe0>)
 8000ee0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200002e0 	.word	0x200002e0
 8000eec:	48000800 	.word	0x48000800
 8000ef0:	20000180 	.word	0x20000180
 8000ef4:	2000032c 	.word	0x2000032c
 8000ef8:	20000198 	.word	0x20000198
 8000efc:	20000378 	.word	0x20000378
 8000f00:	200001b0 	.word	0x200001b0
 8000f04:	0800ae98 	.word	0x0800ae98
 8000f08:	08000f35 	.word	0x08000f35
 8000f0c:	200001cc 	.word	0x200001cc
 8000f10:	0800aebc 	.word	0x0800aebc
 8000f14:	08000fe1 	.word	0x08000fe1
 8000f18:	200001d0 	.word	0x200001d0
 8000f1c:	0800aee0 	.word	0x0800aee0
 8000f20:	08001271 	.word	0x08001271
 8000f24:	200001d4 	.word	0x200001d4
 8000f28:	0800af04 	.word	0x0800af04
 8000f2c:	08001299 	.word	0x08001299
 8000f30:	200001d8 	.word	0x200001d8

08000f34 <letturaTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_letturaTask */
void letturaTask(void *argument)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af02      	add	r7, sp, #8
 8000f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN letturaTask */
  /* Infinite loop */
  for(;;)
  {
	    //LETTURA
		if(data_master.temperatura2>90 || data_master.temperatura2==-1){start_temp++;}
 8000f3c:	4b21      	ldr	r3, [pc, #132]	@ (8000fc4 <letturaTask+0x90>)
 8000f3e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000f42:	2b5a      	cmp	r3, #90	@ 0x5a
 8000f44:	dc05      	bgt.n	8000f52 <letturaTask+0x1e>
 8000f46:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc4 <letturaTask+0x90>)
 8000f48:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d106      	bne.n	8000f60 <letturaTask+0x2c>
 8000f52:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc8 <letturaTask+0x94>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	3301      	adds	r3, #1
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <letturaTask+0x94>)
 8000f5c:	801a      	strh	r2, [r3, #0]
 8000f5e:	e002      	b.n	8000f66 <letturaTask+0x32>
		else{start_temp=0;}
 8000f60:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <letturaTask+0x94>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	801a      	strh	r2, [r3, #0]

		data_master.sonar1=(uint16_t)Ultrasonic_GetDistance(&sensor1);
 8000f66:	4819      	ldr	r0, [pc, #100]	@ (8000fcc <letturaTask+0x98>)
 8000f68:	f000 fd96 	bl	8001a98 <Ultrasonic_GetDistance>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <letturaTask+0x90>)
 8000f72:	839a      	strh	r2, [r3, #28]
		data_master.sonar2=(uint16_t)Ultrasonic_GetDistance(&sensor2);
 8000f74:	4816      	ldr	r0, [pc, #88]	@ (8000fd0 <letturaTask+0x9c>)
 8000f76:	f000 fd8f 	bl	8001a98 <Ultrasonic_GetDistance>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <letturaTask+0x90>)
 8000f80:	83da      	strh	r2, [r3, #30]
		data_master.sonar3=(uint16_t)Ultrasonic_GetDistance(&sensor3);
 8000f82:	4814      	ldr	r0, [pc, #80]	@ (8000fd4 <letturaTask+0xa0>)
 8000f84:	f000 fd88 	bl	8001a98 <Ultrasonic_GetDistance>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <letturaTask+0x90>)
 8000f8e:	841a      	strh	r2, [r3, #32]

		statusController=HAL_I2C_Master_Receive(&hi2c1, 0x55 << 1, (uint8_t *)&data_master.controller, sizeof(controller_t), 2000);
 8000f90:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	230e      	movs	r3, #14
 8000f98:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <letturaTask+0x90>)
 8000f9a:	21aa      	movs	r1, #170	@ 0xaa
 8000f9c:	480e      	ldr	r0, [pc, #56]	@ (8000fd8 <letturaTask+0xa4>)
 8000f9e:	f003 f845 	bl	800402c <HAL_I2C_Master_Receive>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <letturaTask+0xa8>)
 8000fa8:	701a      	strb	r2, [r3, #0]

		dataCheck(start_temp, statusController, &data_master);
 8000faa:	4b07      	ldr	r3, [pc, #28]	@ (8000fc8 <letturaTask+0x94>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	4a0b      	ldr	r2, [pc, #44]	@ (8000fdc <letturaTask+0xa8>)
 8000fb0:	7811      	ldrb	r1, [r2, #0]
 8000fb2:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <letturaTask+0x90>)
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f97f 	bl	80012b8 <dataCheck>

    osDelay(1);
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f007 f9e3 	bl	8008386 <osDelay>
		if(data_master.temperatura2>90 || data_master.temperatura2==-1){start_temp++;}
 8000fc0:	e7bc      	b.n	8000f3c <letturaTask+0x8>
 8000fc2:	bf00      	nop
 8000fc4:	200000ec 	.word	0x200000ec
 8000fc8:	200001c8 	.word	0x200001c8
 8000fcc:	20000180 	.word	0x20000180
 8000fd0:	20000198 	.word	0x20000198
 8000fd4:	200001b0 	.word	0x200001b0
 8000fd8:	200001dc 	.word	0x200001dc
 8000fdc:	200001ca 	.word	0x200001ca

08000fe0 <comunicazioneTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_comunicazioneTask */
void comunicazioneTask(void *argument)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

		//reset variabili di stato e decisione
		status_boards=3;
 8000fe8:	4b96      	ldr	r3, [pc, #600]	@ (8001244 <comunicazioneTask+0x264>)
 8000fea:	2203      	movs	r2, #3
 8000fec:	701a      	strb	r2, [r3, #0]
		data_master.B2_decision=4;
 8000fee:	4b96      	ldr	r3, [pc, #600]	@ (8001248 <comunicazioneTask+0x268>)
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		final_decision = 3;
 8000ff6:	4b95      	ldr	r3, [pc, #596]	@ (800124c <comunicazioneTask+0x26c>)
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	701a      	strb	r2, [r3, #0]

		//Invio dati allo slave
		serialize_partial(&data_master, buffer_send);
 8000ffc:	4994      	ldr	r1, [pc, #592]	@ (8001250 <comunicazioneTask+0x270>)
 8000ffe:	4892      	ldr	r0, [pc, #584]	@ (8001248 <comunicazioneTask+0x268>)
 8001000:	f000 fa62 	bl	80014c8 <serialize_partial>

		HAL_GPIO_WritePin(GPIOB, B2_pin_Pin, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	2120      	movs	r1, #32
 8001008:	4892      	ldr	r0, [pc, #584]	@ (8001254 <comunicazioneTask+0x274>)
 800100a:	f002 ff5b 	bl	8003ec4 <HAL_GPIO_WritePin>

		tick_iniziale=osKernelGetTickCount();
 800100e:	f007 f913 	bl	8008238 <osKernelGetTickCount>
 8001012:	4603      	mov	r3, r0
 8001014:	4a90      	ldr	r2, [pc, #576]	@ (8001258 <comunicazioneTask+0x278>)
 8001016:	6013      	str	r3, [r2, #0]

		while (HAL_GPIO_ReadPin(GPIOB, B1_pin_Pin) == GPIO_PIN_RESET){
 8001018:	e00b      	b.n	8001032 <comunicazioneTask+0x52>
			if(osKernelGetTickCount()-tick_iniziale > 10){
 800101a:	f007 f90d 	bl	8008238 <osKernelGetTickCount>
 800101e:	4602      	mov	r2, r0
 8001020:	4b8d      	ldr	r3, [pc, #564]	@ (8001258 <comunicazioneTask+0x278>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b0a      	cmp	r3, #10
 8001028:	d903      	bls.n	8001032 <comunicazioneTask+0x52>
				status_boards=0;
 800102a:	4b86      	ldr	r3, [pc, #536]	@ (8001244 <comunicazioneTask+0x264>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
			    goto fine;
 8001030:	e0c7      	b.n	80011c2 <comunicazioneTask+0x1e2>
		while (HAL_GPIO_ReadPin(GPIOB, B1_pin_Pin) == GPIO_PIN_RESET){
 8001032:	2110      	movs	r1, #16
 8001034:	4887      	ldr	r0, [pc, #540]	@ (8001254 <comunicazioneTask+0x274>)
 8001036:	f002 ff2d 	bl	8003e94 <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0ec      	beq.n	800101a <comunicazioneTask+0x3a>
			}
		}

		HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer_send, sizeof(buffer_send), HAL_MAX_DELAY);
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	2221      	movs	r2, #33	@ 0x21
 8001046:	4982      	ldr	r1, [pc, #520]	@ (8001250 <comunicazioneTask+0x270>)
 8001048:	4884      	ldr	r0, [pc, #528]	@ (800125c <comunicazioneTask+0x27c>)
 800104a:	f004 fce8 	bl	8005a1e <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(GPIOB, B2_pin_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2120      	movs	r1, #32
 8001052:	4880      	ldr	r0, [pc, #512]	@ (8001254 <comunicazioneTask+0x274>)
 8001054:	f002 ff36 	bl	8003ec4 <HAL_GPIO_WritePin>


		//RICEZIONE DALLO SLAVE
		tick_iniziale=osKernelGetTickCount();
 8001058:	f007 f8ee 	bl	8008238 <osKernelGetTickCount>
 800105c:	4603      	mov	r3, r0
 800105e:	4a7e      	ldr	r2, [pc, #504]	@ (8001258 <comunicazioneTask+0x278>)
 8001060:	6013      	str	r3, [r2, #0]

		while (HAL_GPIO_ReadPin(GPIOB, B1_pin_Pin) == GPIO_PIN_RESET){
 8001062:	e00b      	b.n	800107c <comunicazioneTask+0x9c>
			if(osKernelGetTickCount()-tick_iniziale > 10){
 8001064:	f007 f8e8 	bl	8008238 <osKernelGetTickCount>
 8001068:	4602      	mov	r2, r0
 800106a:	4b7b      	ldr	r3, [pc, #492]	@ (8001258 <comunicazioneTask+0x278>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b0a      	cmp	r3, #10
 8001072:	d903      	bls.n	800107c <comunicazioneTask+0x9c>
				status_boards=0;
 8001074:	4b73      	ldr	r3, [pc, #460]	@ (8001244 <comunicazioneTask+0x264>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
			    goto fine;
 800107a:	e0a2      	b.n	80011c2 <comunicazioneTask+0x1e2>
		while (HAL_GPIO_ReadPin(GPIOB, B1_pin_Pin) == GPIO_PIN_RESET){
 800107c:	2110      	movs	r1, #16
 800107e:	4875      	ldr	r0, [pc, #468]	@ (8001254 <comunicazioneTask+0x274>)
 8001080:	f002 ff08 	bl	8003e94 <HAL_GPIO_ReadPin>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0ec      	beq.n	8001064 <comunicazioneTask+0x84>
			}
		}

		HAL_GPIO_WritePin(GPIOB, B2_pin_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	2120      	movs	r1, #32
 800108e:	4871      	ldr	r0, [pc, #452]	@ (8001254 <comunicazioneTask+0x274>)
 8001090:	f002 ff18 	bl	8003ec4 <HAL_GPIO_WritePin>

		HAL_SPI_Receive(&hspi1, buffer_recive, sizeof(buffer_recive), HAL_MAX_DELAY);
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
 8001098:	2210      	movs	r2, #16
 800109a:	4971      	ldr	r1, [pc, #452]	@ (8001260 <comunicazioneTask+0x280>)
 800109c:	486f      	ldr	r0, [pc, #444]	@ (800125c <comunicazioneTask+0x27c>)
 800109e:	f004 fe34 	bl	8005d0a <HAL_SPI_Receive>

		HAL_GPIO_WritePin(GPIOB, B2_pin_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2120      	movs	r1, #32
 80010a6:	486b      	ldr	r0, [pc, #428]	@ (8001254 <comunicazioneTask+0x274>)
 80010a8:	f002 ff0c 	bl	8003ec4 <HAL_GPIO_WritePin>

		deserialize_partial(&global_data,&data_master,buffer_recive);
 80010ac:	4a6c      	ldr	r2, [pc, #432]	@ (8001260 <comunicazioneTask+0x280>)
 80010ae:	4966      	ldr	r1, [pc, #408]	@ (8001248 <comunicazioneTask+0x268>)
 80010b0:	486c      	ldr	r0, [pc, #432]	@ (8001264 <comunicazioneTask+0x284>)
 80010b2:	f000 faff 	bl	80016b4 <deserialize_partial>
		//decisiono 0 emergenza sullo slave
		//decisione 1 attuazione sulo slave
		//decisione 2 degradato sul master
		//decisione 3 emergenza sul master

		if(global_data.B2_state==0 && global_data.B1_state==1){
 80010b6:	4b6b      	ldr	r3, [pc, #428]	@ (8001264 <comunicazioneTask+0x284>)
 80010b8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d109      	bne.n	80010d4 <comunicazioneTask+0xf4>
 80010c0:	4b68      	ldr	r3, [pc, #416]	@ (8001264 <comunicazioneTask+0x284>)
 80010c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d104      	bne.n	80010d4 <comunicazioneTask+0xf4>
			data_master.B2_decision = 0;
 80010ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001248 <comunicazioneTask+0x268>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 80010d2:	e031      	b.n	8001138 <comunicazioneTask+0x158>
		}
		else if(global_data.B2_state==1 && global_data.B1_state==1){
 80010d4:	4b63      	ldr	r3, [pc, #396]	@ (8001264 <comunicazioneTask+0x284>)
 80010d6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d109      	bne.n	80010f2 <comunicazioneTask+0x112>
 80010de:	4b61      	ldr	r3, [pc, #388]	@ (8001264 <comunicazioneTask+0x284>)
 80010e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d104      	bne.n	80010f2 <comunicazioneTask+0x112>
			data_master.B2_decision = 1;
 80010e8:	4b57      	ldr	r3, [pc, #348]	@ (8001248 <comunicazioneTask+0x268>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 80010f0:	e022      	b.n	8001138 <comunicazioneTask+0x158>
		}
		else if(global_data.B2_state==1 && global_data.B1_state==0){
 80010f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001264 <comunicazioneTask+0x284>)
 80010f4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d10c      	bne.n	8001116 <comunicazioneTask+0x136>
 80010fc:	4b59      	ldr	r3, [pc, #356]	@ (8001264 <comunicazioneTask+0x284>)
 80010fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001102:	2b00      	cmp	r3, #0
 8001104:	d107      	bne.n	8001116 <comunicazioneTask+0x136>
			status_boards=1;
 8001106:	4b4f      	ldr	r3, [pc, #316]	@ (8001244 <comunicazioneTask+0x264>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
			data_master.B2_decision = 2;
 800110c:	4b4e      	ldr	r3, [pc, #312]	@ (8001248 <comunicazioneTask+0x268>)
 800110e:	2202      	movs	r2, #2
 8001110:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8001114:	e010      	b.n	8001138 <comunicazioneTask+0x158>
		}
		else if(global_data.B2_state==0 && global_data.B1_state==0){
 8001116:	4b53      	ldr	r3, [pc, #332]	@ (8001264 <comunicazioneTask+0x284>)
 8001118:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10b      	bne.n	8001138 <comunicazioneTask+0x158>
 8001120:	4b50      	ldr	r3, [pc, #320]	@ (8001264 <comunicazioneTask+0x284>)
 8001122:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001126:	2b00      	cmp	r3, #0
 8001128:	d106      	bne.n	8001138 <comunicazioneTask+0x158>
			status_boards=0;
 800112a:	4b46      	ldr	r3, [pc, #280]	@ (8001244 <comunicazioneTask+0x264>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
			data_master.B2_decision=3;
 8001130:	4b45      	ldr	r3, [pc, #276]	@ (8001248 <comunicazioneTask+0x268>)
 8001132:	2203      	movs	r2, #3
 8001134:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		}

		//final decision 1 decisioni b1 e b2 uguali
		//final decision 0 decisioni b1 e b2 diverse
		if(data_master.B2_decision==global_data.B1_decision){
 8001138:	4b43      	ldr	r3, [pc, #268]	@ (8001248 <comunicazioneTask+0x268>)
 800113a:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800113e:	4b49      	ldr	r3, [pc, #292]	@ (8001264 <comunicazioneTask+0x284>)
 8001140:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001144:	429a      	cmp	r2, r3
 8001146:	d103      	bne.n	8001150 <comunicazioneTask+0x170>
			final_decision=1;
 8001148:	4b40      	ldr	r3, [pc, #256]	@ (800124c <comunicazioneTask+0x26c>)
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	e00e      	b.n	800116e <comunicazioneTask+0x18e>
		}
		else{
			final_decision=0;
 8001150:	4b3e      	ldr	r3, [pc, #248]	@ (800124c <comunicazioneTask+0x26c>)
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
			if(data_master.B2_state==0){
 8001156:	4b3c      	ldr	r3, [pc, #240]	@ (8001248 <comunicazioneTask+0x268>)
 8001158:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800115c:	2b00      	cmp	r3, #0
 800115e:	d103      	bne.n	8001168 <comunicazioneTask+0x188>
				status_boards=0;
 8001160:	4b38      	ldr	r3, [pc, #224]	@ (8001244 <comunicazioneTask+0x264>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
 8001166:	e002      	b.n	800116e <comunicazioneTask+0x18e>
			}
			else{
				status_boards=1;
 8001168:	4b36      	ldr	r3, [pc, #216]	@ (8001244 <comunicazioneTask+0x264>)
 800116a:	2201      	movs	r2, #1
 800116c:	701a      	strb	r2, [r3, #0]
			}
		}

		//SCAMBIO DECISIONE
		HAL_GPIO_WritePin(GPIOB, B2_pin_Pin, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	2120      	movs	r1, #32
 8001172:	4838      	ldr	r0, [pc, #224]	@ (8001254 <comunicazioneTask+0x274>)
 8001174:	f002 fea6 	bl	8003ec4 <HAL_GPIO_WritePin>

		tick_iniziale=osKernelGetTickCount();
 8001178:	f007 f85e 	bl	8008238 <osKernelGetTickCount>
 800117c:	4603      	mov	r3, r0
 800117e:	4a36      	ldr	r2, [pc, #216]	@ (8001258 <comunicazioneTask+0x278>)
 8001180:	6013      	str	r3, [r2, #0]
		while (HAL_GPIO_ReadPin(GPIOB, B1_pin_Pin) == GPIO_PIN_RESET){
 8001182:	e00b      	b.n	800119c <comunicazioneTask+0x1bc>
			if(osKernelGetTickCount()-tick_iniziale > 10 ){
 8001184:	f007 f858 	bl	8008238 <osKernelGetTickCount>
 8001188:	4602      	mov	r2, r0
 800118a:	4b33      	ldr	r3, [pc, #204]	@ (8001258 <comunicazioneTask+0x278>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b0a      	cmp	r3, #10
 8001192:	d903      	bls.n	800119c <comunicazioneTask+0x1bc>
				status_boards=0;
 8001194:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <comunicazioneTask+0x264>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
			    goto fine;
 800119a:	e012      	b.n	80011c2 <comunicazioneTask+0x1e2>
		while (HAL_GPIO_ReadPin(GPIOB, B1_pin_Pin) == GPIO_PIN_RESET){
 800119c:	2110      	movs	r1, #16
 800119e:	482d      	ldr	r0, [pc, #180]	@ (8001254 <comunicazioneTask+0x274>)
 80011a0:	f002 fe78 	bl	8003e94 <HAL_GPIO_ReadPin>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0ec      	beq.n	8001184 <comunicazioneTask+0x1a4>
			}
		}

		HAL_SPI_Transmit(&hspi1,&final_decision, sizeof(final_decision), HAL_MAX_DELAY);
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	2201      	movs	r2, #1
 80011b0:	4926      	ldr	r1, [pc, #152]	@ (800124c <comunicazioneTask+0x26c>)
 80011b2:	482a      	ldr	r0, [pc, #168]	@ (800125c <comunicazioneTask+0x27c>)
 80011b4:	f004 fc33 	bl	8005a1e <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(GPIOB, B2_pin_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2120      	movs	r1, #32
 80011bc:	4825      	ldr	r0, [pc, #148]	@ (8001254 <comunicazioneTask+0x274>)
 80011be:	f002 fe81 	bl	8003ec4 <HAL_GPIO_WritePin>

		fine:
		if(final_decision==1){
 80011c2:	4b22      	ldr	r3, [pc, #136]	@ (800124c <comunicazioneTask+0x26c>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d121      	bne.n	800120e <comunicazioneTask+0x22e>
			if(data_master.B2_decision==2 || data_master.B2_decision==3){
 80011ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001248 <comunicazioneTask+0x268>)
 80011cc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d004      	beq.n	80011de <comunicazioneTask+0x1fe>
 80011d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <comunicazioneTask+0x268>)
 80011d6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d10b      	bne.n	80011f6 <comunicazioneTask+0x216>
				HAL_GPIO_WritePin(rele1_GPIO_Port, rele1_Pin, GPIO_PIN_SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011e4:	4820      	ldr	r0, [pc, #128]	@ (8001268 <comunicazioneTask+0x288>)
 80011e6:	f002 fe6d 	bl	8003ec4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(rele2_GPIO_Port, rele2_Pin, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2104      	movs	r1, #4
 80011ee:	481f      	ldr	r0, [pc, #124]	@ (800126c <comunicazioneTask+0x28c>)
 80011f0:	f002 fe68 	bl	8003ec4 <HAL_GPIO_WritePin>
 80011f4:	e022      	b.n	800123c <comunicazioneTask+0x25c>
			}else{
				HAL_GPIO_WritePin(rele1_GPIO_Port, rele1_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011fc:	481a      	ldr	r0, [pc, #104]	@ (8001268 <comunicazioneTask+0x288>)
 80011fe:	f002 fe61 	bl	8003ec4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(rele2_GPIO_Port, rele2_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2104      	movs	r1, #4
 8001206:	4819      	ldr	r0, [pc, #100]	@ (800126c <comunicazioneTask+0x28c>)
 8001208:	f002 fe5c 	bl	8003ec4 <HAL_GPIO_WritePin>
 800120c:	e016      	b.n	800123c <comunicazioneTask+0x25c>
			}
		}
		else{
			if(data_master.B2_state == 1){
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <comunicazioneTask+0x268>)
 8001210:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001214:	2b01      	cmp	r3, #1
 8001216:	d103      	bne.n	8001220 <comunicazioneTask+0x240>
				status_boards = 1;
 8001218:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <comunicazioneTask+0x264>)
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	e002      	b.n	8001226 <comunicazioneTask+0x246>
			}else{
				status_boards = 0;
 8001220:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <comunicazioneTask+0x264>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(rele1_GPIO_Port, rele1_Pin, GPIO_PIN_SET);
 8001226:	2201      	movs	r2, #1
 8001228:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800122c:	480e      	ldr	r0, [pc, #56]	@ (8001268 <comunicazioneTask+0x288>)
 800122e:	f002 fe49 	bl	8003ec4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(rele2_GPIO_Port, rele2_Pin, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	2104      	movs	r1, #4
 8001236:	480d      	ldr	r0, [pc, #52]	@ (800126c <comunicazioneTask+0x28c>)
 8001238:	f002 fe44 	bl	8003ec4 <HAL_GPIO_WritePin>
		}

    osDelay(1);
 800123c:	2001      	movs	r0, #1
 800123e:	f007 f8a2 	bl	8008386 <osDelay>
		status_boards=3;
 8001242:	e6d1      	b.n	8000fe8 <comunicazioneTask+0x8>
 8001244:	20000000 	.word	0x20000000
 8001248:	200000ec 	.word	0x200000ec
 800124c:	2000017c 	.word	0x2000017c
 8001250:	20000154 	.word	0x20000154
 8001254:	48000400 	.word	0x48000400
 8001258:	20000178 	.word	0x20000178
 800125c:	20000230 	.word	0x20000230
 8001260:	20000144 	.word	0x20000144
 8001264:	20000110 	.word	0x20000110
 8001268:	48000800 	.word	0x48000800
 800126c:	48000c00 	.word	0x48000c00

08001270 <degradatoTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_degradatoTask */
void degradatoTask(void *argument)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN degradatoTask */
  /* Infinite loop */
  for(;;)
  {

	if(status_boards==1){
 8001278:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <degradatoTask+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d102      	bne.n	8001286 <degradatoTask+0x16>
		degraded(&data_master);
 8001280:	4804      	ldr	r0, [pc, #16]	@ (8001294 <degradatoTask+0x24>)
 8001282:	f000 f871 	bl	8001368 <degraded>

	}

    osDelay(1);
 8001286:	2001      	movs	r0, #1
 8001288:	f007 f87d 	bl	8008386 <osDelay>
	if(status_boards==1){
 800128c:	e7f4      	b.n	8001278 <degradatoTask+0x8>
 800128e:	bf00      	nop
 8001290:	20000000 	.word	0x20000000
 8001294:	200000ec 	.word	0x200000ec

08001298 <emergenzaTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_emergenzaTask */
void emergenzaTask(void *argument)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN emergenzaTask */
  /* Infinite loop */
  for(;;)
  {

	if(status_boards==0){
 80012a0:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <emergenzaTask+0x1c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <emergenzaTask+0x14>
		emergency();
 80012a8:	f000 f8e6 	bl	8001478 <emergency>
	}

    osDelay(1);
 80012ac:	2001      	movs	r0, #1
 80012ae:	f007 f86a 	bl	8008386 <osDelay>
	if(status_boards==0){
 80012b2:	e7f5      	b.n	80012a0 <emergenzaTask+0x8>
 80012b4:	20000000 	.word	0x20000000

080012b8 <dataCheck>:
 *
 * @param start_temp Valore iniziale della temperatura.
 * @param statusController Stato restituito dal controller, deve essere `HAL_OK`.
 * @param data_master Puntatore alla struttura `partial_master_t` contenente i dati da verificare.
 */
void dataCheck(uint16_t start_temp,HAL_StatusTypeDef statusController,partial_master_t* data_master){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	603a      	str	r2, [r7, #0]
 80012c2:	80fb      	strh	r3, [r7, #6]
 80012c4:	460b      	mov	r3, r1
 80012c6:	717b      	strb	r3, [r7, #5]


	  if(start_temp>200 ||
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	2bc8      	cmp	r3, #200	@ 0xc8
 80012cc:	d83e      	bhi.n	800134c <dataCheck+0x94>
 80012ce:	797b      	ldrb	r3, [r7, #5]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d13b      	bne.n	800134c <dataCheck+0x94>
			  statusController!=HAL_OK ||
			  (are_values_zero(data_master->controller.ax, data_master->controller.ay, data_master->controller.bx, data_master->controller.by) ||
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	885b      	ldrh	r3, [r3, #2]
 80012de:	4619      	mov	r1, r3
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	88db      	ldrh	r3, [r3, #6]
 80012e4:	461a      	mov	r2, r3
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	891b      	ldrh	r3, [r3, #8]
 80012ea:	f000 faca 	bl	8001882 <are_values_zero>
 80012ee:	4603      	mov	r3, r0
			  statusController!=HAL_OK ||
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d12b      	bne.n	800134c <dataCheck+0x94>
			  is_invalid_value(data_master->controller.ax, 0, 511) ||
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 faa5 	bl	800184e <is_invalid_value>
 8001304:	4603      	mov	r3, r0
			  (are_values_zero(data_master->controller.ax, data_master->controller.ay, data_master->controller.bx, data_master->controller.by) ||
 8001306:	2b00      	cmp	r3, #0
 8001308:	d120      	bne.n	800134c <dataCheck+0x94>
			  is_invalid_value(data_master->controller.ay, 0, 511) ||
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	885b      	ldrh	r3, [r3, #2]
 800130e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f000 fa9a 	bl	800184e <is_invalid_value>
 800131a:	4603      	mov	r3, r0
			  is_invalid_value(data_master->controller.ax, 0, 511) ||
 800131c:	2b00      	cmp	r3, #0
 800131e:	d115      	bne.n	800134c <dataCheck+0x94>
			  is_invalid_value(data_master->controller.bx, 0, 511) ||
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	88db      	ldrh	r3, [r3, #6]
 8001324:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f000 fa8f 	bl	800184e <is_invalid_value>
 8001330:	4603      	mov	r3, r0
			  is_invalid_value(data_master->controller.ay, 0, 511) ||
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10a      	bne.n	800134c <dataCheck+0x94>
			  is_invalid_value(data_master->controller.by, 0, 511)))
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	891b      	ldrh	r3, [r3, #8]
 800133a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fa84 	bl	800184e <is_invalid_value>
 8001346:	4603      	mov	r3, r0
			  is_invalid_value(data_master->controller.bx, 0, 511) ||
 8001348:	2b00      	cmp	r3, #0
 800134a:	d004      	beq.n	8001356 <dataCheck+0x9e>
	  {
		  data_master->B2_state=0;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001354:	e004      	b.n	8001360 <dataCheck+0xa8>
	  }else{
		  data_master->B2_state=1;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	 }
}
 800135e:	bf00      	nop
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <degraded>:




void degraded(partial_master_t* global_data){
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	wheel_speeds_t speeds;
	uint8_t INpower2=0;
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
	uint8_t INpower4=0;
 8001374:	2300      	movs	r3, #0
 8001376:	73bb      	strb	r3, [r7, #14]

	if(global_data->controller.ay > PAD1_y_value_min_su && global_data->controller.ay <= PAD1_y_value_max_su){
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	885b      	ldrh	r3, [r3, #2]
 800137c:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8001380:	d912      	bls.n	80013a8 <degraded+0x40>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	885b      	ldrh	r3, [r3, #2]
 8001386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800138a:	d20d      	bcs.n	80013a8 <degraded+0x40>
		if(global_data->sonar2>70){
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	8bdb      	ldrh	r3, [r3, #30]
 8001390:	2b46      	cmp	r3, #70	@ 0x46
 8001392:	d904      	bls.n	800139e <degraded+0x36>
			speeds.left_speed=80;
 8001394:	2350      	movs	r3, #80	@ 0x50
 8001396:	613b      	str	r3, [r7, #16]
			speeds.right_speed=80;
 8001398:	2350      	movs	r3, #80	@ 0x50
 800139a:	617b      	str	r3, [r7, #20]
		if(global_data->sonar2>70){
 800139c:	e03b      	b.n	8001416 <degraded+0xae>
		}
		else{
			speeds.left_speed=64;
 800139e:	2340      	movs	r3, #64	@ 0x40
 80013a0:	613b      	str	r3, [r7, #16]
			speeds.right_speed=64;
 80013a2:	2340      	movs	r3, #64	@ 0x40
 80013a4:	617b      	str	r3, [r7, #20]
		if(global_data->sonar2>70){
 80013a6:	e036      	b.n	8001416 <degraded+0xae>
		}
	}
	else if(global_data->controller.ay >= PAD1_y_value_min_giu && global_data->controller.ay < PAD1_y_value_max_giu){
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	885b      	ldrh	r3, [r3, #2]
 80013ac:	2b63      	cmp	r3, #99	@ 0x63
 80013ae:	d804      	bhi.n	80013ba <degraded+0x52>
		speeds.left_speed=80;
 80013b0:	2350      	movs	r3, #80	@ 0x50
 80013b2:	613b      	str	r3, [r7, #16]
		speeds.right_speed=50;
 80013b4:	2332      	movs	r3, #50	@ 0x32
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	e02d      	b.n	8001416 <degraded+0xae>
	}
	else if(global_data->controller.ay >= PAD1_y_value_max_giu && global_data->controller.ay <= PAD1_y_value_min_su){
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	885b      	ldrh	r3, [r3, #2]
 80013be:	2b63      	cmp	r3, #99	@ 0x63
 80013c0:	d929      	bls.n	8001416 <degraded+0xae>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	885b      	ldrh	r3, [r3, #2]
 80013c6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80013ca:	d824      	bhi.n	8001416 <degraded+0xae>

    	if (global_data->controller.bx >= 350 && global_data->controller.bx <= 511) { //fermo gira verso sinitra
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	88db      	ldrh	r3, [r3, #6]
 80013d0:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 80013d4:	d309      	bcc.n	80013ea <degraded+0x82>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	88db      	ldrh	r3, [r3, #6]
 80013da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013de:	d204      	bcs.n	80013ea <degraded+0x82>
        	speeds.left_speed=50;
 80013e0:	2332      	movs	r3, #50	@ 0x32
 80013e2:	613b      	str	r3, [r7, #16]
        	speeds.right_speed=80;
 80013e4:	2350      	movs	r3, #80	@ 0x50
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	e015      	b.n	8001416 <degraded+0xae>
        }
        else if(global_data->controller.bx >= 0 && global_data->controller.bx <= 150){ //fermo gira verso destra
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	88db      	ldrh	r3, [r3, #6]
 80013ee:	2b96      	cmp	r3, #150	@ 0x96
 80013f0:	d804      	bhi.n	80013fc <degraded+0x94>
        	speeds.left_speed=80;
 80013f2:	2350      	movs	r3, #80	@ 0x50
 80013f4:	613b      	str	r3, [r7, #16]
          	speeds.right_speed=50;
 80013f6:	2332      	movs	r3, #50	@ 0x32
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	e00c      	b.n	8001416 <degraded+0xae>
        }
        else if(global_data->controller.bx>150 && global_data->controller.bx<350){//fermo sia nalogico pad1_y e fermo analogico pad2_x allora il rover sta fermo
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	88db      	ldrh	r3, [r3, #6]
 8001400:	2b96      	cmp	r3, #150	@ 0x96
 8001402:	d908      	bls.n	8001416 <degraded+0xae>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	88db      	ldrh	r3, [r3, #6]
 8001408:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 800140c:	d203      	bcs.n	8001416 <degraded+0xae>
        	speeds.left_speed=64;
 800140e:	2340      	movs	r3, #64	@ 0x40
 8001410:	613b      	str	r3, [r7, #16]
        	speeds.right_speed=64;
 8001412:	2340      	movs	r3, #64	@ 0x40
 8001414:	617b      	str	r3, [r7, #20]
        }
    }

	INpower2=speeds.left_speed+127;
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	337f      	adds	r3, #127	@ 0x7f
 800141c:	b2db      	uxtb	r3, r3
 800141e:	73fb      	strb	r3, [r7, #15]
	INpower4=speeds.left_speed+127;
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	337f      	adds	r3, #127	@ 0x7f
 8001426:	b2db      	uxtb	r3, r3
 8001428:	73bb      	strb	r3, [r7, #14]

	HAL_UART_Transmit(&huart1, &speeds.right_speed, 1,0);
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	1d19      	adds	r1, r3, #4
 8001430:	2300      	movs	r3, #0
 8001432:	2201      	movs	r2, #1
 8001434:	480e      	ldr	r0, [pc, #56]	@ (8001470 <degraded+0x108>)
 8001436:	f005 ffc5 	bl	80073c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &INpower2, 1,0);
 800143a:	f107 010f 	add.w	r1, r7, #15
 800143e:	2300      	movs	r3, #0
 8001440:	2201      	movs	r2, #1
 8001442:	480b      	ldr	r0, [pc, #44]	@ (8001470 <degraded+0x108>)
 8001444:	f005 ffbe 	bl	80073c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, &speeds.right_speed, 1,0);
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	1d19      	adds	r1, r3, #4
 800144e:	2300      	movs	r3, #0
 8001450:	2201      	movs	r2, #1
 8001452:	4808      	ldr	r0, [pc, #32]	@ (8001474 <degraded+0x10c>)
 8001454:	f005 ffb6 	bl	80073c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, &INpower4, 1,0);
 8001458:	f107 010e 	add.w	r1, r7, #14
 800145c:	2300      	movs	r3, #0
 800145e:	2201      	movs	r2, #1
 8001460:	4804      	ldr	r0, [pc, #16]	@ (8001474 <degraded+0x10c>)
 8001462:	f005 ffaf 	bl	80073c4 <HAL_UART_Transmit>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200003c4 	.word	0x200003c4
 8001474:	200004ec 	.word	0x200004ec

08001478 <emergency>:





void emergency(){
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
	uint8_t power=64;
 800147e:	2340      	movs	r3, #64	@ 0x40
 8001480:	71fb      	strb	r3, [r7, #7]
	uint8_t power2=64+127;
 8001482:	23bf      	movs	r3, #191	@ 0xbf
 8001484:	71bb      	strb	r3, [r7, #6]

	HAL_UART_Transmit(&huart1, &power, 1,0);
 8001486:	1df9      	adds	r1, r7, #7
 8001488:	2300      	movs	r3, #0
 800148a:	2201      	movs	r2, #1
 800148c:	480c      	ldr	r0, [pc, #48]	@ (80014c0 <emergency+0x48>)
 800148e:	f005 ff99 	bl	80073c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &power2, 1,0);
 8001492:	1db9      	adds	r1, r7, #6
 8001494:	2300      	movs	r3, #0
 8001496:	2201      	movs	r2, #1
 8001498:	4809      	ldr	r0, [pc, #36]	@ (80014c0 <emergency+0x48>)
 800149a:	f005 ff93 	bl	80073c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, &power, 1,0);
 800149e:	1df9      	adds	r1, r7, #7
 80014a0:	2300      	movs	r3, #0
 80014a2:	2201      	movs	r2, #1
 80014a4:	4807      	ldr	r0, [pc, #28]	@ (80014c4 <emergency+0x4c>)
 80014a6:	f005 ff8d 	bl	80073c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, &power2,1, 0);
 80014aa:	1db9      	adds	r1, r7, #6
 80014ac:	2300      	movs	r3, #0
 80014ae:	2201      	movs	r2, #1
 80014b0:	4804      	ldr	r0, [pc, #16]	@ (80014c4 <emergency+0x4c>)
 80014b2:	f005 ff87 	bl	80073c4 <HAL_UART_Transmit>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200003c4 	.word	0x200003c4
 80014c4:	200004ec 	.word	0x200004ec

080014c8 <serialize_partial>:
*/


#include "com_master.h"

void serialize_partial(const partial_master_t *data_master, uint8_t *buffer_send) {
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]

	buffer_send[0] = (data_master->controller.ax >> 8) & 0xFF;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b29b      	uxth	r3, r3
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	701a      	strb	r2, [r3, #0]
	buffer_send[1] = data_master->controller.ax & 0xFF;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	881a      	ldrh	r2, [r3, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	3301      	adds	r3, #1
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	701a      	strb	r2, [r3, #0]
	buffer_send[2] = (data_master->controller.ay >> 8) & 0xFF;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	885b      	ldrh	r3, [r3, #2]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	3302      	adds	r3, #2
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	701a      	strb	r2, [r3, #0]
	buffer_send[3] = data_master->controller.ay & 0xFF;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	885a      	ldrh	r2, [r3, #2]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	3303      	adds	r3, #3
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	701a      	strb	r2, [r3, #0]
	buffer_send[4] = data_master->controller.a_btn;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	3304      	adds	r3, #4
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	7912      	ldrb	r2, [r2, #4]
 8001510:	701a      	strb	r2, [r3, #0]
	buffer_send[5] = (data_master->controller.bx >> 8) & 0xFF;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	88db      	ldrh	r3, [r3, #6]
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	b29a      	uxth	r2, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	3305      	adds	r3, #5
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	701a      	strb	r2, [r3, #0]
	buffer_send[6] = data_master->controller.bx & 0xFF;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	88da      	ldrh	r2, [r3, #6]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	3306      	adds	r3, #6
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]
	buffer_send[7] = (data_master->controller.by >> 8) & 0xFF;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	891b      	ldrh	r3, [r3, #8]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	b29a      	uxth	r2, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	3307      	adds	r3, #7
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	701a      	strb	r2, [r3, #0]
	buffer_send[8] = data_master->controller.by & 0xFF;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	891a      	ldrh	r2, [r3, #8]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	3308      	adds	r3, #8
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	701a      	strb	r2, [r3, #0]
	buffer_send[9] = data_master->controller.b_btn;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	3309      	adds	r3, #9
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	7a92      	ldrb	r2, [r2, #10]
 8001552:	701a      	strb	r2, [r3, #0]
	buffer_send[10] = data_master->controller.btn1;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	330a      	adds	r3, #10
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	7ad2      	ldrb	r2, [r2, #11]
 800155c:	701a      	strb	r2, [r3, #0]
	buffer_send[11] = data_master->controller.btn2;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	330b      	adds	r3, #11
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	7b12      	ldrb	r2, [r2, #12]
 8001566:	701a      	strb	r2, [r3, #0]

	buffer_send[12] = (data_master->accelerometer.acc_x >> 8) & 0xFF;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800156e:	121b      	asrs	r3, r3, #8
 8001570:	b21a      	sxth	r2, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	330c      	adds	r3, #12
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]
	buffer_send[13] = data_master->accelerometer.acc_x & 0xFF;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	330d      	adds	r3, #13
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	701a      	strb	r2, [r3, #0]
	buffer_send[14] = (data_master->accelerometer.acc_y >> 8) & 0xFF;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800158e:	121b      	asrs	r3, r3, #8
 8001590:	b21a      	sxth	r2, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	330e      	adds	r3, #14
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	701a      	strb	r2, [r3, #0]
	buffer_send[15] = data_master->accelerometer.acc_y & 0xFF;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	330f      	adds	r3, #15
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	701a      	strb	r2, [r3, #0]
	buffer_send[16] = (data_master->accelerometer.acc_z >> 8) & 0xFF;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80015ae:	121b      	asrs	r3, r3, #8
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	3310      	adds	r3, #16
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
	buffer_send[17] = data_master->accelerometer.acc_z & 0xFF;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	3311      	adds	r3, #17
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	701a      	strb	r2, [r3, #0]
	buffer_send[18] = (data_master->accelerometer.gyro_x >> 8) & 0xFF;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80015ce:	121b      	asrs	r3, r3, #8
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	3312      	adds	r3, #18
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]
	buffer_send[19] = data_master->accelerometer.gyro_x & 0xFF;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	3313      	adds	r3, #19
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	701a      	strb	r2, [r3, #0]
	buffer_send[20] = (data_master->accelerometer.gyro_y >> 8) & 0xFF;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80015ee:	121b      	asrs	r3, r3, #8
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	3314      	adds	r3, #20
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	701a      	strb	r2, [r3, #0]
	buffer_send[21] = data_master->accelerometer.gyro_y & 0xFF;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	3315      	adds	r3, #21
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	701a      	strb	r2, [r3, #0]
	buffer_send[22] = (data_master->accelerometer.gyro_z >> 8) & 0xFF;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800160e:	121b      	asrs	r3, r3, #8
 8001610:	b21a      	sxth	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	3316      	adds	r3, #22
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]
	buffer_send[23] = data_master->accelerometer.gyro_z & 0xFF;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	3317      	adds	r3, #23
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	701a      	strb	r2, [r3, #0]

	buffer_send[24] = (data_master->temperatura2 >> 8) & 0xFF;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800162e:	121b      	asrs	r3, r3, #8
 8001630:	b21a      	sxth	r2, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	3318      	adds	r3, #24
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]
	buffer_send[25] = data_master->temperatura2 & 0xFF;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	3319      	adds	r3, #25
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	701a      	strb	r2, [r3, #0]

	buffer_send[26] = (data_master->sonar1 >> 8) & 0xFF;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	8b9b      	ldrh	r3, [r3, #28]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	b29a      	uxth	r2, r3
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	331a      	adds	r3, #26
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	701a      	strb	r2, [r3, #0]
	buffer_send[27] = data_master->sonar1 & 0xFF;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	8b9a      	ldrh	r2, [r3, #28]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	331b      	adds	r3, #27
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	701a      	strb	r2, [r3, #0]
	buffer_send[28] = (data_master->sonar2 >> 8) & 0xFF;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	8bdb      	ldrh	r3, [r3, #30]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	b29a      	uxth	r2, r3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	331c      	adds	r3, #28
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	701a      	strb	r2, [r3, #0]
	buffer_send[29] = data_master->sonar2 & 0xFF;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	8bda      	ldrh	r2, [r3, #30]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	331d      	adds	r3, #29
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	701a      	strb	r2, [r3, #0]
	buffer_send[30] = (data_master->sonar3 >> 8) & 0xFF;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	8c1b      	ldrh	r3, [r3, #32]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	b29a      	uxth	r2, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	331e      	adds	r3, #30
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	701a      	strb	r2, [r3, #0]
	buffer_send[31] = data_master->sonar3 & 0xFF;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	8c1a      	ldrh	r2, [r3, #32]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	331f      	adds	r3, #31
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	701a      	strb	r2, [r3, #0]

	buffer_send[32] = data_master->B2_state;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	3320      	adds	r3, #32
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 80016a6:	701a      	strb	r2, [r3, #0]

}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <deserialize_partial>:
void deserialize_partial(global_t* global_data,partial_master_t* data_master, const uint8_t* buffer_recived) {
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]

	global_data->controller.ax = data_master->controller.ax;
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	881a      	ldrh	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	801a      	strh	r2, [r3, #0]
	global_data->controller.ay = data_master->controller.ay;
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	885a      	ldrh	r2, [r3, #2]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	805a      	strh	r2, [r3, #2]
	global_data->controller.a_btn = data_master->controller.a_btn;
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	791a      	ldrb	r2, [r3, #4]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	711a      	strb	r2, [r3, #4]
	global_data->controller.bx = data_master->controller.bx;
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	88da      	ldrh	r2, [r3, #6]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	80da      	strh	r2, [r3, #6]
	global_data->controller.by = data_master->controller.by;
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	891a      	ldrh	r2, [r3, #8]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	811a      	strh	r2, [r3, #8]
	global_data->controller.b_btn = data_master->controller.b_btn;
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	7a9a      	ldrb	r2, [r3, #10]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	729a      	strb	r2, [r3, #10]
	global_data->controller.btn1 = data_master->controller.btn1;
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	7ada      	ldrb	r2, [r3, #11]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	72da      	strb	r2, [r3, #11]
	global_data->controller.btn2 = data_master->controller.btn2;
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	7b1a      	ldrb	r2, [r3, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	731a      	strb	r2, [r3, #12]

	global_data->accelerometer.acc_x = data_master->accelerometer.acc_x;
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	81da      	strh	r2, [r3, #14]
	global_data->accelerometer.acc_y = data_master->accelerometer.acc_y;
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	821a      	strh	r2, [r3, #16]
	global_data->accelerometer.acc_z = data_master->accelerometer.acc_z;
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	825a      	strh	r2, [r3, #18]
	global_data->accelerometer.gyro_x = data_master->accelerometer.gyro_x;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	829a      	strh	r2, [r3, #20]
	global_data->accelerometer.gyro_y = data_master->accelerometer.gyro_y;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	82da      	strh	r2, [r3, #22]
	global_data->accelerometer.gyro_z = data_master->accelerometer.gyro_z;
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	831a      	strh	r2, [r3, #24]

	global_data->temperatura1 = (buffer_recived[0] << 8) | buffer_recived[1];
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	b21a      	sxth	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3301      	adds	r3, #1
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21a      	sxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	835a      	strh	r2, [r3, #26]
	global_data->temperatura2 = data_master->temperatura2;
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	839a      	strh	r2, [r3, #28]

	global_data->sonar1 = data_master->sonar1;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	8b9a      	ldrh	r2, [r3, #28]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	83da      	strh	r2, [r3, #30]
	global_data->sonar2 = data_master->sonar2;
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	8bda      	ldrh	r2, [r3, #30]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	841a      	strh	r2, [r3, #32]
	global_data->sonar3 = data_master->sonar3;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	8c1a      	ldrh	r2, [r3, #32]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	845a      	strh	r2, [r3, #34]	@ 0x22

	global_data->led1 = (buffer_recived[2] << 8) | buffer_recived[3];
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3302      	adds	r3, #2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b21a      	sxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3303      	adds	r3, #3
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b21b      	sxth	r3, r3
 8001788:	4313      	orrs	r3, r2
 800178a:	b21b      	sxth	r3, r3
 800178c:	b29a      	uxth	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	849a      	strh	r2, [r3, #36]	@ 0x24
	global_data->led2 = (buffer_recived[4] << 8) | buffer_recived[5];
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3304      	adds	r3, #4
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	b21a      	sxth	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3305      	adds	r3, #5
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	4313      	orrs	r3, r2
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	84da      	strh	r2, [r3, #38]	@ 0x26

	global_data->encoder1 = (buffer_recived[6] << 8) | buffer_recived[7];
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3306      	adds	r3, #6
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	b21a      	sxth	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3307      	adds	r3, #7
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b21b      	sxth	r3, r3
 80017c0:	4313      	orrs	r3, r2
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	851a      	strh	r2, [r3, #40]	@ 0x28
	global_data->encoder2 = (buffer_recived[8] << 8) | buffer_recived[9];
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3308      	adds	r3, #8
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3309      	adds	r3, #9
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	b21b      	sxth	r3, r3
 80017dc:	4313      	orrs	r3, r2
 80017de:	b21b      	sxth	r3, r3
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
	global_data->encoder3 = (buffer_recived[10] << 8) | buffer_recived[11];
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	330a      	adds	r3, #10
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	330b      	adds	r3, #11
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	4313      	orrs	r3, r2
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	859a      	strh	r2, [r3, #44]	@ 0x2c
	global_data->encoder4 = (buffer_recived[12] << 8) | buffer_recived[13];
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	330c      	adds	r3, #12
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	b21a      	sxth	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	330d      	adds	r3, #13
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b21b      	sxth	r3, r3
 8001814:	4313      	orrs	r3, r2
 8001816:	b21b      	sxth	r3, r3
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	85da      	strh	r2, [r3, #46]	@ 0x2e

	global_data->B1_state=buffer_recived[14];
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	330e      	adds	r3, #14
 8001822:	781a      	ldrb	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	global_data->B2_state=data_master->B2_state;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

	global_data->B1_decision=buffer_recived[15];
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	330f      	adds	r3, #15
 800183a:	781a      	ldrb	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <is_invalid_value>:
 *
 * Ritorna:
 * - true se il valore è al di fuori dell'intervallo [min, max].
 * - false altrimenti.
 */
bool is_invalid_value(int x, int min, int max) {
 800184e:	b480      	push	{r7}
 8001850:	b085      	sub	sp, #20
 8001852:	af00      	add	r7, sp, #0
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
    return (x < min || x > max);
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	429a      	cmp	r2, r3
 8001860:	db03      	blt.n	800186a <is_invalid_value+0x1c>
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	429a      	cmp	r2, r3
 8001868:	dd01      	ble.n	800186e <is_invalid_value+0x20>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <is_invalid_value+0x22>
 800186e:	2300      	movs	r3, #0
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
}
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <are_values_zero>:
 *
 * Ritorna:
 * - true se tutti i valori sono zero.
 * - false se almeno uno dei valori non è zero.
 */
bool are_values_zero(int x1, int y1, int x2, int y2) {
 8001882:	b480      	push	{r7}
 8001884:	b085      	sub	sp, #20
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	603b      	str	r3, [r7, #0]
    return (x1 == 0 && y1 == 0 && x2 == 0 && y2 == 0);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10a      	bne.n	80018ac <are_values_zero+0x2a>
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d107      	bne.n	80018ac <are_values_zero+0x2a>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d104      	bne.n	80018ac <are_values_zero+0x2a>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <are_values_zero+0x2a>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <are_values_zero+0x2c>
 80018ac:	2300      	movs	r3, #0
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	b2db      	uxtb	r3, r3
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	@ 0x28
 80018c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001a48 <MX_GPIO_Init+0x188>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018da:	4a5b      	ldr	r2, [pc, #364]	@ (8001a48 <MX_GPIO_Init+0x188>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e2:	4b59      	ldr	r3, [pc, #356]	@ (8001a48 <MX_GPIO_Init+0x188>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ee:	4b56      	ldr	r3, [pc, #344]	@ (8001a48 <MX_GPIO_Init+0x188>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f2:	4a55      	ldr	r2, [pc, #340]	@ (8001a48 <MX_GPIO_Init+0x188>)
 80018f4:	f043 0320 	orr.w	r3, r3, #32
 80018f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018fa:	4b53      	ldr	r3, [pc, #332]	@ (8001a48 <MX_GPIO_Init+0x188>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fe:	f003 0320 	and.w	r3, r3, #32
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	4b50      	ldr	r3, [pc, #320]	@ (8001a48 <MX_GPIO_Init+0x188>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190a:	4a4f      	ldr	r2, [pc, #316]	@ (8001a48 <MX_GPIO_Init+0x188>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001912:	4b4d      	ldr	r3, [pc, #308]	@ (8001a48 <MX_GPIO_Init+0x188>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a48 <MX_GPIO_Init+0x188>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001922:	4a49      	ldr	r2, [pc, #292]	@ (8001a48 <MX_GPIO_Init+0x188>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800192a:	4b47      	ldr	r3, [pc, #284]	@ (8001a48 <MX_GPIO_Init+0x188>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001936:	4b44      	ldr	r3, [pc, #272]	@ (8001a48 <MX_GPIO_Init+0x188>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193a:	4a43      	ldr	r2, [pc, #268]	@ (8001a48 <MX_GPIO_Init+0x188>)
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001942:	4b41      	ldr	r3, [pc, #260]	@ (8001a48 <MX_GPIO_Init+0x188>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, triggerS2_Pin|triggerS1_Pin|rele1_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 51d0 	mov.w	r1, #6656	@ 0x1a00
 8001954:	483d      	ldr	r0, [pc, #244]	@ (8001a4c <MX_GPIO_Init+0x18c>)
 8001956:	f002 fab5 	bl	8003ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(triggerS3_GPIO_Port, triggerS3_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001960:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001964:	f002 faae 	bl	8003ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rele2_GPIO_Port, rele2_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	2104      	movs	r1, #4
 800196c:	4838      	ldr	r0, [pc, #224]	@ (8001a50 <MX_GPIO_Init+0x190>)
 800196e:	f002 faa9 	bl	8003ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(B2_pin_GPIO_Port, B2_pin_Pin, GPIO_PIN_RESET);
 8001972:	2200      	movs	r2, #0
 8001974:	2120      	movs	r1, #32
 8001976:	4837      	ldr	r0, [pc, #220]	@ (8001a54 <MX_GPIO_Init+0x194>)
 8001978:	f002 faa4 	bl	8003ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : echoS2_Pin echoS1_Pin */
  GPIO_InitStruct.Pin = echoS2_Pin|echoS1_Pin;
 800197c:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	482e      	ldr	r0, [pc, #184]	@ (8001a4c <MX_GPIO_Init+0x18c>)
 8001992:	f002 f8fd 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : triggerS2_Pin triggerS1_Pin rele1_Pin */
  GPIO_InitStruct.Pin = triggerS2_Pin|triggerS1_Pin|rele1_Pin;
 8001996:	f44f 53d0 	mov.w	r3, #6656	@ 0x1a00
 800199a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2301      	movs	r3, #1
 800199e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4619      	mov	r1, r3
 80019ae:	4827      	ldr	r0, [pc, #156]	@ (8001a4c <MX_GPIO_Init+0x18c>)
 80019b0:	f002 f8ee 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : echoS3_Pin */
  GPIO_InitStruct.Pin = echoS3_Pin;
 80019b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(echoS3_GPIO_Port, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019cc:	f002 f8e0 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : triggerS3_Pin */
  GPIO_InitStruct.Pin = triggerS3_Pin;
 80019d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(triggerS3_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ec:	f002 f8d0 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : rele2_Pin */
  GPIO_InitStruct.Pin = rele2_Pin;
 80019f0:	2304      	movs	r3, #4
 80019f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(rele2_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	4812      	ldr	r0, [pc, #72]	@ (8001a50 <MX_GPIO_Init+0x190>)
 8001a08:	f002 f8c2 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_pin_Pin */
  GPIO_InitStruct.Pin = B1_pin_Pin;
 8001a0c:	2310      	movs	r3, #16
 8001a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_pin_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480d      	ldr	r0, [pc, #52]	@ (8001a54 <MX_GPIO_Init+0x194>)
 8001a20:	f002 f8b6 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_pin_Pin */
  GPIO_InitStruct.Pin = B2_pin_Pin;
 8001a24:	2320      	movs	r3, #32
 8001a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(B2_pin_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4806      	ldr	r0, [pc, #24]	@ (8001a54 <MX_GPIO_Init+0x194>)
 8001a3c:	f002 f8a8 	bl	8003b90 <HAL_GPIO_Init>

}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	@ 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	48000800 	.word	0x48000800
 8001a50:	48000c00 	.word	0x48000c00
 8001a54:	48000400 	.word	0x48000400

08001a58 <Ultrasonic_Init>:
#include "gpio.h"



void Ultrasonic_Init(UltrasonicSensor *sensor, GPIO_TypeDef *trig_port, uint16_t trig_pin, GPIO_TypeDef *echo_port, uint16_t echo_pin, TIM_HandleTypeDef *timer)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	4613      	mov	r3, r2
 8001a66:	80fb      	strh	r3, [r7, #6]
    sensor->trig_port = trig_port;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	601a      	str	r2, [r3, #0]
    sensor->trig_pin = trig_pin;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	88fa      	ldrh	r2, [r7, #6]
 8001a72:	809a      	strh	r2, [r3, #4]
    sensor->echo_port = echo_port;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	609a      	str	r2, [r3, #8]
    sensor->echo_pin = echo_pin;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8b3a      	ldrh	r2, [r7, #24]
 8001a7e:	819a      	strh	r2, [r3, #12]
    sensor->timer = timer;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	611a      	str	r2, [r3, #16]
    sensor->error_count = 0; // Inizializza il contatore errori
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	751a      	strb	r2, [r3, #20]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <Ultrasonic_GetDistance>:

int16_t Ultrasonic_GetDistance(UltrasonicSensor *sensor)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
    uint32_t start_tick;
    uint32_t value1, value2;

    // Trigger del sensore
    HAL_GPIO_WritePin(sensor->trig_port, sensor->trig_pin, GPIO_PIN_SET);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	889b      	ldrh	r3, [r3, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f002 fa0a 	bl	8003ec4 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COUNTER(sensor->timer, 0);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(sensor->timer) < 10);  // Attendi 10 us
 8001aba:	bf00      	nop
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac4:	2b09      	cmp	r3, #9
 8001ac6:	d9f9      	bls.n	8001abc <Ultrasonic_GetDistance+0x24>
    HAL_GPIO_WritePin(sensor->trig_port, sensor->trig_pin, GPIO_PIN_RESET);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	889b      	ldrh	r3, [r3, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f002 f9f6 	bl	8003ec4 <HAL_GPIO_WritePin>

    // Attende che il segnale ECHO si alzi
    start_tick = HAL_GetTick();
 8001ad8:	f000 fe6e 	bl	80027b8 <HAL_GetTick>
 8001adc:	6178      	str	r0, [r7, #20]
    while (!HAL_GPIO_ReadPin(sensor->echo_port, sensor->echo_pin)) {
 8001ade:	e010      	b.n	8001b02 <Ultrasonic_GetDistance+0x6a>
        if (HAL_GetTick() - start_tick > 30) { // Timeout 30 ms
 8001ae0:	f000 fe6a 	bl	80027b8 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b1e      	cmp	r3, #30
 8001aec:	d909      	bls.n	8001b02 <Ultrasonic_GetDistance+0x6a>
            sensor->error_count++;  // Incrementa il conteggio degli errori
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7d1b      	ldrb	r3, [r3, #20]
 8001af2:	3301      	adds	r3, #1
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	751a      	strb	r2, [r3, #20]


            return sensor->last_valid_distance; // Ritorna l'ultima distanza valida
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001b00:	e063      	b.n	8001bca <Ultrasonic_GetDistance+0x132>
    while (!HAL_GPIO_ReadPin(sensor->echo_port, sensor->echo_pin)) {
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	899b      	ldrh	r3, [r3, #12]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	f002 f9c1 	bl	8003e94 <HAL_GPIO_ReadPin>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0e3      	beq.n	8001ae0 <Ultrasonic_GetDistance+0x48>
        }
    }
    value1 = __HAL_TIM_GET_COUNTER(sensor->timer);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b20:	613b      	str	r3, [r7, #16]

    // Attende che il segnale ECHO si abbassi
    start_tick = HAL_GetTick();
 8001b22:	f000 fe49 	bl	80027b8 <HAL_GetTick>
 8001b26:	6178      	str	r0, [r7, #20]
    while (HAL_GPIO_ReadPin(sensor->echo_port, sensor->echo_pin)) {
 8001b28:	e010      	b.n	8001b4c <Ultrasonic_GetDistance+0xb4>
        if (HAL_GetTick() - start_tick > 30) { // Timeout 30 ms
 8001b2a:	f000 fe45 	bl	80027b8 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b1e      	cmp	r3, #30
 8001b36:	d909      	bls.n	8001b4c <Ultrasonic_GetDistance+0xb4>
            sensor->error_count++;  // Incrementa il conteggio degli errori
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7d1b      	ldrb	r3, [r3, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	751a      	strb	r2, [r3, #20]


            return sensor->last_valid_distance; // Ritorna l'ultima distanza valida
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001b4a:	e03e      	b.n	8001bca <Ultrasonic_GetDistance+0x132>
    while (HAL_GPIO_ReadPin(sensor->echo_port, sensor->echo_pin)) {
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	899b      	ldrh	r3, [r3, #12]
 8001b54:	4619      	mov	r1, r3
 8001b56:	4610      	mov	r0, r2
 8001b58:	f002 f99c 	bl	8003e94 <HAL_GPIO_ReadPin>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1e3      	bne.n	8001b2a <Ultrasonic_GetDistance+0x92>
        }
    }
    value2 = __HAL_TIM_GET_COUNTER(sensor->timer);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6a:	60fb      	str	r3, [r7, #12]

    // Calcola la distanza in cm
    int16_t distance = (int16_t)((value2 - value1) * 0.034 / 2);
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fc96 	bl	80004a4 <__aeabi_ui2d>
 8001b78:	a317      	add	r3, pc, #92	@ (adr r3, 8001bd8 <Ultrasonic_GetDistance+0x140>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	f7fe fd0b 	bl	8000598 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b92:	f7fe fe2b 	bl	80007ec <__aeabi_ddiv>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7fe ff0d 	bl	80009bc <__aeabi_d2iz>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	817b      	strh	r3, [r7, #10]

    // Se la misura è valida, resetta il contatore errori e aggiorna l'ultima distanza valida
    if (distance > 0 && distance <= 400) {
 8001ba6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	dd0a      	ble.n	8001bc4 <Ultrasonic_GetDistance+0x12c>
 8001bae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001bb2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001bb6:	dc05      	bgt.n	8001bc4 <Ultrasonic_GetDistance+0x12c>
        sensor->error_count = 0;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	751a      	strb	r2, [r3, #20]
        sensor->last_valid_distance = distance;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	897a      	ldrh	r2, [r7, #10]
 8001bc2:	82da      	strh	r2, [r3, #22]
    }

    return sensor->last_valid_distance; // Ritorna sempre un valore affidabile
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	b020c49c 	.word	0xb020c49c
 8001bdc:	3fa16872 	.word	0x3fa16872

08001be0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <MX_I2C1_Init+0x74>)
 8001be6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c58 <MX_I2C1_Init+0x78>)
 8001be8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	@ (8001c54 <MX_I2C1_Init+0x74>)
 8001bec:	4a1b      	ldr	r2, [pc, #108]	@ (8001c5c <MX_I2C1_Init+0x7c>)
 8001bee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <MX_I2C1_Init+0x74>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bf6:	4b17      	ldr	r3, [pc, #92]	@ (8001c54 <MX_I2C1_Init+0x74>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bfc:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <MX_I2C1_Init+0x74>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c02:	4b14      	ldr	r3, [pc, #80]	@ (8001c54 <MX_I2C1_Init+0x74>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <MX_I2C1_Init+0x74>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c0e:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <MX_I2C1_Init+0x74>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <MX_I2C1_Init+0x74>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c1a:	480e      	ldr	r0, [pc, #56]	@ (8001c54 <MX_I2C1_Init+0x74>)
 8001c1c:	f002 f96a 	bl	8003ef4 <HAL_I2C_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c26:	f000 f921 	bl	8001e6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4809      	ldr	r0, [pc, #36]	@ (8001c54 <MX_I2C1_Init+0x74>)
 8001c2e:	f002 fd51 	bl	80046d4 <HAL_I2CEx_ConfigAnalogFilter>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c38:	f000 f918 	bl	8001e6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4805      	ldr	r0, [pc, #20]	@ (8001c54 <MX_I2C1_Init+0x74>)
 8001c40:	f002 fd93 	bl	800476a <HAL_I2CEx_ConfigDigitalFilter>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c4a:	f000 f90f 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200001dc 	.word	0x200001dc
 8001c58:	40005400 	.word	0x40005400
 8001c5c:	40b285c2 	.word	0x40b285c2

08001c60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b0a0      	sub	sp, #128	@ 0x80
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c78:	f107 0318 	add.w	r3, r7, #24
 8001c7c:	2254      	movs	r2, #84	@ 0x54
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f008 fff1 	bl	800ac68 <memset>
  if(i2cHandle->Instance==I2C1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a2d      	ldr	r2, [pc, #180]	@ (8001d40 <HAL_I2C_MspInit+0xe0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d153      	bne.n	8001d38 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c90:	2340      	movs	r3, #64	@ 0x40
 8001c92:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c98:	f107 0318 	add.w	r3, r7, #24
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f003 fbc5 	bl	800542c <HAL_RCCEx_PeriphCLKConfig>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ca8:	f000 f8e0 	bl	8001e6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cac:	4b25      	ldr	r3, [pc, #148]	@ (8001d44 <HAL_I2C_MspInit+0xe4>)
 8001cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb0:	4a24      	ldr	r2, [pc, #144]	@ (8001d44 <HAL_I2C_MspInit+0xe4>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cb8:	4b22      	ldr	r3, [pc, #136]	@ (8001d44 <HAL_I2C_MspInit+0xe4>)
 8001cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d44 <HAL_I2C_MspInit+0xe4>)
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc8:	4a1e      	ldr	r2, [pc, #120]	@ (8001d44 <HAL_I2C_MspInit+0xe4>)
 8001cca:	f043 0302 	orr.w	r3, r3, #2
 8001cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d44 <HAL_I2C_MspInit+0xe4>)
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ce0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce2:	2312      	movs	r3, #18
 8001ce4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cee:	2304      	movs	r3, #4
 8001cf0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cfc:	f001 ff48 	bl	8003b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d00:	2380      	movs	r3, #128	@ 0x80
 8001d02:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d04:	2312      	movs	r3, #18
 8001d06:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d10:	2304      	movs	r3, #4
 8001d12:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d18:	4619      	mov	r1, r3
 8001d1a:	480b      	ldr	r0, [pc, #44]	@ (8001d48 <HAL_I2C_MspInit+0xe8>)
 8001d1c:	f001 ff38 	bl	8003b90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <HAL_I2C_MspInit+0xe4>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d24:	4a07      	ldr	r2, [pc, #28]	@ (8001d44 <HAL_I2C_MspInit+0xe4>)
 8001d26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d2c:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <HAL_I2C_MspInit+0xe4>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d38:	bf00      	nop
 8001d3a:	3780      	adds	r7, #128	@ 0x80
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40005400 	.word	0x40005400
 8001d44:	40021000 	.word	0x40021000
 8001d48:	48000400 	.word	0x48000400

08001d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d50:	f000 fd07 	bl	8002762 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d54:	f000 f82c 	bl	8001db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d58:	f7ff fdb2 	bl	80018c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d5c:	f7ff ff40 	bl	8001be0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d60:	f000 f88a 	bl	8001e78 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001d64:	f000 fb12 	bl	800238c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001d68:	f000 fba8 	bl	80024bc <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001d6c:	f7fe ffc6 	bl	8000cfc <MX_ADC1_Init>
  MX_TIM7_Init();
 8001d70:	f000 fa90 	bl	8002294 <MX_TIM7_Init>
  MX_TIM1_Init();
 8001d74:	f000 f9ec 	bl	8002150 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d78:	f000 fa3e 	bl	80021f8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001d7c:	f000 fb52 	bl	8002424 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001d80:	4808      	ldr	r0, [pc, #32]	@ (8001da4 <main+0x58>)
 8001d82:	f004 fd2d 	bl	80067e0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8001d86:	4808      	ldr	r0, [pc, #32]	@ (8001da8 <main+0x5c>)
 8001d88:	f004 fd2a 	bl	80067e0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim7);
 8001d8c:	4807      	ldr	r0, [pc, #28]	@ (8001dac <main+0x60>)
 8001d8e:	f004 fd27 	bl	80067e0 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d92:	f006 fa07 	bl	80081a4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001d96:	f7ff f85b 	bl	8000e50 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d9a:	f006 fa27 	bl	80081ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d9e:	bf00      	nop
 8001da0:	e7fd      	b.n	8001d9e <main+0x52>
 8001da2:	bf00      	nop
 8001da4:	200002e0 	.word	0x200002e0
 8001da8:	2000032c 	.word	0x2000032c
 8001dac:	20000378 	.word	0x20000378

08001db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b094      	sub	sp, #80	@ 0x50
 8001db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001db6:	f107 0318 	add.w	r3, r7, #24
 8001dba:	2238      	movs	r2, #56	@ 0x38
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f008 ff52 	bl	800ac68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc4:	1d3b      	adds	r3, r7, #4
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
 8001dd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f002 fd16 	bl	8004804 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ddc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001de0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001de2:	2340      	movs	r3, #64	@ 0x40
 8001de4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de6:	2302      	movs	r3, #2
 8001de8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dea:	2302      	movs	r3, #2
 8001dec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001dee:	2304      	movs	r3, #4
 8001df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001df2:	2355      	movs	r3, #85	@ 0x55
 8001df4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001df6:	2302      	movs	r3, #2
 8001df8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e02:	f107 0318 	add.w	r3, r7, #24
 8001e06:	4618      	mov	r0, r3
 8001e08:	f002 fdb0 	bl	800496c <HAL_RCC_OscConfig>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e12:	f000 f82b 	bl	8001e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e16:	230f      	movs	r3, #15
 8001e18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 f8ae 	bl	8004f90 <HAL_RCC_ClockConfig>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e3a:	f000 f817 	bl	8001e6c <Error_Handler>
  }
}
 8001e3e:	bf00      	nop
 8001e40:	3750      	adds	r7, #80	@ 0x50
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a04      	ldr	r2, [pc, #16]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e5a:	f000 fc9b 	bl	8002794 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40001000 	.word	0x40001000

08001e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e70:	b672      	cpsid	i
}
 8001e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <Error_Handler+0x8>

08001e78 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001eec <MX_SPI1_Init+0x74>)
 8001e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef0 <MX_SPI1_Init+0x78>)
 8001e80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e82:	4b1a      	ldr	r3, [pc, #104]	@ (8001eec <MX_SPI1_Init+0x74>)
 8001e84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e8a:	4b18      	ldr	r3, [pc, #96]	@ (8001eec <MX_SPI1_Init+0x74>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e90:	4b16      	ldr	r3, [pc, #88]	@ (8001eec <MX_SPI1_Init+0x74>)
 8001e92:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001e96:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e98:	4b14      	ldr	r3, [pc, #80]	@ (8001eec <MX_SPI1_Init+0x74>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e9e:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <MX_SPI1_Init+0x74>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <MX_SPI1_Init+0x74>)
 8001ea6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eaa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <MX_SPI1_Init+0x74>)
 8001eae:	2238      	movs	r2, #56	@ 0x38
 8001eb0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001eec <MX_SPI1_Init+0x74>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <MX_SPI1_Init+0x74>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <MX_SPI1_Init+0x74>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ec4:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <MX_SPI1_Init+0x74>)
 8001ec6:	2207      	movs	r2, #7
 8001ec8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001eca:	4b08      	ldr	r3, [pc, #32]	@ (8001eec <MX_SPI1_Init+0x74>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <MX_SPI1_Init+0x74>)
 8001ed2:	2208      	movs	r2, #8
 8001ed4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ed6:	4805      	ldr	r0, [pc, #20]	@ (8001eec <MX_SPI1_Init+0x74>)
 8001ed8:	f003 fcf6 	bl	80058c8 <HAL_SPI_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ee2:	f7ff ffc3 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000230 	.word	0x20000230
 8001ef0:	40013000 	.word	0x40013000

08001ef4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	@ 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a25      	ldr	r2, [pc, #148]	@ (8001fa8 <HAL_SPI_MspInit+0xb4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d144      	bne.n	8001fa0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f16:	4b25      	ldr	r3, [pc, #148]	@ (8001fac <HAL_SPI_MspInit+0xb8>)
 8001f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f1a:	4a24      	ldr	r2, [pc, #144]	@ (8001fac <HAL_SPI_MspInit+0xb8>)
 8001f1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f22:	4b22      	ldr	r3, [pc, #136]	@ (8001fac <HAL_SPI_MspInit+0xb8>)
 8001f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fac <HAL_SPI_MspInit+0xb8>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f32:	4a1e      	ldr	r2, [pc, #120]	@ (8001fac <HAL_SPI_MspInit+0xb8>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fac <HAL_SPI_MspInit+0xb8>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <HAL_SPI_MspInit+0xb8>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4a:	4a18      	ldr	r2, [pc, #96]	@ (8001fac <HAL_SPI_MspInit+0xb8>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f52:	4b16      	ldr	r3, [pc, #88]	@ (8001fac <HAL_SPI_MspInit+0xb8>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f5e:	23c0      	movs	r3, #192	@ 0xc0
 8001f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f6e:	2305      	movs	r3, #5
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f7c:	f001 fe08 	bl	8003b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f80:	2308      	movs	r3, #8
 8001f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f90:	2305      	movs	r3, #5
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4805      	ldr	r0, [pc, #20]	@ (8001fb0 <HAL_SPI_MspInit+0xbc>)
 8001f9c:	f001 fdf8 	bl	8003b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	3728      	adds	r7, #40	@ 0x28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40013000 	.word	0x40013000
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	48000400 	.word	0x48000400

08001fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <HAL_MspInit+0x50>)
 8001fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fbe:	4a11      	ldr	r2, [pc, #68]	@ (8002004 <HAL_MspInit+0x50>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <HAL_MspInit+0x50>)
 8001fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <HAL_MspInit+0x50>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd6:	4a0b      	ldr	r2, [pc, #44]	@ (8002004 <HAL_MspInit+0x50>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <HAL_MspInit+0x50>)
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	210f      	movs	r1, #15
 8001fee:	f06f 0001 	mvn.w	r0, #1
 8001ff2:	f001 fda5 	bl	8003b40 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ff6:	f002 fca9 	bl	800494c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000

08002008 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08c      	sub	sp, #48	@ 0x30
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002018:	4b2c      	ldr	r3, [pc, #176]	@ (80020cc <HAL_InitTick+0xc4>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201c:	4a2b      	ldr	r2, [pc, #172]	@ (80020cc <HAL_InitTick+0xc4>)
 800201e:	f043 0310 	orr.w	r3, r3, #16
 8002022:	6593      	str	r3, [r2, #88]	@ 0x58
 8002024:	4b29      	ldr	r3, [pc, #164]	@ (80020cc <HAL_InitTick+0xc4>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002030:	f107 020c 	add.w	r2, r7, #12
 8002034:	f107 0310 	add.w	r3, r7, #16
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f003 f97e 	bl	800533c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002040:	f003 f950 	bl	80052e4 <HAL_RCC_GetPCLK1Freq>
 8002044:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002048:	4a21      	ldr	r2, [pc, #132]	@ (80020d0 <HAL_InitTick+0xc8>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	0c9b      	lsrs	r3, r3, #18
 8002050:	3b01      	subs	r3, #1
 8002052:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002054:	4b1f      	ldr	r3, [pc, #124]	@ (80020d4 <HAL_InitTick+0xcc>)
 8002056:	4a20      	ldr	r2, [pc, #128]	@ (80020d8 <HAL_InitTick+0xd0>)
 8002058:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800205a:	4b1e      	ldr	r3, [pc, #120]	@ (80020d4 <HAL_InitTick+0xcc>)
 800205c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002060:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002062:	4a1c      	ldr	r2, [pc, #112]	@ (80020d4 <HAL_InitTick+0xcc>)
 8002064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002066:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002068:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <HAL_InitTick+0xcc>)
 800206a:	2200      	movs	r2, #0
 800206c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206e:	4b19      	ldr	r3, [pc, #100]	@ (80020d4 <HAL_InitTick+0xcc>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002074:	4817      	ldr	r0, [pc, #92]	@ (80020d4 <HAL_InitTick+0xcc>)
 8002076:	f004 fb5b 	bl	8006730 <HAL_TIM_Base_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002080:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002084:	2b00      	cmp	r3, #0
 8002086:	d11b      	bne.n	80020c0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002088:	4812      	ldr	r0, [pc, #72]	@ (80020d4 <HAL_InitTick+0xcc>)
 800208a:	f004 fc19 	bl	80068c0 <HAL_TIM_Base_Start_IT>
 800208e:	4603      	mov	r3, r0
 8002090:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002094:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002098:	2b00      	cmp	r3, #0
 800209a:	d111      	bne.n	80020c0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800209c:	2036      	movs	r0, #54	@ 0x36
 800209e:	f001 fd69 	bl	8003b74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b0f      	cmp	r3, #15
 80020a6:	d808      	bhi.n	80020ba <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80020a8:	2200      	movs	r2, #0
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	2036      	movs	r0, #54	@ 0x36
 80020ae:	f001 fd47 	bl	8003b40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020b2:	4a0a      	ldr	r2, [pc, #40]	@ (80020dc <HAL_InitTick+0xd4>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	e002      	b.n	80020c0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80020c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3730      	adds	r7, #48	@ 0x30
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000
 80020d0:	431bde83 	.word	0x431bde83
 80020d4:	20000294 	.word	0x20000294
 80020d8:	40001000 	.word	0x40001000
 80020dc:	20000008 	.word	0x20000008

080020e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020e4:	bf00      	nop
 80020e6:	e7fd      	b.n	80020e4 <NMI_Handler+0x4>

080020e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <HardFault_Handler+0x4>

080020f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <MemManage_Handler+0x4>

080020f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <BusFault_Handler+0x4>

08002100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <UsageFault_Handler+0x4>

08002108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800211c:	4802      	ldr	r0, [pc, #8]	@ (8002128 <TIM6_DAC_IRQHandler+0x10>)
 800211e:	f004 fc47 	bl	80069b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000294 	.word	0x20000294

0800212c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <SystemInit+0x20>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002136:	4a05      	ldr	r2, [pc, #20]	@ (800214c <SystemInit+0x20>)
 8002138:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800213c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002156:	f107 0310 	add.w	r3, r7, #16
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800216e:	4b20      	ldr	r3, [pc, #128]	@ (80021f0 <MX_TIM1_Init+0xa0>)
 8002170:	4a20      	ldr	r2, [pc, #128]	@ (80021f4 <MX_TIM1_Init+0xa4>)
 8002172:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8002174:	4b1e      	ldr	r3, [pc, #120]	@ (80021f0 <MX_TIM1_Init+0xa0>)
 8002176:	22a9      	movs	r2, #169	@ 0xa9
 8002178:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217a:	4b1d      	ldr	r3, [pc, #116]	@ (80021f0 <MX_TIM1_Init+0xa0>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002180:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <MX_TIM1_Init+0xa0>)
 8002182:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002186:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002188:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <MX_TIM1_Init+0xa0>)
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800218e:	4b18      	ldr	r3, [pc, #96]	@ (80021f0 <MX_TIM1_Init+0xa0>)
 8002190:	2200      	movs	r2, #0
 8002192:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002194:	4b16      	ldr	r3, [pc, #88]	@ (80021f0 <MX_TIM1_Init+0xa0>)
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800219a:	4815      	ldr	r0, [pc, #84]	@ (80021f0 <MX_TIM1_Init+0xa0>)
 800219c:	f004 fac8 	bl	8006730 <HAL_TIM_Base_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80021a6:	f7ff fe61 	bl	8001e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021b0:	f107 0310 	add.w	r3, r7, #16
 80021b4:	4619      	mov	r1, r3
 80021b6:	480e      	ldr	r0, [pc, #56]	@ (80021f0 <MX_TIM1_Init+0xa0>)
 80021b8:	f004 fd4a 	bl	8006c50 <HAL_TIM_ConfigClockSource>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80021c2:	f7ff fe53 	bl	8001e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	4619      	mov	r1, r3
 80021d6:	4806      	ldr	r0, [pc, #24]	@ (80021f0 <MX_TIM1_Init+0xa0>)
 80021d8:	f004 ffc8 	bl	800716c <HAL_TIMEx_MasterConfigSynchronization>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80021e2:	f7ff fe43 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200002e0 	.word	0x200002e0
 80021f4:	40012c00 	.word	0x40012c00

080021f8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021fe:	f107 0310 	add.w	r3, r7, #16
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002216:	4b1e      	ldr	r3, [pc, #120]	@ (8002290 <MX_TIM2_Init+0x98>)
 8002218:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800221c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800221e:	4b1c      	ldr	r3, [pc, #112]	@ (8002290 <MX_TIM2_Init+0x98>)
 8002220:	22a9      	movs	r2, #169	@ 0xa9
 8002222:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002224:	4b1a      	ldr	r3, [pc, #104]	@ (8002290 <MX_TIM2_Init+0x98>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800222a:	4b19      	ldr	r3, [pc, #100]	@ (8002290 <MX_TIM2_Init+0x98>)
 800222c:	f04f 32ff 	mov.w	r2, #4294967295
 8002230:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002232:	4b17      	ldr	r3, [pc, #92]	@ (8002290 <MX_TIM2_Init+0x98>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002238:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <MX_TIM2_Init+0x98>)
 800223a:	2200      	movs	r2, #0
 800223c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800223e:	4814      	ldr	r0, [pc, #80]	@ (8002290 <MX_TIM2_Init+0x98>)
 8002240:	f004 fa76 	bl	8006730 <HAL_TIM_Base_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800224a:	f7ff fe0f 	bl	8001e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800224e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002252:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002254:	f107 0310 	add.w	r3, r7, #16
 8002258:	4619      	mov	r1, r3
 800225a:	480d      	ldr	r0, [pc, #52]	@ (8002290 <MX_TIM2_Init+0x98>)
 800225c:	f004 fcf8 	bl	8006c50 <HAL_TIM_ConfigClockSource>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002266:	f7ff fe01 	bl	8001e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4806      	ldr	r0, [pc, #24]	@ (8002290 <MX_TIM2_Init+0x98>)
 8002278:	f004 ff78 	bl	800716c <HAL_TIMEx_MasterConfigSynchronization>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002282:	f7ff fdf3 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002286:	bf00      	nop
 8002288:	3720      	adds	r7, #32
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000032c 	.word	0x2000032c

08002294 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80022a4:	4b14      	ldr	r3, [pc, #80]	@ (80022f8 <MX_TIM7_Init+0x64>)
 80022a6:	4a15      	ldr	r2, [pc, #84]	@ (80022fc <MX_TIM7_Init+0x68>)
 80022a8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 80022aa:	4b13      	ldr	r3, [pc, #76]	@ (80022f8 <MX_TIM7_Init+0x64>)
 80022ac:	22a9      	movs	r2, #169	@ 0xa9
 80022ae:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b0:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <MX_TIM7_Init+0x64>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80022b6:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <MX_TIM7_Init+0x64>)
 80022b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022bc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022be:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <MX_TIM7_Init+0x64>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80022c4:	480c      	ldr	r0, [pc, #48]	@ (80022f8 <MX_TIM7_Init+0x64>)
 80022c6:	f004 fa33 	bl	8006730 <HAL_TIM_Base_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80022d0:	f7ff fdcc 	bl	8001e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d4:	2300      	movs	r3, #0
 80022d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	4619      	mov	r1, r3
 80022e0:	4805      	ldr	r0, [pc, #20]	@ (80022f8 <MX_TIM7_Init+0x64>)
 80022e2:	f004 ff43 	bl	800716c <HAL_TIMEx_MasterConfigSynchronization>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80022ec:	f7ff fdbe 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000378 	.word	0x20000378
 80022fc:	40001400 	.word	0x40001400

08002300 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a1c      	ldr	r2, [pc, #112]	@ (8002380 <HAL_TIM_Base_MspInit+0x80>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d10c      	bne.n	800232c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002312:	4b1c      	ldr	r3, [pc, #112]	@ (8002384 <HAL_TIM_Base_MspInit+0x84>)
 8002314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002316:	4a1b      	ldr	r2, [pc, #108]	@ (8002384 <HAL_TIM_Base_MspInit+0x84>)
 8002318:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800231c:	6613      	str	r3, [r2, #96]	@ 0x60
 800231e:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <HAL_TIM_Base_MspInit+0x84>)
 8002320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002322:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800232a:	e022      	b.n	8002372 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002334:	d10c      	bne.n	8002350 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002336:	4b13      	ldr	r3, [pc, #76]	@ (8002384 <HAL_TIM_Base_MspInit+0x84>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233a:	4a12      	ldr	r2, [pc, #72]	@ (8002384 <HAL_TIM_Base_MspInit+0x84>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6593      	str	r3, [r2, #88]	@ 0x58
 8002342:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <HAL_TIM_Base_MspInit+0x84>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]
}
 800234e:	e010      	b.n	8002372 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM7)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0c      	ldr	r2, [pc, #48]	@ (8002388 <HAL_TIM_Base_MspInit+0x88>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d10b      	bne.n	8002372 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800235a:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <HAL_TIM_Base_MspInit+0x84>)
 800235c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235e:	4a09      	ldr	r2, [pc, #36]	@ (8002384 <HAL_TIM_Base_MspInit+0x84>)
 8002360:	f043 0320 	orr.w	r3, r3, #32
 8002364:	6593      	str	r3, [r2, #88]	@ 0x58
 8002366:	4b07      	ldr	r3, [pc, #28]	@ (8002384 <HAL_TIM_Base_MspInit+0x84>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
}
 8002372:	bf00      	nop
 8002374:	371c      	adds	r7, #28
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40012c00 	.word	0x40012c00
 8002384:	40021000 	.word	0x40021000
 8002388:	40001400 	.word	0x40001400

0800238c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002390:	4b22      	ldr	r3, [pc, #136]	@ (800241c <MX_USART1_UART_Init+0x90>)
 8002392:	4a23      	ldr	r2, [pc, #140]	@ (8002420 <MX_USART1_UART_Init+0x94>)
 8002394:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002396:	4b21      	ldr	r3, [pc, #132]	@ (800241c <MX_USART1_UART_Init+0x90>)
 8002398:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800239c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800239e:	4b1f      	ldr	r3, [pc, #124]	@ (800241c <MX_USART1_UART_Init+0x90>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023a4:	4b1d      	ldr	r3, [pc, #116]	@ (800241c <MX_USART1_UART_Init+0x90>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023aa:	4b1c      	ldr	r3, [pc, #112]	@ (800241c <MX_USART1_UART_Init+0x90>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023b0:	4b1a      	ldr	r3, [pc, #104]	@ (800241c <MX_USART1_UART_Init+0x90>)
 80023b2:	220c      	movs	r2, #12
 80023b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b6:	4b19      	ldr	r3, [pc, #100]	@ (800241c <MX_USART1_UART_Init+0x90>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023bc:	4b17      	ldr	r3, [pc, #92]	@ (800241c <MX_USART1_UART_Init+0x90>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023c2:	4b16      	ldr	r3, [pc, #88]	@ (800241c <MX_USART1_UART_Init+0x90>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023c8:	4b14      	ldr	r3, [pc, #80]	@ (800241c <MX_USART1_UART_Init+0x90>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ce:	4b13      	ldr	r3, [pc, #76]	@ (800241c <MX_USART1_UART_Init+0x90>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023d4:	4811      	ldr	r0, [pc, #68]	@ (800241c <MX_USART1_UART_Init+0x90>)
 80023d6:	f004 ffa5 	bl	8007324 <HAL_UART_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80023e0:	f7ff fd44 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023e4:	2100      	movs	r1, #0
 80023e6:	480d      	ldr	r0, [pc, #52]	@ (800241c <MX_USART1_UART_Init+0x90>)
 80023e8:	f005 fdce 	bl	8007f88 <HAL_UARTEx_SetTxFifoThreshold>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80023f2:	f7ff fd3b 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023f6:	2100      	movs	r1, #0
 80023f8:	4808      	ldr	r0, [pc, #32]	@ (800241c <MX_USART1_UART_Init+0x90>)
 80023fa:	f005 fe03 	bl	8008004 <HAL_UARTEx_SetRxFifoThreshold>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002404:	f7ff fd32 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002408:	4804      	ldr	r0, [pc, #16]	@ (800241c <MX_USART1_UART_Init+0x90>)
 800240a:	f005 fd84 	bl	8007f16 <HAL_UARTEx_DisableFifoMode>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002414:	f7ff fd2a 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200003c4 	.word	0x200003c4
 8002420:	40013800 	.word	0x40013800

08002424 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002428:	4b22      	ldr	r3, [pc, #136]	@ (80024b4 <MX_USART2_UART_Init+0x90>)
 800242a:	4a23      	ldr	r2, [pc, #140]	@ (80024b8 <MX_USART2_UART_Init+0x94>)
 800242c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800242e:	4b21      	ldr	r3, [pc, #132]	@ (80024b4 <MX_USART2_UART_Init+0x90>)
 8002430:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002434:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002436:	4b1f      	ldr	r3, [pc, #124]	@ (80024b4 <MX_USART2_UART_Init+0x90>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800243c:	4b1d      	ldr	r3, [pc, #116]	@ (80024b4 <MX_USART2_UART_Init+0x90>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002442:	4b1c      	ldr	r3, [pc, #112]	@ (80024b4 <MX_USART2_UART_Init+0x90>)
 8002444:	2200      	movs	r2, #0
 8002446:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002448:	4b1a      	ldr	r3, [pc, #104]	@ (80024b4 <MX_USART2_UART_Init+0x90>)
 800244a:	220c      	movs	r2, #12
 800244c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800244e:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <MX_USART2_UART_Init+0x90>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002454:	4b17      	ldr	r3, [pc, #92]	@ (80024b4 <MX_USART2_UART_Init+0x90>)
 8002456:	2200      	movs	r2, #0
 8002458:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800245a:	4b16      	ldr	r3, [pc, #88]	@ (80024b4 <MX_USART2_UART_Init+0x90>)
 800245c:	2200      	movs	r2, #0
 800245e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002460:	4b14      	ldr	r3, [pc, #80]	@ (80024b4 <MX_USART2_UART_Init+0x90>)
 8002462:	2200      	movs	r2, #0
 8002464:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002466:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <MX_USART2_UART_Init+0x90>)
 8002468:	2200      	movs	r2, #0
 800246a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800246c:	4811      	ldr	r0, [pc, #68]	@ (80024b4 <MX_USART2_UART_Init+0x90>)
 800246e:	f004 ff59 	bl	8007324 <HAL_UART_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002478:	f7ff fcf8 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800247c:	2100      	movs	r1, #0
 800247e:	480d      	ldr	r0, [pc, #52]	@ (80024b4 <MX_USART2_UART_Init+0x90>)
 8002480:	f005 fd82 	bl	8007f88 <HAL_UARTEx_SetTxFifoThreshold>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800248a:	f7ff fcef 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800248e:	2100      	movs	r1, #0
 8002490:	4808      	ldr	r0, [pc, #32]	@ (80024b4 <MX_USART2_UART_Init+0x90>)
 8002492:	f005 fdb7 	bl	8008004 <HAL_UARTEx_SetRxFifoThreshold>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800249c:	f7ff fce6 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80024a0:	4804      	ldr	r0, [pc, #16]	@ (80024b4 <MX_USART2_UART_Init+0x90>)
 80024a2:	f005 fd38 	bl	8007f16 <HAL_UARTEx_DisableFifoMode>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80024ac:	f7ff fcde 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000458 	.word	0x20000458
 80024b8:	40004400 	.word	0x40004400

080024bc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024c0:	4b22      	ldr	r3, [pc, #136]	@ (800254c <MX_USART3_UART_Init+0x90>)
 80024c2:	4a23      	ldr	r2, [pc, #140]	@ (8002550 <MX_USART3_UART_Init+0x94>)
 80024c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80024c6:	4b21      	ldr	r3, [pc, #132]	@ (800254c <MX_USART3_UART_Init+0x90>)
 80024c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80024cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024ce:	4b1f      	ldr	r3, [pc, #124]	@ (800254c <MX_USART3_UART_Init+0x90>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024d4:	4b1d      	ldr	r3, [pc, #116]	@ (800254c <MX_USART3_UART_Init+0x90>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024da:	4b1c      	ldr	r3, [pc, #112]	@ (800254c <MX_USART3_UART_Init+0x90>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024e0:	4b1a      	ldr	r3, [pc, #104]	@ (800254c <MX_USART3_UART_Init+0x90>)
 80024e2:	220c      	movs	r2, #12
 80024e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e6:	4b19      	ldr	r3, [pc, #100]	@ (800254c <MX_USART3_UART_Init+0x90>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024ec:	4b17      	ldr	r3, [pc, #92]	@ (800254c <MX_USART3_UART_Init+0x90>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024f2:	4b16      	ldr	r3, [pc, #88]	@ (800254c <MX_USART3_UART_Init+0x90>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024f8:	4b14      	ldr	r3, [pc, #80]	@ (800254c <MX_USART3_UART_Init+0x90>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024fe:	4b13      	ldr	r3, [pc, #76]	@ (800254c <MX_USART3_UART_Init+0x90>)
 8002500:	2200      	movs	r2, #0
 8002502:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002504:	4811      	ldr	r0, [pc, #68]	@ (800254c <MX_USART3_UART_Init+0x90>)
 8002506:	f004 ff0d 	bl	8007324 <HAL_UART_Init>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002510:	f7ff fcac 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002514:	2100      	movs	r1, #0
 8002516:	480d      	ldr	r0, [pc, #52]	@ (800254c <MX_USART3_UART_Init+0x90>)
 8002518:	f005 fd36 	bl	8007f88 <HAL_UARTEx_SetTxFifoThreshold>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002522:	f7ff fca3 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002526:	2100      	movs	r1, #0
 8002528:	4808      	ldr	r0, [pc, #32]	@ (800254c <MX_USART3_UART_Init+0x90>)
 800252a:	f005 fd6b 	bl	8008004 <HAL_UARTEx_SetRxFifoThreshold>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002534:	f7ff fc9a 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002538:	4804      	ldr	r0, [pc, #16]	@ (800254c <MX_USART3_UART_Init+0x90>)
 800253a:	f005 fcec 	bl	8007f16 <HAL_UARTEx_DisableFifoMode>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002544:	f7ff fc92 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	200004ec 	.word	0x200004ec
 8002550:	40004800 	.word	0x40004800

08002554 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b0a2      	sub	sp, #136	@ 0x88
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800256c:	f107 0320 	add.w	r3, r7, #32
 8002570:	2254      	movs	r2, #84	@ 0x54
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f008 fb77 	bl	800ac68 <memset>
  if(uartHandle->Instance==USART1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a5e      	ldr	r2, [pc, #376]	@ (80026f8 <HAL_UART_MspInit+0x1a4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d138      	bne.n	80025f6 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002584:	2301      	movs	r3, #1
 8002586:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800258c:	f107 0320 	add.w	r3, r7, #32
 8002590:	4618      	mov	r0, r3
 8002592:	f002 ff4b 	bl	800542c <HAL_RCCEx_PeriphCLKConfig>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800259c:	f7ff fc66 	bl	8001e6c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025a0:	4b56      	ldr	r3, [pc, #344]	@ (80026fc <HAL_UART_MspInit+0x1a8>)
 80025a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a4:	4a55      	ldr	r2, [pc, #340]	@ (80026fc <HAL_UART_MspInit+0x1a8>)
 80025a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80025ac:	4b53      	ldr	r3, [pc, #332]	@ (80026fc <HAL_UART_MspInit+0x1a8>)
 80025ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b8:	4b50      	ldr	r3, [pc, #320]	@ (80026fc <HAL_UART_MspInit+0x1a8>)
 80025ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025bc:	4a4f      	ldr	r2, [pc, #316]	@ (80026fc <HAL_UART_MspInit+0x1a8>)
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025c4:	4b4d      	ldr	r3, [pc, #308]	@ (80026fc <HAL_UART_MspInit+0x1a8>)
 80025c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80025d0:	2330      	movs	r3, #48	@ 0x30
 80025d2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d4:	2302      	movs	r3, #2
 80025d6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025dc:	2300      	movs	r3, #0
 80025de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025e2:	2307      	movs	r3, #7
 80025e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80025ec:	4619      	mov	r1, r3
 80025ee:	4844      	ldr	r0, [pc, #272]	@ (8002700 <HAL_UART_MspInit+0x1ac>)
 80025f0:	f001 face 	bl	8003b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025f4:	e07c      	b.n	80026f0 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART2)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a42      	ldr	r2, [pc, #264]	@ (8002704 <HAL_UART_MspInit+0x1b0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d139      	bne.n	8002674 <HAL_UART_MspInit+0x120>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002600:	2302      	movs	r3, #2
 8002602:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002604:	2300      	movs	r3, #0
 8002606:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002608:	f107 0320 	add.w	r3, r7, #32
 800260c:	4618      	mov	r0, r3
 800260e:	f002 ff0d 	bl	800542c <HAL_RCCEx_PeriphCLKConfig>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8002618:	f7ff fc28 	bl	8001e6c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800261c:	4b37      	ldr	r3, [pc, #220]	@ (80026fc <HAL_UART_MspInit+0x1a8>)
 800261e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002620:	4a36      	ldr	r2, [pc, #216]	@ (80026fc <HAL_UART_MspInit+0x1a8>)
 8002622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002626:	6593      	str	r3, [r2, #88]	@ 0x58
 8002628:	4b34      	ldr	r3, [pc, #208]	@ (80026fc <HAL_UART_MspInit+0x1a8>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002634:	4b31      	ldr	r3, [pc, #196]	@ (80026fc <HAL_UART_MspInit+0x1a8>)
 8002636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002638:	4a30      	ldr	r2, [pc, #192]	@ (80026fc <HAL_UART_MspInit+0x1a8>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002640:	4b2e      	ldr	r3, [pc, #184]	@ (80026fc <HAL_UART_MspInit+0x1a8>)
 8002642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800264c:	230c      	movs	r3, #12
 800264e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	2300      	movs	r3, #0
 8002656:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800265e:	2307      	movs	r3, #7
 8002660:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002664:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002668:	4619      	mov	r1, r3
 800266a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800266e:	f001 fa8f 	bl	8003b90 <HAL_GPIO_Init>
}
 8002672:	e03d      	b.n	80026f0 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART3)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a23      	ldr	r2, [pc, #140]	@ (8002708 <HAL_UART_MspInit+0x1b4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d138      	bne.n	80026f0 <HAL_UART_MspInit+0x19c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800267e:	2304      	movs	r3, #4
 8002680:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002682:	2300      	movs	r3, #0
 8002684:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002686:	f107 0320 	add.w	r3, r7, #32
 800268a:	4618      	mov	r0, r3
 800268c:	f002 fece 	bl	800542c <HAL_RCCEx_PeriphCLKConfig>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_UART_MspInit+0x146>
      Error_Handler();
 8002696:	f7ff fbe9 	bl	8001e6c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800269a:	4b18      	ldr	r3, [pc, #96]	@ (80026fc <HAL_UART_MspInit+0x1a8>)
 800269c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269e:	4a17      	ldr	r2, [pc, #92]	@ (80026fc <HAL_UART_MspInit+0x1a8>)
 80026a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80026a6:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <HAL_UART_MspInit+0x1a8>)
 80026a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b2:	4b12      	ldr	r3, [pc, #72]	@ (80026fc <HAL_UART_MspInit+0x1a8>)
 80026b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b6:	4a11      	ldr	r2, [pc, #68]	@ (80026fc <HAL_UART_MspInit+0x1a8>)
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026be:	4b0f      	ldr	r3, [pc, #60]	@ (80026fc <HAL_UART_MspInit+0x1a8>)
 80026c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80026ce:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d8:	2300      	movs	r3, #0
 80026da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026de:	2307      	movs	r3, #7
 80026e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80026e8:	4619      	mov	r1, r3
 80026ea:	4808      	ldr	r0, [pc, #32]	@ (800270c <HAL_UART_MspInit+0x1b8>)
 80026ec:	f001 fa50 	bl	8003b90 <HAL_GPIO_Init>
}
 80026f0:	bf00      	nop
 80026f2:	3788      	adds	r7, #136	@ 0x88
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40013800 	.word	0x40013800
 80026fc:	40021000 	.word	0x40021000
 8002700:	48000800 	.word	0x48000800
 8002704:	40004400 	.word	0x40004400
 8002708:	40004800 	.word	0x40004800
 800270c:	48000400 	.word	0x48000400

08002710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002710:	480d      	ldr	r0, [pc, #52]	@ (8002748 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002712:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002714:	f7ff fd0a 	bl	800212c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002718:	480c      	ldr	r0, [pc, #48]	@ (800274c <LoopForever+0x6>)
  ldr r1, =_edata
 800271a:	490d      	ldr	r1, [pc, #52]	@ (8002750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800271c:	4a0d      	ldr	r2, [pc, #52]	@ (8002754 <LoopForever+0xe>)
  movs r3, #0
 800271e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002720:	e002      	b.n	8002728 <LoopCopyDataInit>

08002722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002726:	3304      	adds	r3, #4

08002728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800272a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800272c:	d3f9      	bcc.n	8002722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800272e:	4a0a      	ldr	r2, [pc, #40]	@ (8002758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002730:	4c0a      	ldr	r4, [pc, #40]	@ (800275c <LoopForever+0x16>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002734:	e001      	b.n	800273a <LoopFillZerobss>

08002736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002738:	3204      	adds	r2, #4

0800273a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800273a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800273c:	d3fb      	bcc.n	8002736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800273e:	f008 faf1 	bl	800ad24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002742:	f7ff fb03 	bl	8001d4c <main>

08002746 <LoopForever>:

LoopForever:
    b LoopForever
 8002746:	e7fe      	b.n	8002746 <LoopForever>
  ldr   r0, =_estack
 8002748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800274c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002750:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002754:	0800af78 	.word	0x0800af78
  ldr r2, =_sbss
 8002758:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800275c:	200020ac 	.word	0x200020ac

08002760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002760:	e7fe      	b.n	8002760 <ADC1_2_IRQHandler>

08002762 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800276c:	2003      	movs	r0, #3
 800276e:	f001 f9dc 	bl	8003b2a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002772:	200f      	movs	r0, #15
 8002774:	f7ff fc48 	bl	8002008 <HAL_InitTick>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	71fb      	strb	r3, [r7, #7]
 8002782:	e001      	b.n	8002788 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002784:	f7ff fc16 	bl	8001fb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002788:	79fb      	ldrb	r3, [r7, #7]

}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_IncTick+0x1c>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <HAL_IncTick+0x20>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4413      	add	r3, r2
 80027a2:	4a03      	ldr	r2, [pc, #12]	@ (80027b0 <HAL_IncTick+0x1c>)
 80027a4:	6013      	str	r3, [r2, #0]
}
 80027a6:	bf00      	nop
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	20000580 	.word	0x20000580
 80027b4:	2000000c 	.word	0x2000000c

080027b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return uwTick;
 80027bc:	4b03      	ldr	r3, [pc, #12]	@ (80027cc <HAL_GetTick+0x14>)
 80027be:	681b      	ldr	r3, [r3, #0]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000580 	.word	0x20000580

080027d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	609a      	str	r2, [r3, #8]
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	609a      	str	r2, [r3, #8]
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	3360      	adds	r3, #96	@ 0x60
 800284a:	461a      	mov	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b08      	ldr	r3, [pc, #32]	@ (800287c <LL_ADC_SetOffset+0x44>)
 800285a:	4013      	ands	r3, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	4313      	orrs	r3, r2
 8002868:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002870:	bf00      	nop
 8002872:	371c      	adds	r7, #28
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	03fff000 	.word	0x03fff000

08002880 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3360      	adds	r3, #96	@ 0x60
 800288e:	461a      	mov	r2, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	3360      	adds	r3, #96	@ 0x60
 80028bc:	461a      	mov	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b087      	sub	sp, #28
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	3360      	adds	r3, #96	@ 0x60
 80028f2:	461a      	mov	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	431a      	orrs	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800290c:	bf00      	nop
 800290e:	371c      	adds	r7, #28
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3360      	adds	r3, #96	@ 0x60
 8002928:	461a      	mov	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	431a      	orrs	r2, r3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002942:	bf00      	nop
 8002944:	371c      	adds	r7, #28
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	615a      	str	r2, [r3, #20]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3330      	adds	r3, #48	@ 0x30
 8002984:	461a      	mov	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	0a1b      	lsrs	r3, r3, #8
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	4413      	add	r3, r2
 8002992:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	211f      	movs	r1, #31
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	401a      	ands	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	0e9b      	lsrs	r3, r3, #26
 80029ac:	f003 011f 	and.w	r1, r3, #31
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ba:	431a      	orrs	r2, r3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029c0:	bf00      	nop
 80029c2:	371c      	adds	r7, #28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3314      	adds	r3, #20
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	0e5b      	lsrs	r3, r3, #25
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	4413      	add	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	0d1b      	lsrs	r3, r3, #20
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	2107      	movs	r1, #7
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	401a      	ands	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	0d1b      	lsrs	r3, r3, #20
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a10:	431a      	orrs	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	401a      	ands	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f003 0318 	and.w	r3, r3, #24
 8002a46:	4908      	ldr	r1, [pc, #32]	@ (8002a68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a48:	40d9      	lsrs	r1, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	400b      	ands	r3, r1
 8002a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a52:	431a      	orrs	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	0007ffff 	.word	0x0007ffff

08002a6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002a7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6093      	str	r3, [r2, #8]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002aa4:	d101      	bne.n	8002aaa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002ac8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002acc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002af4:	d101      	bne.n	8002afa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <LL_ADC_IsEnabled+0x18>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <LL_ADC_IsEnabled+0x1a>
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d101      	bne.n	8002b46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d101      	bne.n	8002b6c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b089      	sub	sp, #36	@ 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e1a9      	b.n	8002eea <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d109      	bne.n	8002bb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7fe f921 	bl	8000dec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff67 	bl	8002a90 <LL_ADC_IsDeepPowerDownEnabled>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d004      	beq.n	8002bd2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff ff4d 	bl	8002a6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ff82 	bl	8002ae0 <LL_ADC_IsInternalRegulatorEnabled>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d115      	bne.n	8002c0e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff ff66 	bl	8002ab8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bec:	4b9c      	ldr	r3, [pc, #624]	@ (8002e60 <HAL_ADC_Init+0x2e4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	099b      	lsrs	r3, r3, #6
 8002bf2:	4a9c      	ldr	r2, [pc, #624]	@ (8002e64 <HAL_ADC_Init+0x2e8>)
 8002bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf8:	099b      	lsrs	r3, r3, #6
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c00:	e002      	b.n	8002c08 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f9      	bne.n	8002c02 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff ff64 	bl	8002ae0 <LL_ADC_IsInternalRegulatorEnabled>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10d      	bne.n	8002c3a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c22:	f043 0210 	orr.w	r2, r3, #16
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c2e:	f043 0201 	orr.w	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff ff75 	bl	8002b2e <LL_ADC_REG_IsConversionOngoing>
 8002c44:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4a:	f003 0310 	and.w	r3, r3, #16
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f040 8142 	bne.w	8002ed8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 813e 	bne.w	8002ed8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c60:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c64:	f043 0202 	orr.w	r2, r3, #2
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff49 	bl	8002b08 <LL_ADC_IsEnabled>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d141      	bne.n	8002d00 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c84:	d004      	beq.n	8002c90 <HAL_ADC_Init+0x114>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a77      	ldr	r2, [pc, #476]	@ (8002e68 <HAL_ADC_Init+0x2ec>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d10f      	bne.n	8002cb0 <HAL_ADC_Init+0x134>
 8002c90:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c94:	f7ff ff38 	bl	8002b08 <LL_ADC_IsEnabled>
 8002c98:	4604      	mov	r4, r0
 8002c9a:	4873      	ldr	r0, [pc, #460]	@ (8002e68 <HAL_ADC_Init+0x2ec>)
 8002c9c:	f7ff ff34 	bl	8002b08 <LL_ADC_IsEnabled>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4323      	orrs	r3, r4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e012      	b.n	8002cd6 <HAL_ADC_Init+0x15a>
 8002cb0:	486e      	ldr	r0, [pc, #440]	@ (8002e6c <HAL_ADC_Init+0x2f0>)
 8002cb2:	f7ff ff29 	bl	8002b08 <LL_ADC_IsEnabled>
 8002cb6:	4604      	mov	r4, r0
 8002cb8:	486d      	ldr	r0, [pc, #436]	@ (8002e70 <HAL_ADC_Init+0x2f4>)
 8002cba:	f7ff ff25 	bl	8002b08 <LL_ADC_IsEnabled>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	431c      	orrs	r4, r3
 8002cc2:	486c      	ldr	r0, [pc, #432]	@ (8002e74 <HAL_ADC_Init+0x2f8>)
 8002cc4:	f7ff ff20 	bl	8002b08 <LL_ADC_IsEnabled>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4323      	orrs	r3, r4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bf0c      	ite	eq
 8002cd0:	2301      	moveq	r3, #1
 8002cd2:	2300      	movne	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d012      	beq.n	8002d00 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ce2:	d004      	beq.n	8002cee <HAL_ADC_Init+0x172>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a5f      	ldr	r2, [pc, #380]	@ (8002e68 <HAL_ADC_Init+0x2ec>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_Init+0x176>
 8002cee:	4a62      	ldr	r2, [pc, #392]	@ (8002e78 <HAL_ADC_Init+0x2fc>)
 8002cf0:	e000      	b.n	8002cf4 <HAL_ADC_Init+0x178>
 8002cf2:	4a62      	ldr	r2, [pc, #392]	@ (8002e7c <HAL_ADC_Init+0x300>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f7ff fd68 	bl	80027d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	7f5b      	ldrb	r3, [r3, #29]
 8002d04:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d0a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002d10:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002d16:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d1e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d106      	bne.n	8002d3c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d32:	3b01      	subs	r3, #1
 8002d34:	045b      	lsls	r3, r3, #17
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d009      	beq.n	8002d58 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d48:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d50:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	4b48      	ldr	r3, [pc, #288]	@ (8002e80 <HAL_ADC_Init+0x304>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	69b9      	ldr	r1, [r7, #24]
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fee4 	bl	8002b54 <LL_ADC_INJ_IsConversionOngoing>
 8002d8c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d17f      	bne.n	8002e94 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d17c      	bne.n	8002e94 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d9e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002da6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002db6:	f023 0302 	bic.w	r3, r3, #2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	69b9      	ldr	r1, [r7, #24]
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d017      	beq.n	8002dfc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002dda:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002de4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002de8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6911      	ldr	r1, [r2, #16]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	430b      	orrs	r3, r1
 8002df6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002dfa:	e013      	b.n	8002e24 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002e0a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e20:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d12a      	bne.n	8002e84 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002e38:	f023 0304 	bic.w	r3, r3, #4
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e44:	4311      	orrs	r1, r2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002e4a:	4311      	orrs	r1, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e50:	430a      	orrs	r2, r1
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0201 	orr.w	r2, r2, #1
 8002e5c:	611a      	str	r2, [r3, #16]
 8002e5e:	e019      	b.n	8002e94 <HAL_ADC_Init+0x318>
 8002e60:	20000004 	.word	0x20000004
 8002e64:	053e2d63 	.word	0x053e2d63
 8002e68:	50000100 	.word	0x50000100
 8002e6c:	50000400 	.word	0x50000400
 8002e70:	50000500 	.word	0x50000500
 8002e74:	50000600 	.word	0x50000600
 8002e78:	50000300 	.word	0x50000300
 8002e7c:	50000700 	.word	0x50000700
 8002e80:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0201 	bic.w	r2, r2, #1
 8002e92:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d10c      	bne.n	8002eb6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	f023 010f 	bic.w	r1, r3, #15
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	1e5a      	subs	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002eb4:	e007      	b.n	8002ec6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 020f 	bic.w	r2, r2, #15
 8002ec4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eca:	f023 0303 	bic.w	r3, r3, #3
 8002ece:	f043 0201 	orr.w	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ed6:	e007      	b.n	8002ee8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002edc:	f043 0210 	orr.w	r2, r3, #16
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ee8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	@ 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd90      	pop	{r4, r7, pc}
 8002ef2:	bf00      	nop

08002ef4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b0b6      	sub	sp, #216	@ 0xd8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d102      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x24>
 8002f12:	2302      	movs	r3, #2
 8002f14:	f000 bc13 	b.w	800373e <HAL_ADC_ConfigChannel+0x84a>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fe02 	bl	8002b2e <LL_ADC_REG_IsConversionOngoing>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f040 83f3 	bne.w	8003718 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6859      	ldr	r1, [r3, #4]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f7ff fd18 	bl	8002974 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fdf0 	bl	8002b2e <LL_ADC_REG_IsConversionOngoing>
 8002f4e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fdfc 	bl	8002b54 <LL_ADC_INJ_IsConversionOngoing>
 8002f5c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f60:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f040 81d9 	bne.w	800331c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 81d4 	bne.w	800331c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f7c:	d10f      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2200      	movs	r2, #0
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f7ff fd1f 	bl	80029cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fcd9 	bl	800294e <LL_ADC_SetSamplingTimeCommonConfig>
 8002f9c:	e00e      	b.n	8002fbc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f7ff fd0e 	bl	80029cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fcc9 	bl	800294e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	08db      	lsrs	r3, r3, #3
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d022      	beq.n	8003024 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6919      	ldr	r1, [r3, #16]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002fee:	f7ff fc23 	bl	8002838 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	6919      	ldr	r1, [r3, #16]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	461a      	mov	r2, r3
 8003000:	f7ff fc6f 	bl	80028e2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003010:	2b01      	cmp	r3, #1
 8003012:	d102      	bne.n	800301a <HAL_ADC_ConfigChannel+0x126>
 8003014:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003018:	e000      	b.n	800301c <HAL_ADC_ConfigChannel+0x128>
 800301a:	2300      	movs	r3, #0
 800301c:	461a      	mov	r2, r3
 800301e:	f7ff fc7b 	bl	8002918 <LL_ADC_SetOffsetSaturation>
 8003022:	e17b      	b.n	800331c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fc28 	bl	8002880 <LL_ADC_GetOffsetChannel>
 8003030:	4603      	mov	r3, r0
 8003032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x15c>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fc1d 	bl	8002880 <LL_ADC_GetOffsetChannel>
 8003046:	4603      	mov	r3, r0
 8003048:	0e9b      	lsrs	r3, r3, #26
 800304a:	f003 021f 	and.w	r2, r3, #31
 800304e:	e01e      	b.n	800308e <HAL_ADC_ConfigChannel+0x19a>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2100      	movs	r1, #0
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fc12 	bl	8002880 <LL_ADC_GetOffsetChannel>
 800305c:	4603      	mov	r3, r0
 800305e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800306e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003072:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003076:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800307e:	2320      	movs	r3, #32
 8003080:	e004      	b.n	800308c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003082:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003086:	fab3 f383 	clz	r3, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003096:	2b00      	cmp	r3, #0
 8003098:	d105      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x1b2>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	0e9b      	lsrs	r3, r3, #26
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	e018      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x1e4>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80030ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80030c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80030ca:	2320      	movs	r3, #32
 80030cc:	e004      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80030ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030d8:	429a      	cmp	r2, r3
 80030da:	d106      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2200      	movs	r2, #0
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fbe1 	bl	80028ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2101      	movs	r1, #1
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fbc5 	bl	8002880 <LL_ADC_GetOffsetChannel>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x222>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2101      	movs	r1, #1
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fbba 	bl	8002880 <LL_ADC_GetOffsetChannel>
 800310c:	4603      	mov	r3, r0
 800310e:	0e9b      	lsrs	r3, r3, #26
 8003110:	f003 021f 	and.w	r2, r3, #31
 8003114:	e01e      	b.n	8003154 <HAL_ADC_ConfigChannel+0x260>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2101      	movs	r1, #1
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fbaf 	bl	8002880 <LL_ADC_GetOffsetChannel>
 8003122:	4603      	mov	r3, r0
 8003124:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800312c:	fa93 f3a3 	rbit	r3, r3
 8003130:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003134:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003138:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800313c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003144:	2320      	movs	r3, #32
 8003146:	e004      	b.n	8003152 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <HAL_ADC_ConfigChannel+0x278>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	0e9b      	lsrs	r3, r3, #26
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	e018      	b.n	800319e <HAL_ADC_ConfigChannel+0x2aa>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003180:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003184:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003188:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003190:	2320      	movs	r3, #32
 8003192:	e004      	b.n	800319e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003194:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003198:	fab3 f383 	clz	r3, r3
 800319c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800319e:	429a      	cmp	r2, r3
 80031a0:	d106      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2200      	movs	r2, #0
 80031a8:	2101      	movs	r1, #1
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fb7e 	bl	80028ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2102      	movs	r1, #2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fb62 	bl	8002880 <LL_ADC_GetOffsetChannel>
 80031bc:	4603      	mov	r3, r0
 80031be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10a      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x2e8>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2102      	movs	r1, #2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fb57 	bl	8002880 <LL_ADC_GetOffsetChannel>
 80031d2:	4603      	mov	r3, r0
 80031d4:	0e9b      	lsrs	r3, r3, #26
 80031d6:	f003 021f 	and.w	r2, r3, #31
 80031da:	e01e      	b.n	800321a <HAL_ADC_ConfigChannel+0x326>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2102      	movs	r1, #2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff fb4c 	bl	8002880 <LL_ADC_GetOffsetChannel>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031f2:	fa93 f3a3 	rbit	r3, r3
 80031f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80031fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003202:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800320a:	2320      	movs	r3, #32
 800320c:	e004      	b.n	8003218 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800320e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003212:	fab3 f383 	clz	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003222:	2b00      	cmp	r3, #0
 8003224:	d105      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x33e>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	0e9b      	lsrs	r3, r3, #26
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	e016      	b.n	8003260 <HAL_ADC_ConfigChannel+0x36c>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003244:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003246:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800324a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003252:	2320      	movs	r3, #32
 8003254:	e004      	b.n	8003260 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003256:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003260:	429a      	cmp	r2, r3
 8003262:	d106      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2200      	movs	r2, #0
 800326a:	2102      	movs	r1, #2
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fb1d 	bl	80028ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2103      	movs	r1, #3
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fb01 	bl	8002880 <LL_ADC_GetOffsetChannel>
 800327e:	4603      	mov	r3, r0
 8003280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10a      	bne.n	800329e <HAL_ADC_ConfigChannel+0x3aa>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2103      	movs	r1, #3
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff faf6 	bl	8002880 <LL_ADC_GetOffsetChannel>
 8003294:	4603      	mov	r3, r0
 8003296:	0e9b      	lsrs	r3, r3, #26
 8003298:	f003 021f 	and.w	r2, r3, #31
 800329c:	e017      	b.n	80032ce <HAL_ADC_ConfigChannel+0x3da>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2103      	movs	r1, #3
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff faeb 	bl	8002880 <LL_ADC_GetOffsetChannel>
 80032aa:	4603      	mov	r3, r0
 80032ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032b0:	fa93 f3a3 	rbit	r3, r3
 80032b4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80032b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032b8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80032ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80032c0:	2320      	movs	r3, #32
 80032c2:	e003      	b.n	80032cc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80032c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d105      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x3f2>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	0e9b      	lsrs	r3, r3, #26
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	e011      	b.n	800330a <HAL_ADC_ConfigChannel+0x416>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80032f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80032f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80032fe:	2320      	movs	r3, #32
 8003300:	e003      	b.n	800330a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003302:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003304:	fab3 f383 	clz	r3, r3
 8003308:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800330a:	429a      	cmp	r2, r3
 800330c:	d106      	bne.n	800331c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2200      	movs	r2, #0
 8003314:	2103      	movs	r1, #3
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fac8 	bl	80028ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fbf1 	bl	8002b08 <LL_ADC_IsEnabled>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	f040 813d 	bne.w	80035a8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	6819      	ldr	r1, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	461a      	mov	r2, r3
 800333c:	f7ff fb72 	bl	8002a24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4aa2      	ldr	r2, [pc, #648]	@ (80035d0 <HAL_ADC_ConfigChannel+0x6dc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	f040 812e 	bne.w	80035a8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x480>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	0e9b      	lsrs	r3, r3, #26
 8003362:	3301      	adds	r3, #1
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	2b09      	cmp	r3, #9
 800336a:	bf94      	ite	ls
 800336c:	2301      	movls	r3, #1
 800336e:	2300      	movhi	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e019      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x4b4>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003382:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003384:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003386:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800338c:	2320      	movs	r3, #32
 800338e:	e003      	b.n	8003398 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003390:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	3301      	adds	r3, #1
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	2b09      	cmp	r3, #9
 80033a0:	bf94      	ite	ls
 80033a2:	2301      	movls	r3, #1
 80033a4:	2300      	movhi	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d079      	beq.n	80034a0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d107      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x4d4>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	0e9b      	lsrs	r3, r3, #26
 80033be:	3301      	adds	r3, #1
 80033c0:	069b      	lsls	r3, r3, #26
 80033c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033c6:	e015      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x500>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033d0:	fa93 f3a3 	rbit	r3, r3
 80033d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80033d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033d8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80033da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80033e0:	2320      	movs	r3, #32
 80033e2:	e003      	b.n	80033ec <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80033e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e6:	fab3 f383 	clz	r3, r3
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	3301      	adds	r3, #1
 80033ee:	069b      	lsls	r3, r3, #26
 80033f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d109      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x520>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	0e9b      	lsrs	r3, r3, #26
 8003406:	3301      	adds	r3, #1
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	2101      	movs	r1, #1
 800340e:	fa01 f303 	lsl.w	r3, r1, r3
 8003412:	e017      	b.n	8003444 <HAL_ADC_ConfigChannel+0x550>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800341c:	fa93 f3a3 	rbit	r3, r3
 8003420:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003424:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800342c:	2320      	movs	r3, #32
 800342e:	e003      	b.n	8003438 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003430:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003432:	fab3 f383 	clz	r3, r3
 8003436:	b2db      	uxtb	r3, r3
 8003438:	3301      	adds	r3, #1
 800343a:	f003 031f 	and.w	r3, r3, #31
 800343e:	2101      	movs	r1, #1
 8003440:	fa01 f303 	lsl.w	r3, r1, r3
 8003444:	ea42 0103 	orr.w	r1, r2, r3
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10a      	bne.n	800346a <HAL_ADC_ConfigChannel+0x576>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	0e9b      	lsrs	r3, r3, #26
 800345a:	3301      	adds	r3, #1
 800345c:	f003 021f 	and.w	r2, r3, #31
 8003460:	4613      	mov	r3, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	051b      	lsls	r3, r3, #20
 8003468:	e018      	b.n	800349c <HAL_ADC_ConfigChannel+0x5a8>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800347a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800347c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003482:	2320      	movs	r3, #32
 8003484:	e003      	b.n	800348e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003488:	fab3 f383 	clz	r3, r3
 800348c:	b2db      	uxtb	r3, r3
 800348e:	3301      	adds	r3, #1
 8003490:	f003 021f 	and.w	r2, r3, #31
 8003494:	4613      	mov	r3, r2
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4413      	add	r3, r2
 800349a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800349c:	430b      	orrs	r3, r1
 800349e:	e07e      	b.n	800359e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d107      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x5c8>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	0e9b      	lsrs	r3, r3, #26
 80034b2:	3301      	adds	r3, #1
 80034b4:	069b      	lsls	r3, r3, #26
 80034b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034ba:	e015      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x5f4>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c4:	fa93 f3a3 	rbit	r3, r3
 80034c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80034ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034cc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80034ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80034d4:	2320      	movs	r3, #32
 80034d6:	e003      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80034d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	3301      	adds	r3, #1
 80034e2:	069b      	lsls	r3, r3, #26
 80034e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d109      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x614>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	0e9b      	lsrs	r3, r3, #26
 80034fa:	3301      	adds	r3, #1
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	2101      	movs	r1, #1
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	e017      	b.n	8003538 <HAL_ADC_ConfigChannel+0x644>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	61fb      	str	r3, [r7, #28]
  return result;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003520:	2320      	movs	r3, #32
 8003522:	e003      	b.n	800352c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	3301      	adds	r3, #1
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	2101      	movs	r1, #1
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	ea42 0103 	orr.w	r1, r2, r3
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10d      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x670>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	0e9b      	lsrs	r3, r3, #26
 800354e:	3301      	adds	r3, #1
 8003550:	f003 021f 	and.w	r2, r3, #31
 8003554:	4613      	mov	r3, r2
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4413      	add	r3, r2
 800355a:	3b1e      	subs	r3, #30
 800355c:	051b      	lsls	r3, r3, #20
 800355e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003562:	e01b      	b.n	800359c <HAL_ADC_ConfigChannel+0x6a8>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	fa93 f3a3 	rbit	r3, r3
 8003570:	613b      	str	r3, [r7, #16]
  return result;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800357c:	2320      	movs	r3, #32
 800357e:	e003      	b.n	8003588 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	3301      	adds	r3, #1
 800358a:	f003 021f 	and.w	r2, r3, #31
 800358e:	4613      	mov	r3, r2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4413      	add	r3, r2
 8003594:	3b1e      	subs	r3, #30
 8003596:	051b      	lsls	r3, r3, #20
 8003598:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800359c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035a2:	4619      	mov	r1, r3
 80035a4:	f7ff fa12 	bl	80029cc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b09      	ldr	r3, [pc, #36]	@ (80035d4 <HAL_ADC_ConfigChannel+0x6e0>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80be 	beq.w	8003732 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035be:	d004      	beq.n	80035ca <HAL_ADC_ConfigChannel+0x6d6>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a04      	ldr	r2, [pc, #16]	@ (80035d8 <HAL_ADC_ConfigChannel+0x6e4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d10a      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x6ec>
 80035ca:	4b04      	ldr	r3, [pc, #16]	@ (80035dc <HAL_ADC_ConfigChannel+0x6e8>)
 80035cc:	e009      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x6ee>
 80035ce:	bf00      	nop
 80035d0:	407f0000 	.word	0x407f0000
 80035d4:	80080000 	.word	0x80080000
 80035d8:	50000100 	.word	0x50000100
 80035dc:	50000300 	.word	0x50000300
 80035e0:	4b59      	ldr	r3, [pc, #356]	@ (8003748 <HAL_ADC_ConfigChannel+0x854>)
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff f91a 	bl	800281c <LL_ADC_GetCommonPathInternalCh>
 80035e8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a56      	ldr	r2, [pc, #344]	@ (800374c <HAL_ADC_ConfigChannel+0x858>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d004      	beq.n	8003600 <HAL_ADC_ConfigChannel+0x70c>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a55      	ldr	r2, [pc, #340]	@ (8003750 <HAL_ADC_ConfigChannel+0x85c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d13a      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003600:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003604:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d134      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003614:	d005      	beq.n	8003622 <HAL_ADC_ConfigChannel+0x72e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a4e      	ldr	r2, [pc, #312]	@ (8003754 <HAL_ADC_ConfigChannel+0x860>)
 800361c:	4293      	cmp	r3, r2
 800361e:	f040 8085 	bne.w	800372c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800362a:	d004      	beq.n	8003636 <HAL_ADC_ConfigChannel+0x742>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a49      	ldr	r2, [pc, #292]	@ (8003758 <HAL_ADC_ConfigChannel+0x864>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_ADC_ConfigChannel+0x746>
 8003636:	4a49      	ldr	r2, [pc, #292]	@ (800375c <HAL_ADC_ConfigChannel+0x868>)
 8003638:	e000      	b.n	800363c <HAL_ADC_ConfigChannel+0x748>
 800363a:	4a43      	ldr	r2, [pc, #268]	@ (8003748 <HAL_ADC_ConfigChannel+0x854>)
 800363c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003640:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003644:	4619      	mov	r1, r3
 8003646:	4610      	mov	r0, r2
 8003648:	f7ff f8d5 	bl	80027f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800364c:	4b44      	ldr	r3, [pc, #272]	@ (8003760 <HAL_ADC_ConfigChannel+0x86c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	099b      	lsrs	r3, r3, #6
 8003652:	4a44      	ldr	r2, [pc, #272]	@ (8003764 <HAL_ADC_ConfigChannel+0x870>)
 8003654:	fba2 2303 	umull	r2, r3, r2, r3
 8003658:	099b      	lsrs	r3, r3, #6
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003666:	e002      	b.n	800366e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3b01      	subs	r3, #1
 800366c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f9      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003674:	e05a      	b.n	800372c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a3b      	ldr	r2, [pc, #236]	@ (8003768 <HAL_ADC_ConfigChannel+0x874>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d125      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003680:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003684:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d11f      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a31      	ldr	r2, [pc, #196]	@ (8003758 <HAL_ADC_ConfigChannel+0x864>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d104      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x7ac>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a34      	ldr	r2, [pc, #208]	@ (800376c <HAL_ADC_ConfigChannel+0x878>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d047      	beq.n	8003730 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036a8:	d004      	beq.n	80036b4 <HAL_ADC_ConfigChannel+0x7c0>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003758 <HAL_ADC_ConfigChannel+0x864>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x7c4>
 80036b4:	4a29      	ldr	r2, [pc, #164]	@ (800375c <HAL_ADC_ConfigChannel+0x868>)
 80036b6:	e000      	b.n	80036ba <HAL_ADC_ConfigChannel+0x7c6>
 80036b8:	4a23      	ldr	r2, [pc, #140]	@ (8003748 <HAL_ADC_ConfigChannel+0x854>)
 80036ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036c2:	4619      	mov	r1, r3
 80036c4:	4610      	mov	r0, r2
 80036c6:	f7ff f896 	bl	80027f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036ca:	e031      	b.n	8003730 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a27      	ldr	r2, [pc, #156]	@ (8003770 <HAL_ADC_ConfigChannel+0x87c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d12d      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d127      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003758 <HAL_ADC_ConfigChannel+0x864>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d022      	beq.n	8003732 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036f4:	d004      	beq.n	8003700 <HAL_ADC_ConfigChannel+0x80c>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a17      	ldr	r2, [pc, #92]	@ (8003758 <HAL_ADC_ConfigChannel+0x864>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d101      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x810>
 8003700:	4a16      	ldr	r2, [pc, #88]	@ (800375c <HAL_ADC_ConfigChannel+0x868>)
 8003702:	e000      	b.n	8003706 <HAL_ADC_ConfigChannel+0x812>
 8003704:	4a10      	ldr	r2, [pc, #64]	@ (8003748 <HAL_ADC_ConfigChannel+0x854>)
 8003706:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800370a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800370e:	4619      	mov	r1, r3
 8003710:	4610      	mov	r0, r2
 8003712:	f7ff f870 	bl	80027f6 <LL_ADC_SetCommonPathInternalCh>
 8003716:	e00c      	b.n	8003732 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800372a:	e002      	b.n	8003732 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800372c:	bf00      	nop
 800372e:	e000      	b.n	8003732 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003730:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800373a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800373e:	4618      	mov	r0, r3
 8003740:	37d8      	adds	r7, #216	@ 0xd8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	50000700 	.word	0x50000700
 800374c:	c3210000 	.word	0xc3210000
 8003750:	90c00010 	.word	0x90c00010
 8003754:	50000600 	.word	0x50000600
 8003758:	50000100 	.word	0x50000100
 800375c:	50000300 	.word	0x50000300
 8003760:	20000004 	.word	0x20000004
 8003764:	053e2d63 	.word	0x053e2d63
 8003768:	c7520000 	.word	0xc7520000
 800376c:	50000500 	.word	0x50000500
 8003770:	cb840000 	.word	0xcb840000

08003774 <LL_ADC_IsEnabled>:
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <LL_ADC_IsEnabled+0x18>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <LL_ADC_IsEnabled+0x1a>
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <LL_ADC_REG_IsConversionOngoing>:
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d101      	bne.n	80037b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80037c0:	b590      	push	{r4, r7, lr}
 80037c2:	b0a1      	sub	sp, #132	@ 0x84
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80037da:	2302      	movs	r3, #2
 80037dc:	e0e7      	b.n	80039ae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80037e6:	2300      	movs	r3, #0
 80037e8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80037ea:	2300      	movs	r3, #0
 80037ec:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037f6:	d102      	bne.n	80037fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80037f8:	4b6f      	ldr	r3, [pc, #444]	@ (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	e009      	b.n	8003812 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a6e      	ldr	r2, [pc, #440]	@ (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d102      	bne.n	800380e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003808:	4b6d      	ldr	r3, [pc, #436]	@ (80039c0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	e001      	b.n	8003812 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10b      	bne.n	8003830 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381c:	f043 0220 	orr.w	r2, r3, #32
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0be      	b.n	80039ae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff ffb1 	bl	800379a <LL_ADC_REG_IsConversionOngoing>
 8003838:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff ffab 	bl	800379a <LL_ADC_REG_IsConversionOngoing>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	f040 80a0 	bne.w	800398c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800384c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800384e:	2b00      	cmp	r3, #0
 8003850:	f040 809c 	bne.w	800398c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800385c:	d004      	beq.n	8003868 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a55      	ldr	r2, [pc, #340]	@ (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d101      	bne.n	800386c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003868:	4b56      	ldr	r3, [pc, #344]	@ (80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800386a:	e000      	b.n	800386e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800386c:	4b56      	ldr	r3, [pc, #344]	@ (80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800386e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d04b      	beq.n	8003910 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003878:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800388a:	035b      	lsls	r3, r3, #13
 800388c:	430b      	orrs	r3, r1
 800388e:	431a      	orrs	r2, r3
 8003890:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003892:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800389c:	d004      	beq.n	80038a8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a45      	ldr	r2, [pc, #276]	@ (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d10f      	bne.n	80038c8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80038a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80038ac:	f7ff ff62 	bl	8003774 <LL_ADC_IsEnabled>
 80038b0:	4604      	mov	r4, r0
 80038b2:	4841      	ldr	r0, [pc, #260]	@ (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038b4:	f7ff ff5e 	bl	8003774 <LL_ADC_IsEnabled>
 80038b8:	4603      	mov	r3, r0
 80038ba:	4323      	orrs	r3, r4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf0c      	ite	eq
 80038c0:	2301      	moveq	r3, #1
 80038c2:	2300      	movne	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	e012      	b.n	80038ee <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80038c8:	483c      	ldr	r0, [pc, #240]	@ (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80038ca:	f7ff ff53 	bl	8003774 <LL_ADC_IsEnabled>
 80038ce:	4604      	mov	r4, r0
 80038d0:	483b      	ldr	r0, [pc, #236]	@ (80039c0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80038d2:	f7ff ff4f 	bl	8003774 <LL_ADC_IsEnabled>
 80038d6:	4603      	mov	r3, r0
 80038d8:	431c      	orrs	r4, r3
 80038da:	483c      	ldr	r0, [pc, #240]	@ (80039cc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80038dc:	f7ff ff4a 	bl	8003774 <LL_ADC_IsEnabled>
 80038e0:	4603      	mov	r3, r0
 80038e2:	4323      	orrs	r3, r4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf0c      	ite	eq
 80038e8:	2301      	moveq	r3, #1
 80038ea:	2300      	movne	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d056      	beq.n	80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80038fa:	f023 030f 	bic.w	r3, r3, #15
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	6811      	ldr	r1, [r2, #0]
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	6892      	ldr	r2, [r2, #8]
 8003906:	430a      	orrs	r2, r1
 8003908:	431a      	orrs	r2, r3
 800390a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800390c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800390e:	e047      	b.n	80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003910:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003918:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800391a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003924:	d004      	beq.n	8003930 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a23      	ldr	r2, [pc, #140]	@ (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d10f      	bne.n	8003950 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003930:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003934:	f7ff ff1e 	bl	8003774 <LL_ADC_IsEnabled>
 8003938:	4604      	mov	r4, r0
 800393a:	481f      	ldr	r0, [pc, #124]	@ (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800393c:	f7ff ff1a 	bl	8003774 <LL_ADC_IsEnabled>
 8003940:	4603      	mov	r3, r0
 8003942:	4323      	orrs	r3, r4
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e012      	b.n	8003976 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003950:	481a      	ldr	r0, [pc, #104]	@ (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003952:	f7ff ff0f 	bl	8003774 <LL_ADC_IsEnabled>
 8003956:	4604      	mov	r4, r0
 8003958:	4819      	ldr	r0, [pc, #100]	@ (80039c0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800395a:	f7ff ff0b 	bl	8003774 <LL_ADC_IsEnabled>
 800395e:	4603      	mov	r3, r0
 8003960:	431c      	orrs	r4, r3
 8003962:	481a      	ldr	r0, [pc, #104]	@ (80039cc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003964:	f7ff ff06 	bl	8003774 <LL_ADC_IsEnabled>
 8003968:	4603      	mov	r3, r0
 800396a:	4323      	orrs	r3, r4
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf0c      	ite	eq
 8003970:	2301      	moveq	r3, #1
 8003972:	2300      	movne	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d012      	beq.n	80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800397a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003982:	f023 030f 	bic.w	r3, r3, #15
 8003986:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003988:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800398a:	e009      	b.n	80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003990:	f043 0220 	orr.w	r2, r3, #32
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800399e:	e000      	b.n	80039a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80039aa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3784      	adds	r7, #132	@ 0x84
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd90      	pop	{r4, r7, pc}
 80039b6:	bf00      	nop
 80039b8:	50000100 	.word	0x50000100
 80039bc:	50000400 	.word	0x50000400
 80039c0:	50000500 	.word	0x50000500
 80039c4:	50000300 	.word	0x50000300
 80039c8:	50000700 	.word	0x50000700
 80039cc:	50000600 	.word	0x50000600

080039d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a02:	4a04      	ldr	r2, [pc, #16]	@ (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	60d3      	str	r3, [r2, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a1c:	4b04      	ldr	r3, [pc, #16]	@ (8003a30 <__NVIC_GetPriorityGrouping+0x18>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	f003 0307 	and.w	r3, r3, #7
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	db0b      	blt.n	8003a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	f003 021f 	and.w	r2, r3, #31
 8003a4c:	4907      	ldr	r1, [pc, #28]	@ (8003a6c <__NVIC_EnableIRQ+0x38>)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	2001      	movs	r0, #1
 8003a56:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	e000e100 	.word	0xe000e100

08003a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	db0a      	blt.n	8003a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	490c      	ldr	r1, [pc, #48]	@ (8003abc <__NVIC_SetPriority+0x4c>)
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	0112      	lsls	r2, r2, #4
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	440b      	add	r3, r1
 8003a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a98:	e00a      	b.n	8003ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	4908      	ldr	r1, [pc, #32]	@ (8003ac0 <__NVIC_SetPriority+0x50>)
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	3b04      	subs	r3, #4
 8003aa8:	0112      	lsls	r2, r2, #4
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	440b      	add	r3, r1
 8003aae:	761a      	strb	r2, [r3, #24]
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	e000e100 	.word	0xe000e100
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	@ 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f1c3 0307 	rsb	r3, r3, #7
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	bf28      	it	cs
 8003ae2:	2304      	movcs	r3, #4
 8003ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d902      	bls.n	8003af4 <NVIC_EncodePriority+0x30>
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3b03      	subs	r3, #3
 8003af2:	e000      	b.n	8003af6 <NVIC_EncodePriority+0x32>
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af8:	f04f 32ff 	mov.w	r2, #4294967295
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43da      	mvns	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	401a      	ands	r2, r3
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	fa01 f303 	lsl.w	r3, r1, r3
 8003b16:	43d9      	mvns	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b1c:	4313      	orrs	r3, r2
         );
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3724      	adds	r7, #36	@ 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff ff4c 	bl	80039d0 <__NVIC_SetPriorityGrouping>
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b4e:	f7ff ff63 	bl	8003a18 <__NVIC_GetPriorityGrouping>
 8003b52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	6978      	ldr	r0, [r7, #20]
 8003b5a:	f7ff ffb3 	bl	8003ac4 <NVIC_EncodePriority>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff ff82 	bl	8003a70 <__NVIC_SetPriority>
}
 8003b6c:	bf00      	nop
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff ff56 	bl	8003a34 <__NVIC_EnableIRQ>
}
 8003b88:	bf00      	nop
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b9e:	e15a      	b.n	8003e56 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bac:	4013      	ands	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 814c 	beq.w	8003e50 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d005      	beq.n	8003bd0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d130      	bne.n	8003c32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	2203      	movs	r2, #3
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4013      	ands	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c06:	2201      	movs	r2, #1
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4013      	ands	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	f003 0201 	and.w	r2, r3, #1
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d017      	beq.n	8003c6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	2203      	movs	r2, #3
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4013      	ands	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d123      	bne.n	8003cc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	08da      	lsrs	r2, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3208      	adds	r2, #8
 8003c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	220f      	movs	r2, #15
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43db      	mvns	r3, r3
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	08da      	lsrs	r2, r3, #3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3208      	adds	r2, #8
 8003cbc:	6939      	ldr	r1, [r7, #16]
 8003cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	2203      	movs	r2, #3
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 0203 	and.w	r2, r3, #3
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 80a6 	beq.w	8003e50 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d04:	4b5b      	ldr	r3, [pc, #364]	@ (8003e74 <HAL_GPIO_Init+0x2e4>)
 8003d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d08:	4a5a      	ldr	r2, [pc, #360]	@ (8003e74 <HAL_GPIO_Init+0x2e4>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d10:	4b58      	ldr	r3, [pc, #352]	@ (8003e74 <HAL_GPIO_Init+0x2e4>)
 8003d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d1c:	4a56      	ldr	r2, [pc, #344]	@ (8003e78 <HAL_GPIO_Init+0x2e8>)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	089b      	lsrs	r3, r3, #2
 8003d22:	3302      	adds	r3, #2
 8003d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	220f      	movs	r2, #15
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d46:	d01f      	beq.n	8003d88 <HAL_GPIO_Init+0x1f8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a4c      	ldr	r2, [pc, #304]	@ (8003e7c <HAL_GPIO_Init+0x2ec>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d019      	beq.n	8003d84 <HAL_GPIO_Init+0x1f4>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a4b      	ldr	r2, [pc, #300]	@ (8003e80 <HAL_GPIO_Init+0x2f0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d013      	beq.n	8003d80 <HAL_GPIO_Init+0x1f0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e84 <HAL_GPIO_Init+0x2f4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00d      	beq.n	8003d7c <HAL_GPIO_Init+0x1ec>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a49      	ldr	r2, [pc, #292]	@ (8003e88 <HAL_GPIO_Init+0x2f8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d007      	beq.n	8003d78 <HAL_GPIO_Init+0x1e8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a48      	ldr	r2, [pc, #288]	@ (8003e8c <HAL_GPIO_Init+0x2fc>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d101      	bne.n	8003d74 <HAL_GPIO_Init+0x1e4>
 8003d70:	2305      	movs	r3, #5
 8003d72:	e00a      	b.n	8003d8a <HAL_GPIO_Init+0x1fa>
 8003d74:	2306      	movs	r3, #6
 8003d76:	e008      	b.n	8003d8a <HAL_GPIO_Init+0x1fa>
 8003d78:	2304      	movs	r3, #4
 8003d7a:	e006      	b.n	8003d8a <HAL_GPIO_Init+0x1fa>
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e004      	b.n	8003d8a <HAL_GPIO_Init+0x1fa>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e002      	b.n	8003d8a <HAL_GPIO_Init+0x1fa>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <HAL_GPIO_Init+0x1fa>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	f002 0203 	and.w	r2, r2, #3
 8003d90:	0092      	lsls	r2, r2, #2
 8003d92:	4093      	lsls	r3, r2
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d9a:	4937      	ldr	r1, [pc, #220]	@ (8003e78 <HAL_GPIO_Init+0x2e8>)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	3302      	adds	r3, #2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003da8:	4b39      	ldr	r3, [pc, #228]	@ (8003e90 <HAL_GPIO_Init+0x300>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4013      	ands	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dcc:	4a30      	ldr	r2, [pc, #192]	@ (8003e90 <HAL_GPIO_Init+0x300>)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8003e90 <HAL_GPIO_Init+0x300>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4013      	ands	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003df6:	4a26      	ldr	r2, [pc, #152]	@ (8003e90 <HAL_GPIO_Init+0x300>)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003dfc:	4b24      	ldr	r3, [pc, #144]	@ (8003e90 <HAL_GPIO_Init+0x300>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e20:	4a1b      	ldr	r2, [pc, #108]	@ (8003e90 <HAL_GPIO_Init+0x300>)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e26:	4b1a      	ldr	r3, [pc, #104]	@ (8003e90 <HAL_GPIO_Init+0x300>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4013      	ands	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e4a:	4a11      	ldr	r2, [pc, #68]	@ (8003e90 <HAL_GPIO_Init+0x300>)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	3301      	adds	r3, #1
 8003e54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f47f ae9d 	bne.w	8003ba0 <HAL_GPIO_Init+0x10>
  }
}
 8003e66:	bf00      	nop
 8003e68:	bf00      	nop
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	48000400 	.word	0x48000400
 8003e80:	48000800 	.word	0x48000800
 8003e84:	48000c00 	.word	0x48000c00
 8003e88:	48001000 	.word	0x48001000
 8003e8c:	48001400 	.word	0x48001400
 8003e90:	40010400 	.word	0x40010400

08003e94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	887b      	ldrh	r3, [r7, #2]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
 8003eb0:	e001      	b.n	8003eb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	807b      	strh	r3, [r7, #2]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ed4:	787b      	ldrb	r3, [r7, #1]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eda:	887a      	ldrh	r2, [r7, #2]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ee0:	e002      	b.n	8003ee8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ee2:	887a      	ldrh	r2, [r7, #2]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e08d      	b.n	8004022 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fd fea0 	bl	8001c60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	@ 0x24
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0201 	bic.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d107      	bne.n	8003f6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f6a:	609a      	str	r2, [r3, #8]
 8003f6c:	e006      	b.n	8003f7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d108      	bne.n	8003f96 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f92:	605a      	str	r2, [r3, #4]
 8003f94:	e007      	b.n	8003fa6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fa4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6812      	ldr	r2, [r2, #0]
 8003fb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69d9      	ldr	r1, [r3, #28]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1a      	ldr	r2, [r3, #32]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af02      	add	r7, sp, #8
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	607a      	str	r2, [r7, #4]
 8004036:	461a      	mov	r2, r3
 8004038:	460b      	mov	r3, r1
 800403a:	817b      	strh	r3, [r7, #10]
 800403c:	4613      	mov	r3, r2
 800403e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b20      	cmp	r3, #32
 800404a:	f040 80db 	bne.w	8004204 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_I2C_Master_Receive+0x30>
 8004058:	2302      	movs	r3, #2
 800405a:	e0d4      	b.n	8004206 <HAL_I2C_Master_Receive+0x1da>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004064:	f7fe fba8 	bl	80027b8 <HAL_GetTick>
 8004068:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	2319      	movs	r3, #25
 8004070:	2201      	movs	r2, #1
 8004072:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f8f2 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e0bf      	b.n	8004206 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2222      	movs	r2, #34	@ 0x22
 800408a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2210      	movs	r2, #16
 8004092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	893a      	ldrh	r2, [r7, #8]
 80040a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2bff      	cmp	r3, #255	@ 0xff
 80040b6:	d90e      	bls.n	80040d6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	22ff      	movs	r2, #255	@ 0xff
 80040bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	8979      	ldrh	r1, [r7, #10]
 80040c6:	4b52      	ldr	r3, [pc, #328]	@ (8004210 <HAL_I2C_Master_Receive+0x1e4>)
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 face 	bl	8004670 <I2C_TransferConfig>
 80040d4:	e06d      	b.n	80041b2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	8979      	ldrh	r1, [r7, #10]
 80040e8:	4b49      	ldr	r3, [pc, #292]	@ (8004210 <HAL_I2C_Master_Receive+0x1e4>)
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 fabd 	bl	8004670 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80040f6:	e05c      	b.n	80041b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	6a39      	ldr	r1, [r7, #32]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f94b 	bl	8004398 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e07c      	b.n	8004206 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d034      	beq.n	80041b2 <HAL_I2C_Master_Receive+0x186>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414c:	2b00      	cmp	r3, #0
 800414e:	d130      	bne.n	80041b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	2200      	movs	r2, #0
 8004158:	2180      	movs	r1, #128	@ 0x80
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 f880 	bl	8004260 <I2C_WaitOnFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e04d      	b.n	8004206 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416e:	b29b      	uxth	r3, r3
 8004170:	2bff      	cmp	r3, #255	@ 0xff
 8004172:	d90e      	bls.n	8004192 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	22ff      	movs	r2, #255	@ 0xff
 8004178:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800417e:	b2da      	uxtb	r2, r3
 8004180:	8979      	ldrh	r1, [r7, #10]
 8004182:	2300      	movs	r3, #0
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fa70 	bl	8004670 <I2C_TransferConfig>
 8004190:	e00f      	b.n	80041b2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	8979      	ldrh	r1, [r7, #10]
 80041a4:	2300      	movs	r3, #0
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 fa5f 	bl	8004670 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d19d      	bne.n	80040f8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	6a39      	ldr	r1, [r7, #32]
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 f8a6 	bl	8004312 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e01a      	b.n	8004206 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2220      	movs	r2, #32
 80041d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6859      	ldr	r1, [r3, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004214 <HAL_I2C_Master_Receive+0x1e8>)
 80041e4:	400b      	ands	r3, r1
 80041e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	e000      	b.n	8004206 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004204:	2302      	movs	r3, #2
  }
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	80002400 	.word	0x80002400
 8004214:	fe00e800 	.word	0xfe00e800

08004218 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b02      	cmp	r3, #2
 800422c:	d103      	bne.n	8004236 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2200      	movs	r2, #0
 8004234:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b01      	cmp	r3, #1
 8004242:	d007      	beq.n	8004254 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699a      	ldr	r2, [r3, #24]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	619a      	str	r2, [r3, #24]
  }
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	4613      	mov	r3, r2
 800426e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004270:	e03b      	b.n	80042ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	6839      	ldr	r1, [r7, #0]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f91a 	bl	80044b0 <I2C_IsErrorOccurred>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e041      	b.n	800430a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d02d      	beq.n	80042ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428e:	f7fe fa93 	bl	80027b8 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d302      	bcc.n	80042a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d122      	bne.n	80042ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	4013      	ands	r3, r2
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	bf0c      	ite	eq
 80042b4:	2301      	moveq	r3, #1
 80042b6:	2300      	movne	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	461a      	mov	r2, r3
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d113      	bne.n	80042ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c6:	f043 0220 	orr.w	r2, r3, #32
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e00f      	b.n	800430a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699a      	ldr	r2, [r3, #24]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4013      	ands	r3, r2
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	bf0c      	ite	eq
 80042fa:	2301      	moveq	r3, #1
 80042fc:	2300      	movne	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	429a      	cmp	r2, r3
 8004306:	d0b4      	beq.n	8004272 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b084      	sub	sp, #16
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800431e:	e02f      	b.n	8004380 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f8c3 	bl	80044b0 <I2C_IsErrorOccurred>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e02d      	b.n	8004390 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004334:	f7fe fa40 	bl	80027b8 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	429a      	cmp	r2, r3
 8004342:	d302      	bcc.n	800434a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d11a      	bne.n	8004380 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b20      	cmp	r3, #32
 8004356:	d013      	beq.n	8004380 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435c:	f043 0220 	orr.w	r2, r3, #32
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e007      	b.n	8004390 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	f003 0320 	and.w	r3, r3, #32
 800438a:	2b20      	cmp	r3, #32
 800438c:	d1c8      	bne.n	8004320 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80043a8:	e071      	b.n	800448e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f87e 	bl	80044b0 <I2C_IsErrorOccurred>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d13b      	bne.n	8004444 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80043cc:	7dfb      	ldrb	r3, [r7, #23]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d138      	bne.n	8004444 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d105      	bne.n	80043ec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d121      	bne.n	800443e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2210      	movs	r2, #16
 8004400:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2204      	movs	r2, #4
 8004406:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2220      	movs	r2, #32
 800440e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6859      	ldr	r1, [r3, #4]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b24      	ldr	r3, [pc, #144]	@ (80044ac <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800441c:	400b      	ands	r3, r1
 800441e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	75fb      	strb	r3, [r7, #23]
 800443c:	e002      	b.n	8004444 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004444:	f7fe f9b8 	bl	80027b8 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	429a      	cmp	r2, r3
 8004452:	d302      	bcc.n	800445a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d119      	bne.n	800448e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800445a:	7dfb      	ldrb	r3, [r7, #23]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d116      	bne.n	800448e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b04      	cmp	r3, #4
 800446c:	d00f      	beq.n	800448e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004472:	f043 0220 	orr.w	r2, r3, #32
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b04      	cmp	r3, #4
 800449a:	d002      	beq.n	80044a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800449c:	7dfb      	ldrb	r3, [r7, #23]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d083      	beq.n	80043aa <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	fe00e800 	.word	0xfe00e800

080044b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08a      	sub	sp, #40	@ 0x28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	f003 0310 	and.w	r3, r3, #16
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d068      	beq.n	80045ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2210      	movs	r2, #16
 80044e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044e4:	e049      	b.n	800457a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ec:	d045      	beq.n	800457a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044ee:	f7fe f963 	bl	80027b8 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d302      	bcc.n	8004504 <I2C_IsErrorOccurred+0x54>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d13a      	bne.n	800457a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800450e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004516:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004522:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004526:	d121      	bne.n	800456c <I2C_IsErrorOccurred+0xbc>
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800452e:	d01d      	beq.n	800456c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004530:	7cfb      	ldrb	r3, [r7, #19]
 8004532:	2b20      	cmp	r3, #32
 8004534:	d01a      	beq.n	800456c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004544:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004546:	f7fe f937 	bl	80027b8 <HAL_GetTick>
 800454a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800454c:	e00e      	b.n	800456c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800454e:	f7fe f933 	bl	80027b8 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b19      	cmp	r3, #25
 800455a:	d907      	bls.n	800456c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	f043 0320 	orr.w	r3, r3, #32
 8004562:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800456a:	e006      	b.n	800457a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b20      	cmp	r3, #32
 8004578:	d1e9      	bne.n	800454e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b20      	cmp	r3, #32
 8004586:	d003      	beq.n	8004590 <I2C_IsErrorOccurred+0xe0>
 8004588:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0aa      	beq.n	80044e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004590:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004594:	2b00      	cmp	r3, #0
 8004596:	d103      	bne.n	80045a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2220      	movs	r2, #32
 800459e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	f043 0304 	orr.w	r3, r3, #4
 80045a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00b      	beq.n	80045d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	f043 0308 	orr.w	r3, r3, #8
 80045e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00b      	beq.n	800461c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	f043 0302 	orr.w	r3, r3, #2
 800460a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004614:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800461c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004620:	2b00      	cmp	r3, #0
 8004622:	d01c      	beq.n	800465e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f7ff fdf7 	bl	8004218 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6859      	ldr	r1, [r3, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	4b0d      	ldr	r3, [pc, #52]	@ (800466c <I2C_IsErrorOccurred+0x1bc>)
 8004636:	400b      	ands	r3, r1
 8004638:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	431a      	orrs	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800465e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004662:	4618      	mov	r0, r3
 8004664:	3728      	adds	r7, #40	@ 0x28
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	fe00e800 	.word	0xfe00e800

08004670 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	607b      	str	r3, [r7, #4]
 800467a:	460b      	mov	r3, r1
 800467c:	817b      	strh	r3, [r7, #10]
 800467e:	4613      	mov	r3, r2
 8004680:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004682:	897b      	ldrh	r3, [r7, #10]
 8004684:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004688:	7a7b      	ldrb	r3, [r7, #9]
 800468a:	041b      	lsls	r3, r3, #16
 800468c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004690:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	4313      	orrs	r3, r2
 800469a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800469e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	0d5b      	lsrs	r3, r3, #21
 80046aa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80046ae:	4b08      	ldr	r3, [pc, #32]	@ (80046d0 <I2C_TransferConfig+0x60>)
 80046b0:	430b      	orrs	r3, r1
 80046b2:	43db      	mvns	r3, r3
 80046b4:	ea02 0103 	and.w	r1, r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046c2:	bf00      	nop
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	03ff63ff 	.word	0x03ff63ff

080046d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b20      	cmp	r3, #32
 80046e8:	d138      	bne.n	800475c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e032      	b.n	800475e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2224      	movs	r2, #36	@ 0x24
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0201 	bic.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004726:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6819      	ldr	r1, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0201 	orr.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	e000      	b.n	800475e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800475c:	2302      	movs	r3, #2
  }
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800476a:	b480      	push	{r7}
 800476c:	b085      	sub	sp, #20
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b20      	cmp	r3, #32
 800477e:	d139      	bne.n	80047f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800478a:	2302      	movs	r3, #2
 800478c:	e033      	b.n	80047f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2224      	movs	r2, #36	@ 0x24
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80047bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	e000      	b.n	80047f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047f4:	2302      	movs	r3, #2
  }
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
	...

08004804 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d141      	bne.n	8004896 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004812:	4b4b      	ldr	r3, [pc, #300]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800481a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800481e:	d131      	bne.n	8004884 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004820:	4b47      	ldr	r3, [pc, #284]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004826:	4a46      	ldr	r2, [pc, #280]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004828:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800482c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004830:	4b43      	ldr	r3, [pc, #268]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004838:	4a41      	ldr	r2, [pc, #260]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800483a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800483e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004840:	4b40      	ldr	r3, [pc, #256]	@ (8004944 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2232      	movs	r2, #50	@ 0x32
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	4a3f      	ldr	r2, [pc, #252]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	0c9b      	lsrs	r3, r3, #18
 8004852:	3301      	adds	r3, #1
 8004854:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004856:	e002      	b.n	800485e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3b01      	subs	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800485e:	4b38      	ldr	r3, [pc, #224]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800486a:	d102      	bne.n	8004872 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f2      	bne.n	8004858 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004872:	4b33      	ldr	r3, [pc, #204]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800487a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800487e:	d158      	bne.n	8004932 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e057      	b.n	8004934 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004884:	4b2e      	ldr	r3, [pc, #184]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800488a:	4a2d      	ldr	r2, [pc, #180]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004890:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004894:	e04d      	b.n	8004932 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800489c:	d141      	bne.n	8004922 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800489e:	4b28      	ldr	r3, [pc, #160]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048aa:	d131      	bne.n	8004910 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048ac:	4b24      	ldr	r3, [pc, #144]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048b2:	4a23      	ldr	r2, [pc, #140]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048bc:	4b20      	ldr	r3, [pc, #128]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004944 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2232      	movs	r2, #50	@ 0x32
 80048d2:	fb02 f303 	mul.w	r3, r2, r3
 80048d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	0c9b      	lsrs	r3, r3, #18
 80048de:	3301      	adds	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048e2:	e002      	b.n	80048ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ea:	4b15      	ldr	r3, [pc, #84]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f6:	d102      	bne.n	80048fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f2      	bne.n	80048e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048fe:	4b10      	ldr	r3, [pc, #64]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800490a:	d112      	bne.n	8004932 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e011      	b.n	8004934 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004910:	4b0b      	ldr	r3, [pc, #44]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004912:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004916:	4a0a      	ldr	r2, [pc, #40]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800491c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004920:	e007      	b.n	8004932 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004922:	4b07      	ldr	r3, [pc, #28]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800492a:	4a05      	ldr	r2, [pc, #20]	@ (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800492c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004930:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	40007000 	.word	0x40007000
 8004944:	20000004 	.word	0x20000004
 8004948:	431bde83 	.word	0x431bde83

0800494c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004950:	4b05      	ldr	r3, [pc, #20]	@ (8004968 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	4a04      	ldr	r2, [pc, #16]	@ (8004968 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004956:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800495a:	6093      	str	r3, [r2, #8]
}
 800495c:	bf00      	nop
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40007000 	.word	0x40007000

0800496c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e2fe      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d075      	beq.n	8004a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800498a:	4b97      	ldr	r3, [pc, #604]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 030c 	and.w	r3, r3, #12
 8004992:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004994:	4b94      	ldr	r3, [pc, #592]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0303 	and.w	r3, r3, #3
 800499c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2b0c      	cmp	r3, #12
 80049a2:	d102      	bne.n	80049aa <HAL_RCC_OscConfig+0x3e>
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d002      	beq.n	80049b0 <HAL_RCC_OscConfig+0x44>
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d10b      	bne.n	80049c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b0:	4b8d      	ldr	r3, [pc, #564]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d05b      	beq.n	8004a74 <HAL_RCC_OscConfig+0x108>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d157      	bne.n	8004a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e2d9      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d0:	d106      	bne.n	80049e0 <HAL_RCC_OscConfig+0x74>
 80049d2:	4b85      	ldr	r3, [pc, #532]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a84      	ldr	r2, [pc, #528]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 80049d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	e01d      	b.n	8004a1c <HAL_RCC_OscConfig+0xb0>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049e8:	d10c      	bne.n	8004a04 <HAL_RCC_OscConfig+0x98>
 80049ea:	4b7f      	ldr	r3, [pc, #508]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a7e      	ldr	r2, [pc, #504]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 80049f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	4b7c      	ldr	r3, [pc, #496]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a7b      	ldr	r2, [pc, #492]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 80049fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	e00b      	b.n	8004a1c <HAL_RCC_OscConfig+0xb0>
 8004a04:	4b78      	ldr	r3, [pc, #480]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a77      	ldr	r2, [pc, #476]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	4b75      	ldr	r3, [pc, #468]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a74      	ldr	r2, [pc, #464]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d013      	beq.n	8004a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a24:	f7fd fec8 	bl	80027b8 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a2c:	f7fd fec4 	bl	80027b8 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b64      	cmp	r3, #100	@ 0x64
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e29e      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0xc0>
 8004a4a:	e014      	b.n	8004a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4c:	f7fd feb4 	bl	80027b8 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a54:	f7fd feb0 	bl	80027b8 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b64      	cmp	r3, #100	@ 0x64
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e28a      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a66:	4b60      	ldr	r3, [pc, #384]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0xe8>
 8004a72:	e000      	b.n	8004a76 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d075      	beq.n	8004b6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a82:	4b59      	ldr	r3, [pc, #356]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 030c 	and.w	r3, r3, #12
 8004a8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a8c:	4b56      	ldr	r3, [pc, #344]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	2b0c      	cmp	r3, #12
 8004a9a:	d102      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x136>
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d002      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x13c>
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d11f      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aa8:	4b4f      	ldr	r3, [pc, #316]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x154>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e25d      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac0:	4b49      	ldr	r3, [pc, #292]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	061b      	lsls	r3, r3, #24
 8004ace:	4946      	ldr	r1, [pc, #280]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ad4:	4b45      	ldr	r3, [pc, #276]	@ (8004bec <HAL_RCC_OscConfig+0x280>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7fd fa95 	bl	8002008 <HAL_InitTick>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d043      	beq.n	8004b6c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e249      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d023      	beq.n	8004b38 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af0:	4b3d      	ldr	r3, [pc, #244]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a3c      	ldr	r2, [pc, #240]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afc:	f7fd fe5c 	bl	80027b8 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b04:	f7fd fe58 	bl	80027b8 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e232      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b16:	4b34      	ldr	r3, [pc, #208]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0f0      	beq.n	8004b04 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b22:	4b31      	ldr	r3, [pc, #196]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	061b      	lsls	r3, r3, #24
 8004b30:	492d      	ldr	r1, [pc, #180]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	604b      	str	r3, [r1, #4]
 8004b36:	e01a      	b.n	8004b6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b38:	4b2b      	ldr	r3, [pc, #172]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a2a      	ldr	r2, [pc, #168]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004b3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fd fe38 	bl	80027b8 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b4c:	f7fd fe34 	bl	80027b8 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e20e      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b5e:	4b22      	ldr	r3, [pc, #136]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f0      	bne.n	8004b4c <HAL_RCC_OscConfig+0x1e0>
 8004b6a:	e000      	b.n	8004b6e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d041      	beq.n	8004bfe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01c      	beq.n	8004bbc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b82:	4b19      	ldr	r3, [pc, #100]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b88:	4a17      	ldr	r2, [pc, #92]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b92:	f7fd fe11 	bl	80027b8 <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9a:	f7fd fe0d 	bl	80027b8 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e1e7      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bac:	4b0e      	ldr	r3, [pc, #56]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0ef      	beq.n	8004b9a <HAL_RCC_OscConfig+0x22e>
 8004bba:	e020      	b.n	8004bfe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bc2:	4a09      	ldr	r2, [pc, #36]	@ (8004be8 <HAL_RCC_OscConfig+0x27c>)
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bcc:	f7fd fdf4 	bl	80027b8 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bd2:	e00d      	b.n	8004bf0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd4:	f7fd fdf0 	bl	80027b8 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d906      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e1ca      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
 8004be6:	bf00      	nop
 8004be8:	40021000 	.word	0x40021000
 8004bec:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bf0:	4b8c      	ldr	r3, [pc, #560]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1ea      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0304 	and.w	r3, r3, #4
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 80a6 	beq.w	8004d58 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c10:	4b84      	ldr	r3, [pc, #528]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_RCC_OscConfig+0x2b4>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <HAL_RCC_OscConfig+0x2b6>
 8004c20:	2300      	movs	r3, #0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00d      	beq.n	8004c42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c26:	4b7f      	ldr	r3, [pc, #508]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c30:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c32:	4b7c      	ldr	r3, [pc, #496]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c42:	4b79      	ldr	r3, [pc, #484]	@ (8004e28 <HAL_RCC_OscConfig+0x4bc>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d118      	bne.n	8004c80 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c4e:	4b76      	ldr	r3, [pc, #472]	@ (8004e28 <HAL_RCC_OscConfig+0x4bc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a75      	ldr	r2, [pc, #468]	@ (8004e28 <HAL_RCC_OscConfig+0x4bc>)
 8004c54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c5a:	f7fd fdad 	bl	80027b8 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c62:	f7fd fda9 	bl	80027b8 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e183      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c74:	4b6c      	ldr	r3, [pc, #432]	@ (8004e28 <HAL_RCC_OscConfig+0x4bc>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d108      	bne.n	8004c9a <HAL_RCC_OscConfig+0x32e>
 8004c88:	4b66      	ldr	r3, [pc, #408]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8e:	4a65      	ldr	r2, [pc, #404]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c98:	e024      	b.n	8004ce4 <HAL_RCC_OscConfig+0x378>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2b05      	cmp	r3, #5
 8004ca0:	d110      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x358>
 8004ca2:	4b60      	ldr	r3, [pc, #384]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca8:	4a5e      	ldr	r2, [pc, #376]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004caa:	f043 0304 	orr.w	r3, r3, #4
 8004cae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cb2:	4b5c      	ldr	r3, [pc, #368]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb8:	4a5a      	ldr	r2, [pc, #360]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004cba:	f043 0301 	orr.w	r3, r3, #1
 8004cbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cc2:	e00f      	b.n	8004ce4 <HAL_RCC_OscConfig+0x378>
 8004cc4:	4b57      	ldr	r3, [pc, #348]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cca:	4a56      	ldr	r2, [pc, #344]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004ccc:	f023 0301 	bic.w	r3, r3, #1
 8004cd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cd4:	4b53      	ldr	r3, [pc, #332]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cda:	4a52      	ldr	r2, [pc, #328]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004cdc:	f023 0304 	bic.w	r3, r3, #4
 8004ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d016      	beq.n	8004d1a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cec:	f7fd fd64 	bl	80027b8 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cf2:	e00a      	b.n	8004d0a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf4:	f7fd fd60 	bl	80027b8 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e138      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d0a:	4b46      	ldr	r3, [pc, #280]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0ed      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x388>
 8004d18:	e015      	b.n	8004d46 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1a:	f7fd fd4d 	bl	80027b8 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d20:	e00a      	b.n	8004d38 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d22:	f7fd fd49 	bl	80027b8 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e121      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d38:	4b3a      	ldr	r3, [pc, #232]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1ed      	bne.n	8004d22 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d46:	7ffb      	ldrb	r3, [r7, #31]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d105      	bne.n	8004d58 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d4c:	4b35      	ldr	r3, [pc, #212]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d50:	4a34      	ldr	r2, [pc, #208]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004d52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d56:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d03c      	beq.n	8004dde <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d01c      	beq.n	8004da6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d72:	4a2c      	ldr	r2, [pc, #176]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004d74:	f043 0301 	orr.w	r3, r3, #1
 8004d78:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fd fd1c 	bl	80027b8 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d84:	f7fd fd18 	bl	80027b8 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e0f2      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d96:	4b23      	ldr	r3, [pc, #140]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004d98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0ef      	beq.n	8004d84 <HAL_RCC_OscConfig+0x418>
 8004da4:	e01b      	b.n	8004dde <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004da6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004da8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dac:	4a1d      	ldr	r2, [pc, #116]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db6:	f7fd fcff 	bl	80027b8 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dbe:	f7fd fcfb 	bl	80027b8 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e0d5      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dd0:	4b14      	ldr	r3, [pc, #80]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004dd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1ef      	bne.n	8004dbe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 80c9 	beq.w	8004f7a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004de8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 030c 	and.w	r3, r3, #12
 8004df0:	2b0c      	cmp	r3, #12
 8004df2:	f000 8083 	beq.w	8004efc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d15e      	bne.n	8004ebc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dfe:	4b09      	ldr	r3, [pc, #36]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a08      	ldr	r2, [pc, #32]	@ (8004e24 <HAL_RCC_OscConfig+0x4b8>)
 8004e04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0a:	f7fd fcd5 	bl	80027b8 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e10:	e00c      	b.n	8004e2c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e12:	f7fd fcd1 	bl	80027b8 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d905      	bls.n	8004e2c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e0ab      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
 8004e24:	40021000 	.word	0x40021000
 8004e28:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e2c:	4b55      	ldr	r3, [pc, #340]	@ (8004f84 <HAL_RCC_OscConfig+0x618>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1ec      	bne.n	8004e12 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e38:	4b52      	ldr	r3, [pc, #328]	@ (8004f84 <HAL_RCC_OscConfig+0x618>)
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	4b52      	ldr	r3, [pc, #328]	@ (8004f88 <HAL_RCC_OscConfig+0x61c>)
 8004e3e:	4013      	ands	r3, r2
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6a11      	ldr	r1, [r2, #32]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e48:	3a01      	subs	r2, #1
 8004e4a:	0112      	lsls	r2, r2, #4
 8004e4c:	4311      	orrs	r1, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004e52:	0212      	lsls	r2, r2, #8
 8004e54:	4311      	orrs	r1, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e5a:	0852      	lsrs	r2, r2, #1
 8004e5c:	3a01      	subs	r2, #1
 8004e5e:	0552      	lsls	r2, r2, #21
 8004e60:	4311      	orrs	r1, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e66:	0852      	lsrs	r2, r2, #1
 8004e68:	3a01      	subs	r2, #1
 8004e6a:	0652      	lsls	r2, r2, #25
 8004e6c:	4311      	orrs	r1, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e72:	06d2      	lsls	r2, r2, #27
 8004e74:	430a      	orrs	r2, r1
 8004e76:	4943      	ldr	r1, [pc, #268]	@ (8004f84 <HAL_RCC_OscConfig+0x618>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e7c:	4b41      	ldr	r3, [pc, #260]	@ (8004f84 <HAL_RCC_OscConfig+0x618>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a40      	ldr	r2, [pc, #256]	@ (8004f84 <HAL_RCC_OscConfig+0x618>)
 8004e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e86:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e88:	4b3e      	ldr	r3, [pc, #248]	@ (8004f84 <HAL_RCC_OscConfig+0x618>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	4a3d      	ldr	r2, [pc, #244]	@ (8004f84 <HAL_RCC_OscConfig+0x618>)
 8004e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e94:	f7fd fc90 	bl	80027b8 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e9c:	f7fd fc8c 	bl	80027b8 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e066      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eae:	4b35      	ldr	r3, [pc, #212]	@ (8004f84 <HAL_RCC_OscConfig+0x618>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0f0      	beq.n	8004e9c <HAL_RCC_OscConfig+0x530>
 8004eba:	e05e      	b.n	8004f7a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ebc:	4b31      	ldr	r3, [pc, #196]	@ (8004f84 <HAL_RCC_OscConfig+0x618>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a30      	ldr	r2, [pc, #192]	@ (8004f84 <HAL_RCC_OscConfig+0x618>)
 8004ec2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec8:	f7fd fc76 	bl	80027b8 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed0:	f7fd fc72 	bl	80027b8 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e04c      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ee2:	4b28      	ldr	r3, [pc, #160]	@ (8004f84 <HAL_RCC_OscConfig+0x618>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004eee:	4b25      	ldr	r3, [pc, #148]	@ (8004f84 <HAL_RCC_OscConfig+0x618>)
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	4924      	ldr	r1, [pc, #144]	@ (8004f84 <HAL_RCC_OscConfig+0x618>)
 8004ef4:	4b25      	ldr	r3, [pc, #148]	@ (8004f8c <HAL_RCC_OscConfig+0x620>)
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	60cb      	str	r3, [r1, #12]
 8004efa:	e03e      	b.n	8004f7a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e039      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f08:	4b1e      	ldr	r3, [pc, #120]	@ (8004f84 <HAL_RCC_OscConfig+0x618>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f003 0203 	and.w	r2, r3, #3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d12c      	bne.n	8004f76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f26:	3b01      	subs	r3, #1
 8004f28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d123      	bne.n	8004f76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f38:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d11b      	bne.n	8004f76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f48:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d113      	bne.n	8004f76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f58:	085b      	lsrs	r3, r3, #1
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d109      	bne.n	8004f76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6c:	085b      	lsrs	r3, r3, #1
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d001      	beq.n	8004f7a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3720      	adds	r7, #32
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40021000 	.word	0x40021000
 8004f88:	019f800c 	.word	0x019f800c
 8004f8c:	feeefffc 	.word	0xfeeefffc

08004f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e11e      	b.n	80051e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fa8:	4b91      	ldr	r3, [pc, #580]	@ (80051f0 <HAL_RCC_ClockConfig+0x260>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 030f 	and.w	r3, r3, #15
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d910      	bls.n	8004fd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fb6:	4b8e      	ldr	r3, [pc, #568]	@ (80051f0 <HAL_RCC_ClockConfig+0x260>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f023 020f 	bic.w	r2, r3, #15
 8004fbe:	498c      	ldr	r1, [pc, #560]	@ (80051f0 <HAL_RCC_ClockConfig+0x260>)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc6:	4b8a      	ldr	r3, [pc, #552]	@ (80051f0 <HAL_RCC_ClockConfig+0x260>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e106      	b.n	80051e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d073      	beq.n	80050cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d129      	bne.n	8005040 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fec:	4b81      	ldr	r3, [pc, #516]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e0f4      	b.n	80051e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ffc:	f000 f9d0 	bl	80053a0 <RCC_GetSysClockFreqFromPLLSource>
 8005000:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	4a7c      	ldr	r2, [pc, #496]	@ (80051f8 <HAL_RCC_ClockConfig+0x268>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d93f      	bls.n	800508a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800500a:	4b7a      	ldr	r3, [pc, #488]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d009      	beq.n	800502a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800501e:	2b00      	cmp	r3, #0
 8005020:	d033      	beq.n	800508a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005026:	2b00      	cmp	r3, #0
 8005028:	d12f      	bne.n	800508a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800502a:	4b72      	ldr	r3, [pc, #456]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005032:	4a70      	ldr	r2, [pc, #448]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 8005034:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005038:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800503a:	2380      	movs	r3, #128	@ 0x80
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	e024      	b.n	800508a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d107      	bne.n	8005058 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005048:	4b6a      	ldr	r3, [pc, #424]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d109      	bne.n	8005068 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0c6      	b.n	80051e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005058:	4b66      	ldr	r3, [pc, #408]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e0be      	b.n	80051e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005068:	f000 f8ce 	bl	8005208 <HAL_RCC_GetSysClockFreq>
 800506c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4a61      	ldr	r2, [pc, #388]	@ (80051f8 <HAL_RCC_ClockConfig+0x268>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d909      	bls.n	800508a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005076:	4b5f      	ldr	r3, [pc, #380]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800507e:	4a5d      	ldr	r2, [pc, #372]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 8005080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005084:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005086:	2380      	movs	r3, #128	@ 0x80
 8005088:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800508a:	4b5a      	ldr	r3, [pc, #360]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f023 0203 	bic.w	r2, r3, #3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	4957      	ldr	r1, [pc, #348]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 8005098:	4313      	orrs	r3, r2
 800509a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800509c:	f7fd fb8c 	bl	80027b8 <HAL_GetTick>
 80050a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a2:	e00a      	b.n	80050ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a4:	f7fd fb88 	bl	80027b8 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e095      	b.n	80051e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ba:	4b4e      	ldr	r3, [pc, #312]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 020c 	and.w	r2, r3, #12
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d1eb      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d023      	beq.n	8005120 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050e4:	4b43      	ldr	r3, [pc, #268]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	4a42      	ldr	r2, [pc, #264]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 80050ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80050ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80050fc:	4b3d      	ldr	r3, [pc, #244]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005104:	4a3b      	ldr	r2, [pc, #236]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 8005106:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800510a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800510c:	4b39      	ldr	r3, [pc, #228]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	4936      	ldr	r1, [pc, #216]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 800511a:	4313      	orrs	r3, r2
 800511c:	608b      	str	r3, [r1, #8]
 800511e:	e008      	b.n	8005132 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	2b80      	cmp	r3, #128	@ 0x80
 8005124:	d105      	bne.n	8005132 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005126:	4b33      	ldr	r3, [pc, #204]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	4a32      	ldr	r2, [pc, #200]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 800512c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005130:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005132:	4b2f      	ldr	r3, [pc, #188]	@ (80051f0 <HAL_RCC_ClockConfig+0x260>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	429a      	cmp	r2, r3
 800513e:	d21d      	bcs.n	800517c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005140:	4b2b      	ldr	r3, [pc, #172]	@ (80051f0 <HAL_RCC_ClockConfig+0x260>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f023 020f 	bic.w	r2, r3, #15
 8005148:	4929      	ldr	r1, [pc, #164]	@ (80051f0 <HAL_RCC_ClockConfig+0x260>)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	4313      	orrs	r3, r2
 800514e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005150:	f7fd fb32 	bl	80027b8 <HAL_GetTick>
 8005154:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005156:	e00a      	b.n	800516e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005158:	f7fd fb2e 	bl	80027b8 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005166:	4293      	cmp	r3, r2
 8005168:	d901      	bls.n	800516e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e03b      	b.n	80051e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800516e:	4b20      	ldr	r3, [pc, #128]	@ (80051f0 <HAL_RCC_ClockConfig+0x260>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d1ed      	bne.n	8005158 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005188:	4b1a      	ldr	r3, [pc, #104]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4917      	ldr	r1, [pc, #92]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 8005196:	4313      	orrs	r3, r2
 8005198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051a6:	4b13      	ldr	r3, [pc, #76]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	490f      	ldr	r1, [pc, #60]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051ba:	f000 f825 	bl	8005208 <HAL_RCC_GetSysClockFreq>
 80051be:	4602      	mov	r2, r0
 80051c0:	4b0c      	ldr	r3, [pc, #48]	@ (80051f4 <HAL_RCC_ClockConfig+0x264>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	490c      	ldr	r1, [pc, #48]	@ (80051fc <HAL_RCC_ClockConfig+0x26c>)
 80051cc:	5ccb      	ldrb	r3, [r1, r3]
 80051ce:	f003 031f 	and.w	r3, r3, #31
 80051d2:	fa22 f303 	lsr.w	r3, r2, r3
 80051d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005200 <HAL_RCC_ClockConfig+0x270>)
 80051d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80051da:	4b0a      	ldr	r3, [pc, #40]	@ (8005204 <HAL_RCC_ClockConfig+0x274>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fc ff12 	bl	8002008 <HAL_InitTick>
 80051e4:	4603      	mov	r3, r0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40022000 	.word	0x40022000
 80051f4:	40021000 	.word	0x40021000
 80051f8:	04c4b400 	.word	0x04c4b400
 80051fc:	0800af28 	.word	0x0800af28
 8005200:	20000004 	.word	0x20000004
 8005204:	20000008 	.word	0x20000008

08005208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800520e:	4b2c      	ldr	r3, [pc, #176]	@ (80052c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 030c 	and.w	r3, r3, #12
 8005216:	2b04      	cmp	r3, #4
 8005218:	d102      	bne.n	8005220 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800521a:	4b2a      	ldr	r3, [pc, #168]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	e047      	b.n	80052b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005220:	4b27      	ldr	r3, [pc, #156]	@ (80052c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 030c 	and.w	r3, r3, #12
 8005228:	2b08      	cmp	r3, #8
 800522a:	d102      	bne.n	8005232 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800522c:	4b26      	ldr	r3, [pc, #152]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800522e:	613b      	str	r3, [r7, #16]
 8005230:	e03e      	b.n	80052b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005232:	4b23      	ldr	r3, [pc, #140]	@ (80052c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 030c 	and.w	r3, r3, #12
 800523a:	2b0c      	cmp	r3, #12
 800523c:	d136      	bne.n	80052ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800523e:	4b20      	ldr	r3, [pc, #128]	@ (80052c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005248:	4b1d      	ldr	r3, [pc, #116]	@ (80052c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	091b      	lsrs	r3, r3, #4
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	3301      	adds	r3, #1
 8005254:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b03      	cmp	r3, #3
 800525a:	d10c      	bne.n	8005276 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800525c:	4a1a      	ldr	r2, [pc, #104]	@ (80052c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	fbb2 f3f3 	udiv	r3, r2, r3
 8005264:	4a16      	ldr	r2, [pc, #88]	@ (80052c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005266:	68d2      	ldr	r2, [r2, #12]
 8005268:	0a12      	lsrs	r2, r2, #8
 800526a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800526e:	fb02 f303 	mul.w	r3, r2, r3
 8005272:	617b      	str	r3, [r7, #20]
      break;
 8005274:	e00c      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005276:	4a13      	ldr	r2, [pc, #76]	@ (80052c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	fbb2 f3f3 	udiv	r3, r2, r3
 800527e:	4a10      	ldr	r2, [pc, #64]	@ (80052c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005280:	68d2      	ldr	r2, [r2, #12]
 8005282:	0a12      	lsrs	r2, r2, #8
 8005284:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005288:	fb02 f303 	mul.w	r3, r2, r3
 800528c:	617b      	str	r3, [r7, #20]
      break;
 800528e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005290:	4b0b      	ldr	r3, [pc, #44]	@ (80052c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	0e5b      	lsrs	r3, r3, #25
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	3301      	adds	r3, #1
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	e001      	b.n	80052b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80052b0:	693b      	ldr	r3, [r7, #16]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40021000 	.word	0x40021000
 80052c4:	00f42400 	.word	0x00f42400
 80052c8:	016e3600 	.word	0x016e3600

080052cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052d0:	4b03      	ldr	r3, [pc, #12]	@ (80052e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052d2:	681b      	ldr	r3, [r3, #0]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	20000004 	.word	0x20000004

080052e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052e8:	f7ff fff0 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 80052ec:	4602      	mov	r2, r0
 80052ee:	4b06      	ldr	r3, [pc, #24]	@ (8005308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	0a1b      	lsrs	r3, r3, #8
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	4904      	ldr	r1, [pc, #16]	@ (800530c <HAL_RCC_GetPCLK1Freq+0x28>)
 80052fa:	5ccb      	ldrb	r3, [r1, r3]
 80052fc:	f003 031f 	and.w	r3, r3, #31
 8005300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005304:	4618      	mov	r0, r3
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40021000 	.word	0x40021000
 800530c:	0800af38 	.word	0x0800af38

08005310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005314:	f7ff ffda 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 8005318:	4602      	mov	r2, r0
 800531a:	4b06      	ldr	r3, [pc, #24]	@ (8005334 <HAL_RCC_GetPCLK2Freq+0x24>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	0adb      	lsrs	r3, r3, #11
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	4904      	ldr	r1, [pc, #16]	@ (8005338 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005326:	5ccb      	ldrb	r3, [r1, r3]
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005330:	4618      	mov	r0, r3
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40021000 	.word	0x40021000
 8005338:	0800af38 	.word	0x0800af38

0800533c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	220f      	movs	r2, #15
 800534a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800534c:	4b12      	ldr	r3, [pc, #72]	@ (8005398 <HAL_RCC_GetClockConfig+0x5c>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 0203 	and.w	r2, r3, #3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005358:	4b0f      	ldr	r3, [pc, #60]	@ (8005398 <HAL_RCC_GetClockConfig+0x5c>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005364:	4b0c      	ldr	r3, [pc, #48]	@ (8005398 <HAL_RCC_GetClockConfig+0x5c>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005370:	4b09      	ldr	r3, [pc, #36]	@ (8005398 <HAL_RCC_GetClockConfig+0x5c>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	08db      	lsrs	r3, r3, #3
 8005376:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800537e:	4b07      	ldr	r3, [pc, #28]	@ (800539c <HAL_RCC_GetClockConfig+0x60>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 020f 	and.w	r2, r3, #15
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	601a      	str	r2, [r3, #0]
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40021000 	.word	0x40021000
 800539c:	40022000 	.word	0x40022000

080053a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	091b      	lsrs	r3, r3, #4
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	3301      	adds	r3, #1
 80053bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d10c      	bne.n	80053de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053c4:	4a17      	ldr	r2, [pc, #92]	@ (8005424 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053cc:	4a14      	ldr	r2, [pc, #80]	@ (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053ce:	68d2      	ldr	r2, [r2, #12]
 80053d0:	0a12      	lsrs	r2, r2, #8
 80053d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053d6:	fb02 f303 	mul.w	r3, r2, r3
 80053da:	617b      	str	r3, [r7, #20]
    break;
 80053dc:	e00c      	b.n	80053f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053de:	4a12      	ldr	r2, [pc, #72]	@ (8005428 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e6:	4a0e      	ldr	r2, [pc, #56]	@ (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053e8:	68d2      	ldr	r2, [r2, #12]
 80053ea:	0a12      	lsrs	r2, r2, #8
 80053ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053f0:	fb02 f303 	mul.w	r3, r2, r3
 80053f4:	617b      	str	r3, [r7, #20]
    break;
 80053f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053f8:	4b09      	ldr	r3, [pc, #36]	@ (8005420 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	0e5b      	lsrs	r3, r3, #25
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	3301      	adds	r3, #1
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005410:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005412:	687b      	ldr	r3, [r7, #4]
}
 8005414:	4618      	mov	r0, r3
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	40021000 	.word	0x40021000
 8005424:	016e3600 	.word	0x016e3600
 8005428:	00f42400 	.word	0x00f42400

0800542c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005434:	2300      	movs	r3, #0
 8005436:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005438:	2300      	movs	r3, #0
 800543a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 8098 	beq.w	800557a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800544a:	2300      	movs	r3, #0
 800544c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800544e:	4b43      	ldr	r3, [pc, #268]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10d      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800545a:	4b40      	ldr	r3, [pc, #256]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800545c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545e:	4a3f      	ldr	r2, [pc, #252]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005464:	6593      	str	r3, [r2, #88]	@ 0x58
 8005466:	4b3d      	ldr	r3, [pc, #244]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800546a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800546e:	60bb      	str	r3, [r7, #8]
 8005470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005472:	2301      	movs	r3, #1
 8005474:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005476:	4b3a      	ldr	r3, [pc, #232]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a39      	ldr	r2, [pc, #228]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800547c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005480:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005482:	f7fd f999 	bl	80027b8 <HAL_GetTick>
 8005486:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005488:	e009      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800548a:	f7fd f995 	bl	80027b8 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d902      	bls.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	74fb      	strb	r3, [r7, #19]
        break;
 800549c:	e005      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800549e:	4b30      	ldr	r3, [pc, #192]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0ef      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80054aa:	7cfb      	ldrb	r3, [r7, #19]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d159      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054b0:	4b2a      	ldr	r3, [pc, #168]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d01e      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d019      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054cc:	4b23      	ldr	r3, [pc, #140]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054d8:	4b20      	ldr	r3, [pc, #128]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054de:	4a1f      	ldr	r2, [pc, #124]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054e8:	4b1c      	ldr	r3, [pc, #112]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ee:	4a1b      	ldr	r2, [pc, #108]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054f8:	4a18      	ldr	r2, [pc, #96]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d016      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550a:	f7fd f955 	bl	80027b8 <HAL_GetTick>
 800550e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005510:	e00b      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005512:	f7fd f951 	bl	80027b8 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005520:	4293      	cmp	r3, r2
 8005522:	d902      	bls.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	74fb      	strb	r3, [r7, #19]
            break;
 8005528:	e006      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800552a:	4b0c      	ldr	r3, [pc, #48]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800552c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0ec      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005538:	7cfb      	ldrb	r3, [r7, #19]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10b      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800553e:	4b07      	ldr	r3, [pc, #28]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005544:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800554c:	4903      	ldr	r1, [pc, #12]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005554:	e008      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005556:	7cfb      	ldrb	r3, [r7, #19]
 8005558:	74bb      	strb	r3, [r7, #18]
 800555a:	e005      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800555c:	40021000 	.word	0x40021000
 8005560:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005564:	7cfb      	ldrb	r3, [r7, #19]
 8005566:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005568:	7c7b      	ldrb	r3, [r7, #17]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d105      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800556e:	4ba7      	ldr	r3, [pc, #668]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005572:	4aa6      	ldr	r2, [pc, #664]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005574:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005578:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005586:	4ba1      	ldr	r3, [pc, #644]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558c:	f023 0203 	bic.w	r2, r3, #3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	499d      	ldr	r1, [pc, #628]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055a8:	4b98      	ldr	r3, [pc, #608]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ae:	f023 020c 	bic.w	r2, r3, #12
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	4995      	ldr	r1, [pc, #596]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055ca:	4b90      	ldr	r3, [pc, #576]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	498c      	ldr	r1, [pc, #560]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00a      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055ec:	4b87      	ldr	r3, [pc, #540]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	4984      	ldr	r1, [pc, #528]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800560e:	4b7f      	ldr	r3, [pc, #508]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005614:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	497b      	ldr	r1, [pc, #492]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005630:	4b76      	ldr	r3, [pc, #472]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005636:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	4973      	ldr	r1, [pc, #460]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005652:	4b6e      	ldr	r3, [pc, #440]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005658:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	496a      	ldr	r1, [pc, #424]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00a      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005674:	4b65      	ldr	r3, [pc, #404]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800567a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	4962      	ldr	r1, [pc, #392]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005696:	4b5d      	ldr	r3, [pc, #372]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a4:	4959      	ldr	r1, [pc, #356]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056b8:	4b54      	ldr	r3, [pc, #336]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056be:	f023 0203 	bic.w	r2, r3, #3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c6:	4951      	ldr	r1, [pc, #324]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056da:	4b4c      	ldr	r3, [pc, #304]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e8:	4948      	ldr	r1, [pc, #288]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d015      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056fc:	4b43      	ldr	r3, [pc, #268]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005702:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570a:	4940      	ldr	r1, [pc, #256]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570c:	4313      	orrs	r3, r2
 800570e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005716:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800571a:	d105      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800571c:	4b3b      	ldr	r3, [pc, #236]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4a3a      	ldr	r2, [pc, #232]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005726:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005730:	2b00      	cmp	r3, #0
 8005732:	d015      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005734:	4b35      	ldr	r3, [pc, #212]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800573a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005742:	4932      	ldr	r1, [pc, #200]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005744:	4313      	orrs	r3, r2
 8005746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800574e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005752:	d105      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005754:	4b2d      	ldr	r3, [pc, #180]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	4a2c      	ldr	r2, [pc, #176]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800575a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800575e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d015      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800576c:	4b27      	ldr	r3, [pc, #156]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005772:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577a:	4924      	ldr	r1, [pc, #144]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005786:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800578a:	d105      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800578c:	4b1f      	ldr	r3, [pc, #124]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4a1e      	ldr	r2, [pc, #120]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005792:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005796:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d015      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057a4:	4b19      	ldr	r3, [pc, #100]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b2:	4916      	ldr	r1, [pc, #88]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057c2:	d105      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c4:	4b11      	ldr	r3, [pc, #68]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	4a10      	ldr	r2, [pc, #64]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d019      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057dc:	4b0b      	ldr	r3, [pc, #44]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ea:	4908      	ldr	r1, [pc, #32]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057fa:	d109      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057fc:	4b03      	ldr	r3, [pc, #12]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	4a02      	ldr	r2, [pc, #8]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005806:	60d3      	str	r3, [r2, #12]
 8005808:	e002      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800580a:	bf00      	nop
 800580c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d015      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800581c:	4b29      	ldr	r3, [pc, #164]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800581e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005822:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582a:	4926      	ldr	r1, [pc, #152]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005836:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800583a:	d105      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800583c:	4b21      	ldr	r3, [pc, #132]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	4a20      	ldr	r2, [pc, #128]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005846:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d015      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005854:	4b1b      	ldr	r3, [pc, #108]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800585a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005862:	4918      	ldr	r1, [pc, #96]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005864:	4313      	orrs	r3, r2
 8005866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800586e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005872:	d105      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005874:	4b13      	ldr	r3, [pc, #76]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	4a12      	ldr	r2, [pc, #72]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800587a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800587e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d015      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800588c:	4b0d      	ldr	r3, [pc, #52]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800588e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005892:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800589a:	490a      	ldr	r1, [pc, #40]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058aa:	d105      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058ac:	4b05      	ldr	r3, [pc, #20]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	4a04      	ldr	r2, [pc, #16]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80058b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	40021000 	.word	0x40021000

080058c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e09d      	b.n	8005a16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d108      	bne.n	80058f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058ea:	d009      	beq.n	8005900 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	61da      	str	r2, [r3, #28]
 80058f2:	e005      	b.n	8005900 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d106      	bne.n	8005920 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fc faea 	bl	8001ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005936:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005940:	d902      	bls.n	8005948 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	e002      	b.n	800594e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005948:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800594c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005956:	d007      	beq.n	8005968 <HAL_SPI_Init+0xa0>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005960:	d002      	beq.n	8005968 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	431a      	orrs	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059a0:	431a      	orrs	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059aa:	ea42 0103 	orr.w	r1, r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	0c1b      	lsrs	r3, r3, #16
 80059c4:	f003 0204 	and.w	r2, r3, #4
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80059e4:	ea42 0103 	orr.w	r1, r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69da      	ldr	r2, [r3, #28]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b088      	sub	sp, #32
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	603b      	str	r3, [r7, #0]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a2e:	f7fc fec3 	bl	80027b8 <HAL_GetTick>
 8005a32:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005a34:	88fb      	ldrh	r3, [r7, #6]
 8005a36:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d001      	beq.n	8005a48 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005a44:	2302      	movs	r3, #2
 8005a46:	e15c      	b.n	8005d02 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <HAL_SPI_Transmit+0x36>
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e154      	b.n	8005d02 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_SPI_Transmit+0x48>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e14d      	b.n	8005d02 <HAL_SPI_Transmit+0x2e4>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2203      	movs	r2, #3
 8005a72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	88fa      	ldrh	r2, [r7, #6]
 8005a86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	88fa      	ldrh	r2, [r7, #6]
 8005a8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ab8:	d10f      	bne.n	8005ada <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ac8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ad8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae4:	2b40      	cmp	r3, #64	@ 0x40
 8005ae6:	d007      	beq.n	8005af8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005af6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b00:	d952      	bls.n	8005ba8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <HAL_SPI_Transmit+0xf2>
 8005b0a:	8b7b      	ldrh	r3, [r7, #26]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d145      	bne.n	8005b9c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b14:	881a      	ldrh	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b20:	1c9a      	adds	r2, r3, #2
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b34:	e032      	b.n	8005b9c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d112      	bne.n	8005b6a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b48:	881a      	ldrh	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b54:	1c9a      	adds	r2, r3, #2
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b68:	e018      	b.n	8005b9c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b6a:	f7fc fe25 	bl	80027b8 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d803      	bhi.n	8005b82 <HAL_SPI_Transmit+0x164>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b80:	d102      	bne.n	8005b88 <HAL_SPI_Transmit+0x16a>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d109      	bne.n	8005b9c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e0b2      	b.n	8005d02 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1c7      	bne.n	8005b36 <HAL_SPI_Transmit+0x118>
 8005ba6:	e083      	b.n	8005cb0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <HAL_SPI_Transmit+0x198>
 8005bb0:	8b7b      	ldrh	r3, [r7, #26]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d177      	bne.n	8005ca6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d912      	bls.n	8005be6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc4:	881a      	ldrh	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd0:	1c9a      	adds	r2, r3, #2
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b02      	subs	r3, #2
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005be4:	e05f      	b.n	8005ca6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	330c      	adds	r3, #12
 8005bf0:	7812      	ldrb	r2, [r2, #0]
 8005bf2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005c0c:	e04b      	b.n	8005ca6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d12b      	bne.n	8005c74 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d912      	bls.n	8005c4c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c2a:	881a      	ldrh	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c36:	1c9a      	adds	r2, r3, #2
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b02      	subs	r3, #2
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c4a:	e02c      	b.n	8005ca6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	330c      	adds	r3, #12
 8005c56:	7812      	ldrb	r2, [r2, #0]
 8005c58:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c72:	e018      	b.n	8005ca6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c74:	f7fc fda0 	bl	80027b8 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d803      	bhi.n	8005c8c <HAL_SPI_Transmit+0x26e>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8a:	d102      	bne.n	8005c92 <HAL_SPI_Transmit+0x274>
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d109      	bne.n	8005ca6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e02d      	b.n	8005d02 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1ae      	bne.n	8005c0e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	6839      	ldr	r1, [r7, #0]
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fcf5 	bl	80066a4 <SPI_EndRxTxTransaction>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cce:	2300      	movs	r3, #0
 8005cd0:	617b      	str	r3, [r7, #20]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	617b      	str	r3, [r7, #20]
 8005ce2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e000      	b.n	8005d02 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005d00:	2300      	movs	r3, #0
  }
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3720      	adds	r7, #32
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b088      	sub	sp, #32
 8005d0e:	af02      	add	r7, sp, #8
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	603b      	str	r3, [r7, #0]
 8005d16:	4613      	mov	r3, r2
 8005d18:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d001      	beq.n	8005d2a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005d26:	2302      	movs	r3, #2
 8005d28:	e123      	b.n	8005f72 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <HAL_SPI_Receive+0x2c>
 8005d30:	88fb      	ldrh	r3, [r7, #6]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e11b      	b.n	8005f72 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d42:	d112      	bne.n	8005d6a <HAL_SPI_Receive+0x60>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10e      	bne.n	8005d6a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2204      	movs	r2, #4
 8005d50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d54:	88fa      	ldrh	r2, [r7, #6]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f90a 	bl	8005f7a <HAL_SPI_TransmitReceive>
 8005d66:	4603      	mov	r3, r0
 8005d68:	e103      	b.n	8005f72 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d6a:	f7fc fd25 	bl	80027b8 <HAL_GetTick>
 8005d6e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d101      	bne.n	8005d7e <HAL_SPI_Receive+0x74>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	e0f9      	b.n	8005f72 <HAL_SPI_Receive+0x268>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2204      	movs	r2, #4
 8005d8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	88fa      	ldrh	r2, [r7, #6]
 8005d9e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	88fa      	ldrh	r2, [r7, #6]
 8005da6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005dd0:	d908      	bls.n	8005de4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005de0:	605a      	str	r2, [r3, #4]
 8005de2:	e007      	b.n	8005df4 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005df2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dfc:	d10f      	bne.n	8005e1e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005e1c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e28:	2b40      	cmp	r3, #64	@ 0x40
 8005e2a:	d007      	beq.n	8005e3c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e3a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e44:	d875      	bhi.n	8005f32 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e46:	e037      	b.n	8005eb8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d117      	bne.n	8005e86 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f103 020c 	add.w	r2, r3, #12
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e62:	7812      	ldrb	r2, [r2, #0]
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005e84:	e018      	b.n	8005eb8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e86:	f7fc fc97 	bl	80027b8 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d803      	bhi.n	8005e9e <HAL_SPI_Receive+0x194>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9c:	d102      	bne.n	8005ea4 <HAL_SPI_Receive+0x19a>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d109      	bne.n	8005eb8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e05c      	b.n	8005f72 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1c1      	bne.n	8005e48 <HAL_SPI_Receive+0x13e>
 8005ec4:	e03b      	b.n	8005f3e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d115      	bne.n	8005f00 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ede:	b292      	uxth	r2, r2
 8005ee0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee6:	1c9a      	adds	r2, r3, #2
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005efe:	e018      	b.n	8005f32 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f00:	f7fc fc5a 	bl	80027b8 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d803      	bhi.n	8005f18 <HAL_SPI_Receive+0x20e>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f16:	d102      	bne.n	8005f1e <HAL_SPI_Receive+0x214>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d109      	bne.n	8005f32 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e01f      	b.n	8005f72 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1c3      	bne.n	8005ec6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 fb56 	bl	80065f4 <SPI_EndRxTransaction>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2220      	movs	r2, #32
 8005f52:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e000      	b.n	8005f72 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8005f70:	2300      	movs	r3, #0
  }
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b08a      	sub	sp, #40	@ 0x28
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	60f8      	str	r0, [r7, #12]
 8005f82:	60b9      	str	r1, [r7, #8]
 8005f84:	607a      	str	r2, [r7, #4]
 8005f86:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f8c:	f7fc fc14 	bl	80027b8 <HAL_GetTick>
 8005f90:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f98:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005fa0:	887b      	ldrh	r3, [r7, #2]
 8005fa2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005fa4:	887b      	ldrh	r3, [r7, #2]
 8005fa6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fa8:	7ffb      	ldrb	r3, [r7, #31]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d00c      	beq.n	8005fc8 <HAL_SPI_TransmitReceive+0x4e>
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fb4:	d106      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d102      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x4a>
 8005fbe:	7ffb      	ldrb	r3, [r7, #31]
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d001      	beq.n	8005fc8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e1f3      	b.n	80063b0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d005      	beq.n	8005fda <HAL_SPI_TransmitReceive+0x60>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <HAL_SPI_TransmitReceive+0x60>
 8005fd4:	887b      	ldrh	r3, [r7, #2]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e1e8      	b.n	80063b0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d101      	bne.n	8005fec <HAL_SPI_TransmitReceive+0x72>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e1e1      	b.n	80063b0 <HAL_SPI_TransmitReceive+0x436>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d003      	beq.n	8006008 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2205      	movs	r2, #5
 8006004:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	887a      	ldrh	r2, [r7, #2]
 8006018:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	887a      	ldrh	r2, [r7, #2]
 8006020:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	887a      	ldrh	r2, [r7, #2]
 800602e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	887a      	ldrh	r2, [r7, #2]
 8006034:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800604a:	d802      	bhi.n	8006052 <HAL_SPI_TransmitReceive+0xd8>
 800604c:	8abb      	ldrh	r3, [r7, #20]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d908      	bls.n	8006064 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006060:	605a      	str	r2, [r3, #4]
 8006062:	e007      	b.n	8006074 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006072:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800607e:	2b40      	cmp	r3, #64	@ 0x40
 8006080:	d007      	beq.n	8006092 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006090:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800609a:	f240 8083 	bls.w	80061a4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <HAL_SPI_TransmitReceive+0x132>
 80060a6:	8afb      	ldrh	r3, [r7, #22]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d16f      	bne.n	800618c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b0:	881a      	ldrh	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	1c9a      	adds	r2, r3, #2
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060d0:	e05c      	b.n	800618c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d11b      	bne.n	8006118 <HAL_SPI_TransmitReceive+0x19e>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d016      	beq.n	8006118 <HAL_SPI_TransmitReceive+0x19e>
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d113      	bne.n	8006118 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f4:	881a      	ldrh	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006100:	1c9a      	adds	r2, r3, #2
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b01      	subs	r3, #1
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b01      	cmp	r3, #1
 8006124:	d11c      	bne.n	8006160 <HAL_SPI_TransmitReceive+0x1e6>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d016      	beq.n	8006160 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613c:	b292      	uxth	r2, r2
 800613e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006144:	1c9a      	adds	r2, r3, #2
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006150:	b29b      	uxth	r3, r3
 8006152:	3b01      	subs	r3, #1
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800615c:	2301      	movs	r3, #1
 800615e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006160:	f7fc fb2a 	bl	80027b8 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800616c:	429a      	cmp	r2, r3
 800616e:	d80d      	bhi.n	800618c <HAL_SPI_TransmitReceive+0x212>
 8006170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006176:	d009      	beq.n	800618c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e111      	b.n	80063b0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006190:	b29b      	uxth	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d19d      	bne.n	80060d2 <HAL_SPI_TransmitReceive+0x158>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d197      	bne.n	80060d2 <HAL_SPI_TransmitReceive+0x158>
 80061a2:	e0e5      	b.n	8006370 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <HAL_SPI_TransmitReceive+0x23a>
 80061ac:	8afb      	ldrh	r3, [r7, #22]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	f040 80d1 	bne.w	8006356 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d912      	bls.n	80061e4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c2:	881a      	ldrh	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ce:	1c9a      	adds	r2, r3, #2
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061d8:	b29b      	uxth	r3, r3
 80061da:	3b02      	subs	r3, #2
 80061dc:	b29a      	uxth	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80061e2:	e0b8      	b.n	8006356 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	330c      	adds	r3, #12
 80061ee:	7812      	ldrb	r2, [r2, #0]
 80061f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006200:	b29b      	uxth	r3, r3
 8006202:	3b01      	subs	r3, #1
 8006204:	b29a      	uxth	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800620a:	e0a4      	b.n	8006356 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b02      	cmp	r3, #2
 8006218:	d134      	bne.n	8006284 <HAL_SPI_TransmitReceive+0x30a>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800621e:	b29b      	uxth	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d02f      	beq.n	8006284 <HAL_SPI_TransmitReceive+0x30a>
 8006224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006226:	2b01      	cmp	r3, #1
 8006228:	d12c      	bne.n	8006284 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b01      	cmp	r3, #1
 8006232:	d912      	bls.n	800625a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006238:	881a      	ldrh	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006244:	1c9a      	adds	r2, r3, #2
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800624e:	b29b      	uxth	r3, r3
 8006250:	3b02      	subs	r3, #2
 8006252:	b29a      	uxth	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006258:	e012      	b.n	8006280 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	330c      	adds	r3, #12
 8006264:	7812      	ldrb	r2, [r2, #0]
 8006266:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006276:	b29b      	uxth	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b01      	cmp	r3, #1
 8006290:	d148      	bne.n	8006324 <HAL_SPI_TransmitReceive+0x3aa>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006298:	b29b      	uxth	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d042      	beq.n	8006324 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d923      	bls.n	80062f2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68da      	ldr	r2, [r3, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b4:	b292      	uxth	r2, r2
 80062b6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062bc:	1c9a      	adds	r2, r3, #2
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	3b02      	subs	r3, #2
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80062da:	b29b      	uxth	r3, r3
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d81f      	bhi.n	8006320 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80062ee:	605a      	str	r2, [r3, #4]
 80062f0:	e016      	b.n	8006320 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f103 020c 	add.w	r2, r3, #12
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fe:	7812      	ldrb	r2, [r2, #0]
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006320:	2301      	movs	r3, #1
 8006322:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006324:	f7fc fa48 	bl	80027b8 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006330:	429a      	cmp	r2, r3
 8006332:	d803      	bhi.n	800633c <HAL_SPI_TransmitReceive+0x3c2>
 8006334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633a:	d102      	bne.n	8006342 <HAL_SPI_TransmitReceive+0x3c8>
 800633c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633e:	2b00      	cmp	r3, #0
 8006340:	d109      	bne.n	8006356 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e02c      	b.n	80063b0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800635a:	b29b      	uxth	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	f47f af55 	bne.w	800620c <HAL_SPI_TransmitReceive+0x292>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006368:	b29b      	uxth	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	f47f af4e 	bne.w	800620c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006370:	6a3a      	ldr	r2, [r7, #32]
 8006372:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f995 	bl	80066a4 <SPI_EndRxTxTransaction>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d008      	beq.n	8006392 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2220      	movs	r2, #32
 8006384:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e00e      	b.n	80063b0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e000      	b.n	80063b0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80063ae:	2300      	movs	r3, #0
  }
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3728      	adds	r7, #40	@ 0x28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	603b      	str	r3, [r7, #0]
 80063c4:	4613      	mov	r3, r2
 80063c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063c8:	f7fc f9f6 	bl	80027b8 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d0:	1a9b      	subs	r3, r3, r2
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	4413      	add	r3, r2
 80063d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063d8:	f7fc f9ee 	bl	80027b8 <HAL_GetTick>
 80063dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063de:	4b39      	ldr	r3, [pc, #228]	@ (80064c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	015b      	lsls	r3, r3, #5
 80063e4:	0d1b      	lsrs	r3, r3, #20
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	fb02 f303 	mul.w	r3, r2, r3
 80063ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063ee:	e054      	b.n	800649a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f6:	d050      	beq.n	800649a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063f8:	f7fc f9de 	bl	80027b8 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	429a      	cmp	r2, r3
 8006406:	d902      	bls.n	800640e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d13d      	bne.n	800648a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800641c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006426:	d111      	bne.n	800644c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006430:	d004      	beq.n	800643c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800643a:	d107      	bne.n	800644c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800644a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006450:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006454:	d10f      	bne.n	8006476 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006474:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e017      	b.n	80064ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	3b01      	subs	r3, #1
 8006498:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	4013      	ands	r3, r2
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	bf0c      	ite	eq
 80064aa:	2301      	moveq	r3, #1
 80064ac:	2300      	movne	r3, #0
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d19b      	bne.n	80063f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3720      	adds	r7, #32
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20000004 	.word	0x20000004

080064c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	@ 0x28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80064d6:	2300      	movs	r3, #0
 80064d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80064da:	f7fc f96d 	bl	80027b8 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e2:	1a9b      	subs	r3, r3, r2
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	4413      	add	r3, r2
 80064e8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80064ea:	f7fc f965 	bl	80027b8 <HAL_GetTick>
 80064ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	330c      	adds	r3, #12
 80064f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80064f8:	4b3d      	ldr	r3, [pc, #244]	@ (80065f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	00da      	lsls	r2, r3, #3
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	0d1b      	lsrs	r3, r3, #20
 8006508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800650a:	fb02 f303 	mul.w	r3, r2, r3
 800650e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006510:	e060      	b.n	80065d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006518:	d107      	bne.n	800652a <SPI_WaitFifoStateUntilTimeout+0x62>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d104      	bne.n	800652a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	b2db      	uxtb	r3, r3
 8006526:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006528:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006530:	d050      	beq.n	80065d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006532:	f7fc f941 	bl	80027b8 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800653e:	429a      	cmp	r2, r3
 8006540:	d902      	bls.n	8006548 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	d13d      	bne.n	80065c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006556:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006560:	d111      	bne.n	8006586 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800656a:	d004      	beq.n	8006576 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006574:	d107      	bne.n	8006586 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006584:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800658e:	d10f      	bne.n	80065b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e010      	b.n	80065e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	4013      	ands	r3, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d196      	bne.n	8006512 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3728      	adds	r7, #40	@ 0x28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000004 	.word	0x20000004

080065f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006608:	d111      	bne.n	800662e <SPI_EndRxTransaction+0x3a>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006612:	d004      	beq.n	800661e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800661c:	d107      	bne.n	800662e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800662c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2200      	movs	r2, #0
 8006636:	2180      	movs	r1, #128	@ 0x80
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f7ff febd 	bl	80063b8 <SPI_WaitFlagStateUntilTimeout>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006648:	f043 0220 	orr.w	r2, r3, #32
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e023      	b.n	800669c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800665c:	d11d      	bne.n	800669a <SPI_EndRxTransaction+0xa6>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006666:	d004      	beq.n	8006672 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006670:	d113      	bne.n	800669a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2200      	movs	r2, #0
 800667a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f7ff ff22 	bl	80064c8 <SPI_WaitFifoStateUntilTimeout>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d007      	beq.n	800669a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800668e:	f043 0220 	orr.w	r2, r3, #32
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e000      	b.n	800669c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af02      	add	r7, sp, #8
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f7ff ff03 	bl	80064c8 <SPI_WaitFifoStateUntilTimeout>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d007      	beq.n	80066d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066cc:	f043 0220 	orr.w	r2, r3, #32
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e027      	b.n	8006728 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2200      	movs	r2, #0
 80066e0:	2180      	movs	r1, #128	@ 0x80
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f7ff fe68 	bl	80063b8 <SPI_WaitFlagStateUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d007      	beq.n	80066fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066f2:	f043 0220 	orr.w	r2, r3, #32
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e014      	b.n	8006728 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2200      	movs	r2, #0
 8006706:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7ff fedc 	bl	80064c8 <SPI_WaitFifoStateUntilTimeout>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d007      	beq.n	8006726 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800671a:	f043 0220 	orr.w	r2, r3, #32
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e000      	b.n	8006728 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e049      	b.n	80067d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7fb fdd2 	bl	8002300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3304      	adds	r3, #4
 800676c:	4619      	mov	r1, r3
 800676e:	4610      	mov	r0, r2
 8006770:	f000 fbac 	bl	8006ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d001      	beq.n	80067f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e04c      	b.n	8006892 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a26      	ldr	r2, [pc, #152]	@ (80068a0 <HAL_TIM_Base_Start+0xc0>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d022      	beq.n	8006850 <HAL_TIM_Base_Start+0x70>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006812:	d01d      	beq.n	8006850 <HAL_TIM_Base_Start+0x70>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a22      	ldr	r2, [pc, #136]	@ (80068a4 <HAL_TIM_Base_Start+0xc4>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d018      	beq.n	8006850 <HAL_TIM_Base_Start+0x70>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a21      	ldr	r2, [pc, #132]	@ (80068a8 <HAL_TIM_Base_Start+0xc8>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d013      	beq.n	8006850 <HAL_TIM_Base_Start+0x70>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a1f      	ldr	r2, [pc, #124]	@ (80068ac <HAL_TIM_Base_Start+0xcc>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00e      	beq.n	8006850 <HAL_TIM_Base_Start+0x70>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a1e      	ldr	r2, [pc, #120]	@ (80068b0 <HAL_TIM_Base_Start+0xd0>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d009      	beq.n	8006850 <HAL_TIM_Base_Start+0x70>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a1c      	ldr	r2, [pc, #112]	@ (80068b4 <HAL_TIM_Base_Start+0xd4>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d004      	beq.n	8006850 <HAL_TIM_Base_Start+0x70>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a1b      	ldr	r2, [pc, #108]	@ (80068b8 <HAL_TIM_Base_Start+0xd8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d115      	bne.n	800687c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689a      	ldr	r2, [r3, #8]
 8006856:	4b19      	ldr	r3, [pc, #100]	@ (80068bc <HAL_TIM_Base_Start+0xdc>)
 8006858:	4013      	ands	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b06      	cmp	r3, #6
 8006860:	d015      	beq.n	800688e <HAL_TIM_Base_Start+0xae>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006868:	d011      	beq.n	800688e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f042 0201 	orr.w	r2, r2, #1
 8006878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800687a:	e008      	b.n	800688e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0201 	orr.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	e000      	b.n	8006890 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40012c00 	.word	0x40012c00
 80068a4:	40000400 	.word	0x40000400
 80068a8:	40000800 	.word	0x40000800
 80068ac:	40000c00 	.word	0x40000c00
 80068b0:	40013400 	.word	0x40013400
 80068b4:	40014000 	.word	0x40014000
 80068b8:	40015000 	.word	0x40015000
 80068bc:	00010007 	.word	0x00010007

080068c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d001      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e054      	b.n	8006982 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f042 0201 	orr.w	r2, r2, #1
 80068ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a26      	ldr	r2, [pc, #152]	@ (8006990 <HAL_TIM_Base_Start_IT+0xd0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d022      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0x80>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006902:	d01d      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0x80>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a22      	ldr	r2, [pc, #136]	@ (8006994 <HAL_TIM_Base_Start_IT+0xd4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d018      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0x80>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a21      	ldr	r2, [pc, #132]	@ (8006998 <HAL_TIM_Base_Start_IT+0xd8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d013      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0x80>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a1f      	ldr	r2, [pc, #124]	@ (800699c <HAL_TIM_Base_Start_IT+0xdc>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d00e      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0x80>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a1e      	ldr	r2, [pc, #120]	@ (80069a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d009      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0x80>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a1c      	ldr	r2, [pc, #112]	@ (80069a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d004      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0x80>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a1b      	ldr	r2, [pc, #108]	@ (80069a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d115      	bne.n	800696c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	4b19      	ldr	r3, [pc, #100]	@ (80069ac <HAL_TIM_Base_Start_IT+0xec>)
 8006948:	4013      	ands	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b06      	cmp	r3, #6
 8006950:	d015      	beq.n	800697e <HAL_TIM_Base_Start_IT+0xbe>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006958:	d011      	beq.n	800697e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0201 	orr.w	r2, r2, #1
 8006968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800696a:	e008      	b.n	800697e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0201 	orr.w	r2, r2, #1
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	e000      	b.n	8006980 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800697e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	40012c00 	.word	0x40012c00
 8006994:	40000400 	.word	0x40000400
 8006998:	40000800 	.word	0x40000800
 800699c:	40000c00 	.word	0x40000c00
 80069a0:	40013400 	.word	0x40013400
 80069a4:	40014000 	.word	0x40014000
 80069a8:	40015000 	.word	0x40015000
 80069ac:	00010007 	.word	0x00010007

080069b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d020      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d01b      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f06f 0202 	mvn.w	r2, #2
 80069e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	f003 0303 	and.w	r3, r3, #3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fa48 	bl	8006e90 <HAL_TIM_IC_CaptureCallback>
 8006a00:	e005      	b.n	8006a0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fa3a 	bl	8006e7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fa4b 	bl	8006ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 0304 	and.w	r3, r3, #4
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d020      	beq.n	8006a60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f003 0304 	and.w	r3, r3, #4
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d01b      	beq.n	8006a60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f06f 0204 	mvn.w	r2, #4
 8006a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2202      	movs	r2, #2
 8006a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fa22 	bl	8006e90 <HAL_TIM_IC_CaptureCallback>
 8006a4c:	e005      	b.n	8006a5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fa14 	bl	8006e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fa25 	bl	8006ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f003 0308 	and.w	r3, r3, #8
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d020      	beq.n	8006aac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f003 0308 	and.w	r3, r3, #8
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01b      	beq.n	8006aac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f06f 0208 	mvn.w	r2, #8
 8006a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2204      	movs	r2, #4
 8006a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f9fc 	bl	8006e90 <HAL_TIM_IC_CaptureCallback>
 8006a98:	e005      	b.n	8006aa6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f9ee 	bl	8006e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f9ff 	bl	8006ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f003 0310 	and.w	r3, r3, #16
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d020      	beq.n	8006af8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f003 0310 	and.w	r3, r3, #16
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01b      	beq.n	8006af8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f06f 0210 	mvn.w	r2, #16
 8006ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2208      	movs	r2, #8
 8006ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f9d6 	bl	8006e90 <HAL_TIM_IC_CaptureCallback>
 8006ae4:	e005      	b.n	8006af2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f9c8 	bl	8006e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f9d9 	bl	8006ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00c      	beq.n	8006b1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d007      	beq.n	8006b1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f06f 0201 	mvn.w	r2, #1
 8006b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7fb f996 	bl	8001e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d104      	bne.n	8006b30 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00c      	beq.n	8006b4a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d007      	beq.n	8006b4a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fbb1 	bl	80072ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00c      	beq.n	8006b6e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d007      	beq.n	8006b6e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fba9 	bl	80072c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00c      	beq.n	8006b92 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d007      	beq.n	8006b92 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f993 	bl	8006eb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00c      	beq.n	8006bb6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f003 0320 	and.w	r3, r3, #32
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d007      	beq.n	8006bb6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f06f 0220 	mvn.w	r2, #32
 8006bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fb71 	bl	8007298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00c      	beq.n	8006bda <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d007      	beq.n	8006bda <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fb7d 	bl	80072d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00c      	beq.n	8006bfe <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d007      	beq.n	8006bfe <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fb75 	bl	80072e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00c      	beq.n	8006c22 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d007      	beq.n	8006c22 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fb6d 	bl	80072fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00c      	beq.n	8006c46 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d007      	beq.n	8006c46 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fb65 	bl	8007310 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c46:	bf00      	nop
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d101      	bne.n	8006c6c <HAL_TIM_ConfigClockSource+0x1c>
 8006c68:	2302      	movs	r3, #2
 8006c6a:	e0f6      	b.n	8006e5a <HAL_TIM_ConfigClockSource+0x20a>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006c8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a6f      	ldr	r2, [pc, #444]	@ (8006e64 <HAL_TIM_ConfigClockSource+0x214>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	f000 80c1 	beq.w	8006e2e <HAL_TIM_ConfigClockSource+0x1de>
 8006cac:	4a6d      	ldr	r2, [pc, #436]	@ (8006e64 <HAL_TIM_ConfigClockSource+0x214>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	f200 80c6 	bhi.w	8006e40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cb4:	4a6c      	ldr	r2, [pc, #432]	@ (8006e68 <HAL_TIM_ConfigClockSource+0x218>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	f000 80b9 	beq.w	8006e2e <HAL_TIM_ConfigClockSource+0x1de>
 8006cbc:	4a6a      	ldr	r2, [pc, #424]	@ (8006e68 <HAL_TIM_ConfigClockSource+0x218>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	f200 80be 	bhi.w	8006e40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cc4:	4a69      	ldr	r2, [pc, #420]	@ (8006e6c <HAL_TIM_ConfigClockSource+0x21c>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	f000 80b1 	beq.w	8006e2e <HAL_TIM_ConfigClockSource+0x1de>
 8006ccc:	4a67      	ldr	r2, [pc, #412]	@ (8006e6c <HAL_TIM_ConfigClockSource+0x21c>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	f200 80b6 	bhi.w	8006e40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cd4:	4a66      	ldr	r2, [pc, #408]	@ (8006e70 <HAL_TIM_ConfigClockSource+0x220>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	f000 80a9 	beq.w	8006e2e <HAL_TIM_ConfigClockSource+0x1de>
 8006cdc:	4a64      	ldr	r2, [pc, #400]	@ (8006e70 <HAL_TIM_ConfigClockSource+0x220>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	f200 80ae 	bhi.w	8006e40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ce4:	4a63      	ldr	r2, [pc, #396]	@ (8006e74 <HAL_TIM_ConfigClockSource+0x224>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	f000 80a1 	beq.w	8006e2e <HAL_TIM_ConfigClockSource+0x1de>
 8006cec:	4a61      	ldr	r2, [pc, #388]	@ (8006e74 <HAL_TIM_ConfigClockSource+0x224>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	f200 80a6 	bhi.w	8006e40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006cf4:	4a60      	ldr	r2, [pc, #384]	@ (8006e78 <HAL_TIM_ConfigClockSource+0x228>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	f000 8099 	beq.w	8006e2e <HAL_TIM_ConfigClockSource+0x1de>
 8006cfc:	4a5e      	ldr	r2, [pc, #376]	@ (8006e78 <HAL_TIM_ConfigClockSource+0x228>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	f200 809e 	bhi.w	8006e40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d04:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006d08:	f000 8091 	beq.w	8006e2e <HAL_TIM_ConfigClockSource+0x1de>
 8006d0c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006d10:	f200 8096 	bhi.w	8006e40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d18:	f000 8089 	beq.w	8006e2e <HAL_TIM_ConfigClockSource+0x1de>
 8006d1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d20:	f200 808e 	bhi.w	8006e40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d28:	d03e      	beq.n	8006da8 <HAL_TIM_ConfigClockSource+0x158>
 8006d2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d2e:	f200 8087 	bhi.w	8006e40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d36:	f000 8086 	beq.w	8006e46 <HAL_TIM_ConfigClockSource+0x1f6>
 8006d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d3e:	d87f      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d40:	2b70      	cmp	r3, #112	@ 0x70
 8006d42:	d01a      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0x12a>
 8006d44:	2b70      	cmp	r3, #112	@ 0x70
 8006d46:	d87b      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d48:	2b60      	cmp	r3, #96	@ 0x60
 8006d4a:	d050      	beq.n	8006dee <HAL_TIM_ConfigClockSource+0x19e>
 8006d4c:	2b60      	cmp	r3, #96	@ 0x60
 8006d4e:	d877      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d50:	2b50      	cmp	r3, #80	@ 0x50
 8006d52:	d03c      	beq.n	8006dce <HAL_TIM_ConfigClockSource+0x17e>
 8006d54:	2b50      	cmp	r3, #80	@ 0x50
 8006d56:	d873      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d58:	2b40      	cmp	r3, #64	@ 0x40
 8006d5a:	d058      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0x1be>
 8006d5c:	2b40      	cmp	r3, #64	@ 0x40
 8006d5e:	d86f      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d60:	2b30      	cmp	r3, #48	@ 0x30
 8006d62:	d064      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x1de>
 8006d64:	2b30      	cmp	r3, #48	@ 0x30
 8006d66:	d86b      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d060      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x1de>
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d867      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d05c      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x1de>
 8006d74:	2b10      	cmp	r3, #16
 8006d76:	d05a      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x1de>
 8006d78:	e062      	b.n	8006e40 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d8a:	f000 f9cf 	bl	800712c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	609a      	str	r2, [r3, #8]
      break;
 8006da6:	e04f      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006db8:	f000 f9b8 	bl	800712c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689a      	ldr	r2, [r3, #8]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006dca:	609a      	str	r2, [r3, #8]
      break;
 8006dcc:	e03c      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f000 f92a 	bl	8007034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2150      	movs	r1, #80	@ 0x50
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 f983 	bl	80070f2 <TIM_ITRx_SetConfig>
      break;
 8006dec:	e02c      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f000 f949 	bl	8007092 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2160      	movs	r1, #96	@ 0x60
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 f973 	bl	80070f2 <TIM_ITRx_SetConfig>
      break;
 8006e0c:	e01c      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f000 f90a 	bl	8007034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2140      	movs	r1, #64	@ 0x40
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 f963 	bl	80070f2 <TIM_ITRx_SetConfig>
      break;
 8006e2c:	e00c      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4619      	mov	r1, r3
 8006e38:	4610      	mov	r0, r2
 8006e3a:	f000 f95a 	bl	80070f2 <TIM_ITRx_SetConfig>
      break;
 8006e3e:	e003      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	73fb      	strb	r3, [r7, #15]
      break;
 8006e44:	e000      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006e46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	00100070 	.word	0x00100070
 8006e68:	00100060 	.word	0x00100060
 8006e6c:	00100050 	.word	0x00100050
 8006e70:	00100040 	.word	0x00100040
 8006e74:	00100030 	.word	0x00100030
 8006e78:	00100020 	.word	0x00100020

08006e7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a4c      	ldr	r2, [pc, #304]	@ (8007010 <TIM_Base_SetConfig+0x144>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d017      	beq.n	8006f14 <TIM_Base_SetConfig+0x48>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eea:	d013      	beq.n	8006f14 <TIM_Base_SetConfig+0x48>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a49      	ldr	r2, [pc, #292]	@ (8007014 <TIM_Base_SetConfig+0x148>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d00f      	beq.n	8006f14 <TIM_Base_SetConfig+0x48>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a48      	ldr	r2, [pc, #288]	@ (8007018 <TIM_Base_SetConfig+0x14c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00b      	beq.n	8006f14 <TIM_Base_SetConfig+0x48>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a47      	ldr	r2, [pc, #284]	@ (800701c <TIM_Base_SetConfig+0x150>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d007      	beq.n	8006f14 <TIM_Base_SetConfig+0x48>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a46      	ldr	r2, [pc, #280]	@ (8007020 <TIM_Base_SetConfig+0x154>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d003      	beq.n	8006f14 <TIM_Base_SetConfig+0x48>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a45      	ldr	r2, [pc, #276]	@ (8007024 <TIM_Base_SetConfig+0x158>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d108      	bne.n	8006f26 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a39      	ldr	r2, [pc, #228]	@ (8007010 <TIM_Base_SetConfig+0x144>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d023      	beq.n	8006f76 <TIM_Base_SetConfig+0xaa>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f34:	d01f      	beq.n	8006f76 <TIM_Base_SetConfig+0xaa>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a36      	ldr	r2, [pc, #216]	@ (8007014 <TIM_Base_SetConfig+0x148>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d01b      	beq.n	8006f76 <TIM_Base_SetConfig+0xaa>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a35      	ldr	r2, [pc, #212]	@ (8007018 <TIM_Base_SetConfig+0x14c>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d017      	beq.n	8006f76 <TIM_Base_SetConfig+0xaa>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a34      	ldr	r2, [pc, #208]	@ (800701c <TIM_Base_SetConfig+0x150>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d013      	beq.n	8006f76 <TIM_Base_SetConfig+0xaa>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a33      	ldr	r2, [pc, #204]	@ (8007020 <TIM_Base_SetConfig+0x154>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d00f      	beq.n	8006f76 <TIM_Base_SetConfig+0xaa>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a33      	ldr	r2, [pc, #204]	@ (8007028 <TIM_Base_SetConfig+0x15c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00b      	beq.n	8006f76 <TIM_Base_SetConfig+0xaa>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a32      	ldr	r2, [pc, #200]	@ (800702c <TIM_Base_SetConfig+0x160>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d007      	beq.n	8006f76 <TIM_Base_SetConfig+0xaa>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a31      	ldr	r2, [pc, #196]	@ (8007030 <TIM_Base_SetConfig+0x164>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d003      	beq.n	8006f76 <TIM_Base_SetConfig+0xaa>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a2c      	ldr	r2, [pc, #176]	@ (8007024 <TIM_Base_SetConfig+0x158>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d108      	bne.n	8006f88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a18      	ldr	r2, [pc, #96]	@ (8007010 <TIM_Base_SetConfig+0x144>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d013      	beq.n	8006fdc <TIM_Base_SetConfig+0x110>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8007020 <TIM_Base_SetConfig+0x154>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d00f      	beq.n	8006fdc <TIM_Base_SetConfig+0x110>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a1a      	ldr	r2, [pc, #104]	@ (8007028 <TIM_Base_SetConfig+0x15c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d00b      	beq.n	8006fdc <TIM_Base_SetConfig+0x110>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a19      	ldr	r2, [pc, #100]	@ (800702c <TIM_Base_SetConfig+0x160>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d007      	beq.n	8006fdc <TIM_Base_SetConfig+0x110>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a18      	ldr	r2, [pc, #96]	@ (8007030 <TIM_Base_SetConfig+0x164>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d003      	beq.n	8006fdc <TIM_Base_SetConfig+0x110>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a13      	ldr	r2, [pc, #76]	@ (8007024 <TIM_Base_SetConfig+0x158>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d103      	bne.n	8006fe4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	691a      	ldr	r2, [r3, #16]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d105      	bne.n	8007002 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f023 0201 	bic.w	r2, r3, #1
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	611a      	str	r2, [r3, #16]
  }
}
 8007002:	bf00      	nop
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	40012c00 	.word	0x40012c00
 8007014:	40000400 	.word	0x40000400
 8007018:	40000800 	.word	0x40000800
 800701c:	40000c00 	.word	0x40000c00
 8007020:	40013400 	.word	0x40013400
 8007024:	40015000 	.word	0x40015000
 8007028:	40014000 	.word	0x40014000
 800702c:	40014400 	.word	0x40014400
 8007030:	40014800 	.word	0x40014800

08007034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	f023 0201 	bic.w	r2, r3, #1
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800705e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	011b      	lsls	r3, r3, #4
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	4313      	orrs	r3, r2
 8007068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f023 030a 	bic.w	r3, r3, #10
 8007070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	4313      	orrs	r3, r2
 8007078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	621a      	str	r2, [r3, #32]
}
 8007086:	bf00      	nop
 8007088:	371c      	adds	r7, #28
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007092:	b480      	push	{r7}
 8007094:	b087      	sub	sp, #28
 8007096:	af00      	add	r7, sp, #0
 8007098:	60f8      	str	r0, [r7, #12]
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	f023 0210 	bic.w	r2, r3, #16
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80070bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	031b      	lsls	r3, r3, #12
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80070ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	011b      	lsls	r3, r3, #4
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	621a      	str	r2, [r3, #32]
}
 80070e6:	bf00      	nop
 80070e8:	371c      	adds	r7, #28
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b085      	sub	sp, #20
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007108:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800710c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	f043 0307 	orr.w	r3, r3, #7
 8007118:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	609a      	str	r2, [r3, #8]
}
 8007120:	bf00      	nop
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007146:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	021a      	lsls	r2, r3, #8
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	431a      	orrs	r2, r3
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	4313      	orrs	r3, r2
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	4313      	orrs	r3, r2
 8007158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	609a      	str	r2, [r3, #8]
}
 8007160:	bf00      	nop
 8007162:	371c      	adds	r7, #28
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800717c:	2b01      	cmp	r3, #1
 800717e:	d101      	bne.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007180:	2302      	movs	r3, #2
 8007182:	e074      	b.n	800726e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a34      	ldr	r2, [pc, #208]	@ (800727c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d009      	beq.n	80071c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a33      	ldr	r2, [pc, #204]	@ (8007280 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d004      	beq.n	80071c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a31      	ldr	r2, [pc, #196]	@ (8007284 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d108      	bne.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80071c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80071da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a21      	ldr	r2, [pc, #132]	@ (800727c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d022      	beq.n	8007242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007204:	d01d      	beq.n	8007242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a1f      	ldr	r2, [pc, #124]	@ (8007288 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d018      	beq.n	8007242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a1d      	ldr	r2, [pc, #116]	@ (800728c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d013      	beq.n	8007242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a1c      	ldr	r2, [pc, #112]	@ (8007290 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d00e      	beq.n	8007242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a15      	ldr	r2, [pc, #84]	@ (8007280 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d009      	beq.n	8007242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a18      	ldr	r2, [pc, #96]	@ (8007294 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d004      	beq.n	8007242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a11      	ldr	r2, [pc, #68]	@ (8007284 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d10c      	bne.n	800725c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007248:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	4313      	orrs	r3, r2
 8007252:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	40012c00 	.word	0x40012c00
 8007280:	40013400 	.word	0x40013400
 8007284:	40015000 	.word	0x40015000
 8007288:	40000400 	.word	0x40000400
 800728c:	40000800 	.word	0x40000800
 8007290:	40000c00 	.word	0x40000c00
 8007294:	40014000 	.word	0x40014000

08007298 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e042      	b.n	80073bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800733c:	2b00      	cmp	r3, #0
 800733e:	d106      	bne.n	800734e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7fb f903 	bl	8002554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2224      	movs	r2, #36	@ 0x24
 8007352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 0201 	bic.w	r2, r2, #1
 8007364:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fbb2 	bl	8007ad8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f8b3 	bl	80074e0 <UART_SetConfig>
 800737a:	4603      	mov	r3, r0
 800737c:	2b01      	cmp	r3, #1
 800737e:	d101      	bne.n	8007384 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e01b      	b.n	80073bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007392:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689a      	ldr	r2, [r3, #8]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0201 	orr.w	r2, r2, #1
 80073b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fc31 	bl	8007c1c <UART_CheckIdleState>
 80073ba:	4603      	mov	r3, r0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08a      	sub	sp, #40	@ 0x28
 80073c8:	af02      	add	r7, sp, #8
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	603b      	str	r3, [r7, #0]
 80073d0:	4613      	mov	r3, r2
 80073d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073da:	2b20      	cmp	r3, #32
 80073dc:	d17b      	bne.n	80074d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <HAL_UART_Transmit+0x26>
 80073e4:	88fb      	ldrh	r3, [r7, #6]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e074      	b.n	80074d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2221      	movs	r2, #33	@ 0x21
 80073fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073fe:	f7fb f9db 	bl	80027b8 <HAL_GetTick>
 8007402:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	88fa      	ldrh	r2, [r7, #6]
 8007408:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	88fa      	ldrh	r2, [r7, #6]
 8007410:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800741c:	d108      	bne.n	8007430 <HAL_UART_Transmit+0x6c>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d104      	bne.n	8007430 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007426:	2300      	movs	r3, #0
 8007428:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	61bb      	str	r3, [r7, #24]
 800742e:	e003      	b.n	8007438 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007434:	2300      	movs	r3, #0
 8007436:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007438:	e030      	b.n	800749c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2200      	movs	r2, #0
 8007442:	2180      	movs	r1, #128	@ 0x80
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 fc93 	bl	8007d70 <UART_WaitOnFlagUntilTimeout>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2220      	movs	r2, #32
 8007454:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e03d      	b.n	80074d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10b      	bne.n	800747a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007470:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	3302      	adds	r3, #2
 8007476:	61bb      	str	r3, [r7, #24]
 8007478:	e007      	b.n	800748a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	781a      	ldrb	r2, [r3, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	3301      	adds	r3, #1
 8007488:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007490:	b29b      	uxth	r3, r3
 8007492:	3b01      	subs	r3, #1
 8007494:	b29a      	uxth	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1c8      	bne.n	800743a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	2200      	movs	r2, #0
 80074b0:	2140      	movs	r1, #64	@ 0x40
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 fc5c 	bl	8007d70 <UART_WaitOnFlagUntilTimeout>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d005      	beq.n	80074ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e006      	b.n	80074d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2220      	movs	r2, #32
 80074ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	e000      	b.n	80074d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80074d6:	2302      	movs	r3, #2
  }
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3720      	adds	r7, #32
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074e4:	b08c      	sub	sp, #48	@ 0x30
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	431a      	orrs	r2, r3
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	431a      	orrs	r2, r3
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	4313      	orrs	r3, r2
 8007506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	4baa      	ldr	r3, [pc, #680]	@ (80077b8 <UART_SetConfig+0x2d8>)
 8007510:	4013      	ands	r3, r2
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	6812      	ldr	r2, [r2, #0]
 8007516:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007518:	430b      	orrs	r3, r1
 800751a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a9f      	ldr	r2, [pc, #636]	@ (80077bc <UART_SetConfig+0x2dc>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d004      	beq.n	800754c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007548:	4313      	orrs	r3, r2
 800754a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007556:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	6812      	ldr	r2, [r2, #0]
 800755e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007560:	430b      	orrs	r3, r1
 8007562:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756a:	f023 010f 	bic.w	r1, r3, #15
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a90      	ldr	r2, [pc, #576]	@ (80077c0 <UART_SetConfig+0x2e0>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d125      	bne.n	80075d0 <UART_SetConfig+0xf0>
 8007584:	4b8f      	ldr	r3, [pc, #572]	@ (80077c4 <UART_SetConfig+0x2e4>)
 8007586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	2b03      	cmp	r3, #3
 8007590:	d81a      	bhi.n	80075c8 <UART_SetConfig+0xe8>
 8007592:	a201      	add	r2, pc, #4	@ (adr r2, 8007598 <UART_SetConfig+0xb8>)
 8007594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007598:	080075a9 	.word	0x080075a9
 800759c:	080075b9 	.word	0x080075b9
 80075a0:	080075b1 	.word	0x080075b1
 80075a4:	080075c1 	.word	0x080075c1
 80075a8:	2301      	movs	r3, #1
 80075aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ae:	e116      	b.n	80077de <UART_SetConfig+0x2fe>
 80075b0:	2302      	movs	r3, #2
 80075b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075b6:	e112      	b.n	80077de <UART_SetConfig+0x2fe>
 80075b8:	2304      	movs	r3, #4
 80075ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075be:	e10e      	b.n	80077de <UART_SetConfig+0x2fe>
 80075c0:	2308      	movs	r3, #8
 80075c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075c6:	e10a      	b.n	80077de <UART_SetConfig+0x2fe>
 80075c8:	2310      	movs	r3, #16
 80075ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ce:	e106      	b.n	80077de <UART_SetConfig+0x2fe>
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a7c      	ldr	r2, [pc, #496]	@ (80077c8 <UART_SetConfig+0x2e8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d138      	bne.n	800764c <UART_SetConfig+0x16c>
 80075da:	4b7a      	ldr	r3, [pc, #488]	@ (80077c4 <UART_SetConfig+0x2e4>)
 80075dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e0:	f003 030c 	and.w	r3, r3, #12
 80075e4:	2b0c      	cmp	r3, #12
 80075e6:	d82d      	bhi.n	8007644 <UART_SetConfig+0x164>
 80075e8:	a201      	add	r2, pc, #4	@ (adr r2, 80075f0 <UART_SetConfig+0x110>)
 80075ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ee:	bf00      	nop
 80075f0:	08007625 	.word	0x08007625
 80075f4:	08007645 	.word	0x08007645
 80075f8:	08007645 	.word	0x08007645
 80075fc:	08007645 	.word	0x08007645
 8007600:	08007635 	.word	0x08007635
 8007604:	08007645 	.word	0x08007645
 8007608:	08007645 	.word	0x08007645
 800760c:	08007645 	.word	0x08007645
 8007610:	0800762d 	.word	0x0800762d
 8007614:	08007645 	.word	0x08007645
 8007618:	08007645 	.word	0x08007645
 800761c:	08007645 	.word	0x08007645
 8007620:	0800763d 	.word	0x0800763d
 8007624:	2300      	movs	r3, #0
 8007626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800762a:	e0d8      	b.n	80077de <UART_SetConfig+0x2fe>
 800762c:	2302      	movs	r3, #2
 800762e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007632:	e0d4      	b.n	80077de <UART_SetConfig+0x2fe>
 8007634:	2304      	movs	r3, #4
 8007636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800763a:	e0d0      	b.n	80077de <UART_SetConfig+0x2fe>
 800763c:	2308      	movs	r3, #8
 800763e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007642:	e0cc      	b.n	80077de <UART_SetConfig+0x2fe>
 8007644:	2310      	movs	r3, #16
 8007646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800764a:	e0c8      	b.n	80077de <UART_SetConfig+0x2fe>
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a5e      	ldr	r2, [pc, #376]	@ (80077cc <UART_SetConfig+0x2ec>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d125      	bne.n	80076a2 <UART_SetConfig+0x1c2>
 8007656:	4b5b      	ldr	r3, [pc, #364]	@ (80077c4 <UART_SetConfig+0x2e4>)
 8007658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800765c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007660:	2b30      	cmp	r3, #48	@ 0x30
 8007662:	d016      	beq.n	8007692 <UART_SetConfig+0x1b2>
 8007664:	2b30      	cmp	r3, #48	@ 0x30
 8007666:	d818      	bhi.n	800769a <UART_SetConfig+0x1ba>
 8007668:	2b20      	cmp	r3, #32
 800766a:	d00a      	beq.n	8007682 <UART_SetConfig+0x1a2>
 800766c:	2b20      	cmp	r3, #32
 800766e:	d814      	bhi.n	800769a <UART_SetConfig+0x1ba>
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <UART_SetConfig+0x19a>
 8007674:	2b10      	cmp	r3, #16
 8007676:	d008      	beq.n	800768a <UART_SetConfig+0x1aa>
 8007678:	e00f      	b.n	800769a <UART_SetConfig+0x1ba>
 800767a:	2300      	movs	r3, #0
 800767c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007680:	e0ad      	b.n	80077de <UART_SetConfig+0x2fe>
 8007682:	2302      	movs	r3, #2
 8007684:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007688:	e0a9      	b.n	80077de <UART_SetConfig+0x2fe>
 800768a:	2304      	movs	r3, #4
 800768c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007690:	e0a5      	b.n	80077de <UART_SetConfig+0x2fe>
 8007692:	2308      	movs	r3, #8
 8007694:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007698:	e0a1      	b.n	80077de <UART_SetConfig+0x2fe>
 800769a:	2310      	movs	r3, #16
 800769c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076a0:	e09d      	b.n	80077de <UART_SetConfig+0x2fe>
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a4a      	ldr	r2, [pc, #296]	@ (80077d0 <UART_SetConfig+0x2f0>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d125      	bne.n	80076f8 <UART_SetConfig+0x218>
 80076ac:	4b45      	ldr	r3, [pc, #276]	@ (80077c4 <UART_SetConfig+0x2e4>)
 80076ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80076b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80076b8:	d016      	beq.n	80076e8 <UART_SetConfig+0x208>
 80076ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80076bc:	d818      	bhi.n	80076f0 <UART_SetConfig+0x210>
 80076be:	2b80      	cmp	r3, #128	@ 0x80
 80076c0:	d00a      	beq.n	80076d8 <UART_SetConfig+0x1f8>
 80076c2:	2b80      	cmp	r3, #128	@ 0x80
 80076c4:	d814      	bhi.n	80076f0 <UART_SetConfig+0x210>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <UART_SetConfig+0x1f0>
 80076ca:	2b40      	cmp	r3, #64	@ 0x40
 80076cc:	d008      	beq.n	80076e0 <UART_SetConfig+0x200>
 80076ce:	e00f      	b.n	80076f0 <UART_SetConfig+0x210>
 80076d0:	2300      	movs	r3, #0
 80076d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076d6:	e082      	b.n	80077de <UART_SetConfig+0x2fe>
 80076d8:	2302      	movs	r3, #2
 80076da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076de:	e07e      	b.n	80077de <UART_SetConfig+0x2fe>
 80076e0:	2304      	movs	r3, #4
 80076e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076e6:	e07a      	b.n	80077de <UART_SetConfig+0x2fe>
 80076e8:	2308      	movs	r3, #8
 80076ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ee:	e076      	b.n	80077de <UART_SetConfig+0x2fe>
 80076f0:	2310      	movs	r3, #16
 80076f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076f6:	e072      	b.n	80077de <UART_SetConfig+0x2fe>
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a35      	ldr	r2, [pc, #212]	@ (80077d4 <UART_SetConfig+0x2f4>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d12a      	bne.n	8007758 <UART_SetConfig+0x278>
 8007702:	4b30      	ldr	r3, [pc, #192]	@ (80077c4 <UART_SetConfig+0x2e4>)
 8007704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007708:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800770c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007710:	d01a      	beq.n	8007748 <UART_SetConfig+0x268>
 8007712:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007716:	d81b      	bhi.n	8007750 <UART_SetConfig+0x270>
 8007718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800771c:	d00c      	beq.n	8007738 <UART_SetConfig+0x258>
 800771e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007722:	d815      	bhi.n	8007750 <UART_SetConfig+0x270>
 8007724:	2b00      	cmp	r3, #0
 8007726:	d003      	beq.n	8007730 <UART_SetConfig+0x250>
 8007728:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800772c:	d008      	beq.n	8007740 <UART_SetConfig+0x260>
 800772e:	e00f      	b.n	8007750 <UART_SetConfig+0x270>
 8007730:	2300      	movs	r3, #0
 8007732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007736:	e052      	b.n	80077de <UART_SetConfig+0x2fe>
 8007738:	2302      	movs	r3, #2
 800773a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800773e:	e04e      	b.n	80077de <UART_SetConfig+0x2fe>
 8007740:	2304      	movs	r3, #4
 8007742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007746:	e04a      	b.n	80077de <UART_SetConfig+0x2fe>
 8007748:	2308      	movs	r3, #8
 800774a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800774e:	e046      	b.n	80077de <UART_SetConfig+0x2fe>
 8007750:	2310      	movs	r3, #16
 8007752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007756:	e042      	b.n	80077de <UART_SetConfig+0x2fe>
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a17      	ldr	r2, [pc, #92]	@ (80077bc <UART_SetConfig+0x2dc>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d13a      	bne.n	80077d8 <UART_SetConfig+0x2f8>
 8007762:	4b18      	ldr	r3, [pc, #96]	@ (80077c4 <UART_SetConfig+0x2e4>)
 8007764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007768:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800776c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007770:	d01a      	beq.n	80077a8 <UART_SetConfig+0x2c8>
 8007772:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007776:	d81b      	bhi.n	80077b0 <UART_SetConfig+0x2d0>
 8007778:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800777c:	d00c      	beq.n	8007798 <UART_SetConfig+0x2b8>
 800777e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007782:	d815      	bhi.n	80077b0 <UART_SetConfig+0x2d0>
 8007784:	2b00      	cmp	r3, #0
 8007786:	d003      	beq.n	8007790 <UART_SetConfig+0x2b0>
 8007788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800778c:	d008      	beq.n	80077a0 <UART_SetConfig+0x2c0>
 800778e:	e00f      	b.n	80077b0 <UART_SetConfig+0x2d0>
 8007790:	2300      	movs	r3, #0
 8007792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007796:	e022      	b.n	80077de <UART_SetConfig+0x2fe>
 8007798:	2302      	movs	r3, #2
 800779a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800779e:	e01e      	b.n	80077de <UART_SetConfig+0x2fe>
 80077a0:	2304      	movs	r3, #4
 80077a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077a6:	e01a      	b.n	80077de <UART_SetConfig+0x2fe>
 80077a8:	2308      	movs	r3, #8
 80077aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ae:	e016      	b.n	80077de <UART_SetConfig+0x2fe>
 80077b0:	2310      	movs	r3, #16
 80077b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077b6:	e012      	b.n	80077de <UART_SetConfig+0x2fe>
 80077b8:	cfff69f3 	.word	0xcfff69f3
 80077bc:	40008000 	.word	0x40008000
 80077c0:	40013800 	.word	0x40013800
 80077c4:	40021000 	.word	0x40021000
 80077c8:	40004400 	.word	0x40004400
 80077cc:	40004800 	.word	0x40004800
 80077d0:	40004c00 	.word	0x40004c00
 80077d4:	40005000 	.word	0x40005000
 80077d8:	2310      	movs	r3, #16
 80077da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4aae      	ldr	r2, [pc, #696]	@ (8007a9c <UART_SetConfig+0x5bc>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	f040 8097 	bne.w	8007918 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80077ee:	2b08      	cmp	r3, #8
 80077f0:	d823      	bhi.n	800783a <UART_SetConfig+0x35a>
 80077f2:	a201      	add	r2, pc, #4	@ (adr r2, 80077f8 <UART_SetConfig+0x318>)
 80077f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f8:	0800781d 	.word	0x0800781d
 80077fc:	0800783b 	.word	0x0800783b
 8007800:	08007825 	.word	0x08007825
 8007804:	0800783b 	.word	0x0800783b
 8007808:	0800782b 	.word	0x0800782b
 800780c:	0800783b 	.word	0x0800783b
 8007810:	0800783b 	.word	0x0800783b
 8007814:	0800783b 	.word	0x0800783b
 8007818:	08007833 	.word	0x08007833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800781c:	f7fd fd62 	bl	80052e4 <HAL_RCC_GetPCLK1Freq>
 8007820:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007822:	e010      	b.n	8007846 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007824:	4b9e      	ldr	r3, [pc, #632]	@ (8007aa0 <UART_SetConfig+0x5c0>)
 8007826:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007828:	e00d      	b.n	8007846 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800782a:	f7fd fced 	bl	8005208 <HAL_RCC_GetSysClockFreq>
 800782e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007830:	e009      	b.n	8007846 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007832:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007836:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007838:	e005      	b.n	8007846 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007844:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 8130 	beq.w	8007aae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007852:	4a94      	ldr	r2, [pc, #592]	@ (8007aa4 <UART_SetConfig+0x5c4>)
 8007854:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007858:	461a      	mov	r2, r3
 800785a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007860:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	4613      	mov	r3, r2
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	4413      	add	r3, r2
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	429a      	cmp	r2, r3
 8007870:	d305      	bcc.n	800787e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007878:	69ba      	ldr	r2, [r7, #24]
 800787a:	429a      	cmp	r2, r3
 800787c:	d903      	bls.n	8007886 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007884:	e113      	b.n	8007aae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007888:	2200      	movs	r2, #0
 800788a:	60bb      	str	r3, [r7, #8]
 800788c:	60fa      	str	r2, [r7, #12]
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007892:	4a84      	ldr	r2, [pc, #528]	@ (8007aa4 <UART_SetConfig+0x5c4>)
 8007894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007898:	b29b      	uxth	r3, r3
 800789a:	2200      	movs	r2, #0
 800789c:	603b      	str	r3, [r7, #0]
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078a8:	f7f9 f8b0 	bl	8000a0c <__aeabi_uldivmod>
 80078ac:	4602      	mov	r2, r0
 80078ae:	460b      	mov	r3, r1
 80078b0:	4610      	mov	r0, r2
 80078b2:	4619      	mov	r1, r3
 80078b4:	f04f 0200 	mov.w	r2, #0
 80078b8:	f04f 0300 	mov.w	r3, #0
 80078bc:	020b      	lsls	r3, r1, #8
 80078be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078c2:	0202      	lsls	r2, r0, #8
 80078c4:	6979      	ldr	r1, [r7, #20]
 80078c6:	6849      	ldr	r1, [r1, #4]
 80078c8:	0849      	lsrs	r1, r1, #1
 80078ca:	2000      	movs	r0, #0
 80078cc:	460c      	mov	r4, r1
 80078ce:	4605      	mov	r5, r0
 80078d0:	eb12 0804 	adds.w	r8, r2, r4
 80078d4:	eb43 0905 	adc.w	r9, r3, r5
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	469a      	mov	sl, r3
 80078e0:	4693      	mov	fp, r2
 80078e2:	4652      	mov	r2, sl
 80078e4:	465b      	mov	r3, fp
 80078e6:	4640      	mov	r0, r8
 80078e8:	4649      	mov	r1, r9
 80078ea:	f7f9 f88f 	bl	8000a0c <__aeabi_uldivmod>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4613      	mov	r3, r2
 80078f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078fc:	d308      	bcc.n	8007910 <UART_SetConfig+0x430>
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007904:	d204      	bcs.n	8007910 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6a3a      	ldr	r2, [r7, #32]
 800790c:	60da      	str	r2, [r3, #12]
 800790e:	e0ce      	b.n	8007aae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007916:	e0ca      	b.n	8007aae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	69db      	ldr	r3, [r3, #28]
 800791c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007920:	d166      	bne.n	80079f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007922:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007926:	2b08      	cmp	r3, #8
 8007928:	d827      	bhi.n	800797a <UART_SetConfig+0x49a>
 800792a:	a201      	add	r2, pc, #4	@ (adr r2, 8007930 <UART_SetConfig+0x450>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	08007955 	.word	0x08007955
 8007934:	0800795d 	.word	0x0800795d
 8007938:	08007965 	.word	0x08007965
 800793c:	0800797b 	.word	0x0800797b
 8007940:	0800796b 	.word	0x0800796b
 8007944:	0800797b 	.word	0x0800797b
 8007948:	0800797b 	.word	0x0800797b
 800794c:	0800797b 	.word	0x0800797b
 8007950:	08007973 	.word	0x08007973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007954:	f7fd fcc6 	bl	80052e4 <HAL_RCC_GetPCLK1Freq>
 8007958:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800795a:	e014      	b.n	8007986 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800795c:	f7fd fcd8 	bl	8005310 <HAL_RCC_GetPCLK2Freq>
 8007960:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007962:	e010      	b.n	8007986 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007964:	4b4e      	ldr	r3, [pc, #312]	@ (8007aa0 <UART_SetConfig+0x5c0>)
 8007966:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007968:	e00d      	b.n	8007986 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800796a:	f7fd fc4d 	bl	8005208 <HAL_RCC_GetSysClockFreq>
 800796e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007970:	e009      	b.n	8007986 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007976:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007978:	e005      	b.n	8007986 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007984:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 8090 	beq.w	8007aae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007992:	4a44      	ldr	r2, [pc, #272]	@ (8007aa4 <UART_SetConfig+0x5c4>)
 8007994:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007998:	461a      	mov	r2, r3
 800799a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799c:	fbb3 f3f2 	udiv	r3, r3, r2
 80079a0:	005a      	lsls	r2, r3, #1
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	085b      	lsrs	r3, r3, #1
 80079a8:	441a      	add	r2, r3
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	2b0f      	cmp	r3, #15
 80079b8:	d916      	bls.n	80079e8 <UART_SetConfig+0x508>
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079c0:	d212      	bcs.n	80079e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	f023 030f 	bic.w	r3, r3, #15
 80079ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	085b      	lsrs	r3, r3, #1
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	8bfb      	ldrh	r3, [r7, #30]
 80079da:	4313      	orrs	r3, r2
 80079dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	8bfa      	ldrh	r2, [r7, #30]
 80079e4:	60da      	str	r2, [r3, #12]
 80079e6:	e062      	b.n	8007aae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80079ee:	e05e      	b.n	8007aae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80079f4:	2b08      	cmp	r3, #8
 80079f6:	d828      	bhi.n	8007a4a <UART_SetConfig+0x56a>
 80079f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007a00 <UART_SetConfig+0x520>)
 80079fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fe:	bf00      	nop
 8007a00:	08007a25 	.word	0x08007a25
 8007a04:	08007a2d 	.word	0x08007a2d
 8007a08:	08007a35 	.word	0x08007a35
 8007a0c:	08007a4b 	.word	0x08007a4b
 8007a10:	08007a3b 	.word	0x08007a3b
 8007a14:	08007a4b 	.word	0x08007a4b
 8007a18:	08007a4b 	.word	0x08007a4b
 8007a1c:	08007a4b 	.word	0x08007a4b
 8007a20:	08007a43 	.word	0x08007a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a24:	f7fd fc5e 	bl	80052e4 <HAL_RCC_GetPCLK1Freq>
 8007a28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a2a:	e014      	b.n	8007a56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a2c:	f7fd fc70 	bl	8005310 <HAL_RCC_GetPCLK2Freq>
 8007a30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a32:	e010      	b.n	8007a56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a34:	4b1a      	ldr	r3, [pc, #104]	@ (8007aa0 <UART_SetConfig+0x5c0>)
 8007a36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a38:	e00d      	b.n	8007a56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a3a:	f7fd fbe5 	bl	8005208 <HAL_RCC_GetSysClockFreq>
 8007a3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a40:	e009      	b.n	8007a56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a48:	e005      	b.n	8007a56 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a54:	bf00      	nop
    }

    if (pclk != 0U)
 8007a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d028      	beq.n	8007aae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a60:	4a10      	ldr	r2, [pc, #64]	@ (8007aa4 <UART_SetConfig+0x5c4>)
 8007a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a66:	461a      	mov	r2, r3
 8007a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	085b      	lsrs	r3, r3, #1
 8007a74:	441a      	add	r2, r3
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a80:	6a3b      	ldr	r3, [r7, #32]
 8007a82:	2b0f      	cmp	r3, #15
 8007a84:	d910      	bls.n	8007aa8 <UART_SetConfig+0x5c8>
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a8c:	d20c      	bcs.n	8007aa8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60da      	str	r2, [r3, #12]
 8007a98:	e009      	b.n	8007aae <UART_SetConfig+0x5ce>
 8007a9a:	bf00      	nop
 8007a9c:	40008000 	.word	0x40008000
 8007aa0:	00f42400 	.word	0x00f42400
 8007aa4:	0800af40 	.word	0x0800af40
      }
      else
      {
        ret = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007aca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3730      	adds	r7, #48	@ 0x30
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007ad8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae4:	f003 0308 	and.w	r3, r3, #8
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00a      	beq.n	8007b02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b28:	f003 0302 	and.w	r3, r3, #2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00a      	beq.n	8007b46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4a:	f003 0304 	and.w	r3, r3, #4
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b6c:	f003 0310 	and.w	r3, r3, #16
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00a      	beq.n	8007b8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8e:	f003 0320 	and.w	r3, r3, #32
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00a      	beq.n	8007bac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01a      	beq.n	8007bee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bd6:	d10a      	bne.n	8007bee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	605a      	str	r2, [r3, #4]
  }
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b098      	sub	sp, #96	@ 0x60
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c2c:	f7fa fdc4 	bl	80027b8 <HAL_GetTick>
 8007c30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0308 	and.w	r3, r3, #8
 8007c3c:	2b08      	cmp	r3, #8
 8007c3e:	d12f      	bne.n	8007ca0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f88e 	bl	8007d70 <UART_WaitOnFlagUntilTimeout>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d022      	beq.n	8007ca0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	461a      	mov	r2, r3
 8007c76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c78:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e6      	bne.n	8007c5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e063      	b.n	8007d68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0304 	and.w	r3, r3, #4
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	d149      	bne.n	8007d42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f857 	bl	8007d70 <UART_WaitOnFlagUntilTimeout>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d03c      	beq.n	8007d42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	623b      	str	r3, [r7, #32]
   return(result);
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ce6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ce8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e6      	bne.n	8007cc8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3308      	adds	r3, #8
 8007d00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	e853 3f00 	ldrex	r3, [r3]
 8007d08:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f023 0301 	bic.w	r3, r3, #1
 8007d10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3308      	adds	r3, #8
 8007d18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d1a:	61fa      	str	r2, [r7, #28]
 8007d1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1e:	69b9      	ldr	r1, [r7, #24]
 8007d20:	69fa      	ldr	r2, [r7, #28]
 8007d22:	e841 2300 	strex	r3, r2, [r1]
 8007d26:	617b      	str	r3, [r7, #20]
   return(result);
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1e5      	bne.n	8007cfa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e012      	b.n	8007d68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3758      	adds	r7, #88	@ 0x58
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	603b      	str	r3, [r7, #0]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d80:	e04f      	b.n	8007e22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d88:	d04b      	beq.n	8007e22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d8a:	f7fa fd15 	bl	80027b8 <HAL_GetTick>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d302      	bcc.n	8007da0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e04e      	b.n	8007e42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0304 	and.w	r3, r3, #4
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d037      	beq.n	8007e22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	2b80      	cmp	r3, #128	@ 0x80
 8007db6:	d034      	beq.n	8007e22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2b40      	cmp	r3, #64	@ 0x40
 8007dbc:	d031      	beq.n	8007e22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	69db      	ldr	r3, [r3, #28]
 8007dc4:	f003 0308 	and.w	r3, r3, #8
 8007dc8:	2b08      	cmp	r3, #8
 8007dca:	d110      	bne.n	8007dee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2208      	movs	r2, #8
 8007dd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f000 f838 	bl	8007e4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2208      	movs	r2, #8
 8007dde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e029      	b.n	8007e42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007df8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dfc:	d111      	bne.n	8007e22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 f81e 	bl	8007e4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e00f      	b.n	8007e42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	69da      	ldr	r2, [r3, #28]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	bf0c      	ite	eq
 8007e32:	2301      	moveq	r3, #1
 8007e34:	2300      	movne	r3, #0
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	461a      	mov	r2, r3
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d0a0      	beq.n	8007d82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b095      	sub	sp, #84	@ 0x54
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e5a:	e853 3f00 	ldrex	r3, [r3]
 8007e5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e70:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e72:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e78:	e841 2300 	strex	r3, r2, [r1]
 8007e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e6      	bne.n	8007e52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3308      	adds	r3, #8
 8007e8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e9a:	f023 0301 	bic.w	r3, r3, #1
 8007e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3308      	adds	r3, #8
 8007ea6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ea8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007eae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007eb0:	e841 2300 	strex	r3, r2, [r1]
 8007eb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e3      	bne.n	8007e84 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d118      	bne.n	8007ef6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f023 0310 	bic.w	r3, r3, #16
 8007ed8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ee2:	61bb      	str	r3, [r7, #24]
 8007ee4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	6979      	ldr	r1, [r7, #20]
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	e841 2300 	strex	r3, r2, [r1]
 8007eee:	613b      	str	r3, [r7, #16]
   return(result);
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e6      	bne.n	8007ec4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2220      	movs	r2, #32
 8007efa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f0a:	bf00      	nop
 8007f0c:	3754      	adds	r7, #84	@ 0x54
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b085      	sub	sp, #20
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d101      	bne.n	8007f2c <HAL_UARTEx_DisableFifoMode+0x16>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	e027      	b.n	8007f7c <HAL_UARTEx_DisableFifoMode+0x66>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2224      	movs	r2, #36	@ 0x24
 8007f38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f022 0201 	bic.w	r2, r2, #1
 8007f52:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e02d      	b.n	8007ffc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2224      	movs	r2, #36	@ 0x24
 8007fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f022 0201 	bic.w	r2, r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f84f 	bl	8008080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2220      	movs	r2, #32
 8007fee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008014:	2b01      	cmp	r3, #1
 8008016:	d101      	bne.n	800801c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008018:	2302      	movs	r3, #2
 800801a:	e02d      	b.n	8008078 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2224      	movs	r2, #36	@ 0x24
 8008028:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f022 0201 	bic.w	r2, r2, #1
 8008042:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	430a      	orrs	r2, r1
 8008056:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f811 	bl	8008080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2220      	movs	r2, #32
 800806a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800808c:	2b00      	cmp	r3, #0
 800808e:	d108      	bne.n	80080a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080a0:	e031      	b.n	8008106 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080a2:	2308      	movs	r3, #8
 80080a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080a6:	2308      	movs	r3, #8
 80080a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	0e5b      	lsrs	r3, r3, #25
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	f003 0307 	and.w	r3, r3, #7
 80080b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	0f5b      	lsrs	r3, r3, #29
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	f003 0307 	and.w	r3, r3, #7
 80080c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080ca:	7bbb      	ldrb	r3, [r7, #14]
 80080cc:	7b3a      	ldrb	r2, [r7, #12]
 80080ce:	4911      	ldr	r1, [pc, #68]	@ (8008114 <UARTEx_SetNbDataToProcess+0x94>)
 80080d0:	5c8a      	ldrb	r2, [r1, r2]
 80080d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080d6:	7b3a      	ldrb	r2, [r7, #12]
 80080d8:	490f      	ldr	r1, [pc, #60]	@ (8008118 <UARTEx_SetNbDataToProcess+0x98>)
 80080da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
 80080ea:	7b7a      	ldrb	r2, [r7, #13]
 80080ec:	4909      	ldr	r1, [pc, #36]	@ (8008114 <UARTEx_SetNbDataToProcess+0x94>)
 80080ee:	5c8a      	ldrb	r2, [r1, r2]
 80080f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080f4:	7b7a      	ldrb	r2, [r7, #13]
 80080f6:	4908      	ldr	r1, [pc, #32]	@ (8008118 <UARTEx_SetNbDataToProcess+0x98>)
 80080f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80080fe:	b29a      	uxth	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008106:	bf00      	nop
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	0800af58 	.word	0x0800af58
 8008118:	0800af60 	.word	0x0800af60

0800811c <__NVIC_SetPriority>:
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	4603      	mov	r3, r0
 8008124:	6039      	str	r1, [r7, #0]
 8008126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800812c:	2b00      	cmp	r3, #0
 800812e:	db0a      	blt.n	8008146 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	b2da      	uxtb	r2, r3
 8008134:	490c      	ldr	r1, [pc, #48]	@ (8008168 <__NVIC_SetPriority+0x4c>)
 8008136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800813a:	0112      	lsls	r2, r2, #4
 800813c:	b2d2      	uxtb	r2, r2
 800813e:	440b      	add	r3, r1
 8008140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008144:	e00a      	b.n	800815c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	b2da      	uxtb	r2, r3
 800814a:	4908      	ldr	r1, [pc, #32]	@ (800816c <__NVIC_SetPriority+0x50>)
 800814c:	79fb      	ldrb	r3, [r7, #7]
 800814e:	f003 030f 	and.w	r3, r3, #15
 8008152:	3b04      	subs	r3, #4
 8008154:	0112      	lsls	r2, r2, #4
 8008156:	b2d2      	uxtb	r2, r2
 8008158:	440b      	add	r3, r1
 800815a:	761a      	strb	r2, [r3, #24]
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	e000e100 	.word	0xe000e100
 800816c:	e000ed00 	.word	0xe000ed00

08008170 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008174:	4b05      	ldr	r3, [pc, #20]	@ (800818c <SysTick_Handler+0x1c>)
 8008176:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008178:	f001 fcf6 	bl	8009b68 <xTaskGetSchedulerState>
 800817c:	4603      	mov	r3, r0
 800817e:	2b01      	cmp	r3, #1
 8008180:	d001      	beq.n	8008186 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008182:	f002 faf1 	bl	800a768 <xPortSysTickHandler>
  }
}
 8008186:	bf00      	nop
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	e000e010 	.word	0xe000e010

08008190 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008190:	b580      	push	{r7, lr}
 8008192:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008194:	2100      	movs	r1, #0
 8008196:	f06f 0004 	mvn.w	r0, #4
 800819a:	f7ff ffbf 	bl	800811c <__NVIC_SetPriority>
#endif
}
 800819e:	bf00      	nop
 80081a0:	bd80      	pop	{r7, pc}
	...

080081a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081aa:	f3ef 8305 	mrs	r3, IPSR
 80081ae:	603b      	str	r3, [r7, #0]
  return(result);
 80081b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80081b6:	f06f 0305 	mvn.w	r3, #5
 80081ba:	607b      	str	r3, [r7, #4]
 80081bc:	e00c      	b.n	80081d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081be:	4b0a      	ldr	r3, [pc, #40]	@ (80081e8 <osKernelInitialize+0x44>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d105      	bne.n	80081d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80081c6:	4b08      	ldr	r3, [pc, #32]	@ (80081e8 <osKernelInitialize+0x44>)
 80081c8:	2201      	movs	r2, #1
 80081ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	607b      	str	r3, [r7, #4]
 80081d0:	e002      	b.n	80081d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80081d2:	f04f 33ff 	mov.w	r3, #4294967295
 80081d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80081d8:	687b      	ldr	r3, [r7, #4]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	20000584 	.word	0x20000584

080081ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081f2:	f3ef 8305 	mrs	r3, IPSR
 80081f6:	603b      	str	r3, [r7, #0]
  return(result);
 80081f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d003      	beq.n	8008206 <osKernelStart+0x1a>
    stat = osErrorISR;
 80081fe:	f06f 0305 	mvn.w	r3, #5
 8008202:	607b      	str	r3, [r7, #4]
 8008204:	e010      	b.n	8008228 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008206:	4b0b      	ldr	r3, [pc, #44]	@ (8008234 <osKernelStart+0x48>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d109      	bne.n	8008222 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800820e:	f7ff ffbf 	bl	8008190 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008212:	4b08      	ldr	r3, [pc, #32]	@ (8008234 <osKernelStart+0x48>)
 8008214:	2202      	movs	r2, #2
 8008216:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008218:	f001 f866 	bl	80092e8 <vTaskStartScheduler>
      stat = osOK;
 800821c:	2300      	movs	r3, #0
 800821e:	607b      	str	r3, [r7, #4]
 8008220:	e002      	b.n	8008228 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008222:	f04f 33ff 	mov.w	r3, #4294967295
 8008226:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008228:	687b      	ldr	r3, [r7, #4]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	20000584 	.word	0x20000584

08008238 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800823e:	f3ef 8305 	mrs	r3, IPSR
 8008242:	603b      	str	r3, [r7, #0]
  return(result);
 8008244:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008246:	2b00      	cmp	r3, #0
 8008248:	d003      	beq.n	8008252 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800824a:	f001 f96b 	bl	8009524 <xTaskGetTickCountFromISR>
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	e002      	b.n	8008258 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8008252:	f001 f957 	bl	8009504 <xTaskGetTickCount>
 8008256:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008258:	687b      	ldr	r3, [r7, #4]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008262:	b580      	push	{r7, lr}
 8008264:	b08e      	sub	sp, #56	@ 0x38
 8008266:	af04      	add	r7, sp, #16
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800826e:	2300      	movs	r3, #0
 8008270:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008272:	f3ef 8305 	mrs	r3, IPSR
 8008276:	617b      	str	r3, [r7, #20]
  return(result);
 8008278:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800827a:	2b00      	cmp	r3, #0
 800827c:	d17e      	bne.n	800837c <osThreadNew+0x11a>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d07b      	beq.n	800837c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008284:	2380      	movs	r3, #128	@ 0x80
 8008286:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008288:	2318      	movs	r3, #24
 800828a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800828c:	2300      	movs	r3, #0
 800828e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008290:	f04f 33ff 	mov.w	r3, #4294967295
 8008294:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d045      	beq.n	8008328 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <osThreadNew+0x48>
        name = attr->name;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d002      	beq.n	80082b8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d008      	beq.n	80082d0 <osThreadNew+0x6e>
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	2b38      	cmp	r3, #56	@ 0x38
 80082c2:	d805      	bhi.n	80082d0 <osThreadNew+0x6e>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <osThreadNew+0x72>
        return (NULL);
 80082d0:	2300      	movs	r3, #0
 80082d2:	e054      	b.n	800837e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	695b      	ldr	r3, [r3, #20]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	089b      	lsrs	r3, r3, #2
 80082e2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00e      	beq.n	800830a <osThreadNew+0xa8>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	2ba7      	cmp	r3, #167	@ 0xa7
 80082f2:	d90a      	bls.n	800830a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d006      	beq.n	800830a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d002      	beq.n	800830a <osThreadNew+0xa8>
        mem = 1;
 8008304:	2301      	movs	r3, #1
 8008306:	61bb      	str	r3, [r7, #24]
 8008308:	e010      	b.n	800832c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10c      	bne.n	800832c <osThreadNew+0xca>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d108      	bne.n	800832c <osThreadNew+0xca>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d104      	bne.n	800832c <osThreadNew+0xca>
          mem = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	61bb      	str	r3, [r7, #24]
 8008326:	e001      	b.n	800832c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008328:	2300      	movs	r3, #0
 800832a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d110      	bne.n	8008354 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800833a:	9202      	str	r2, [sp, #8]
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	6a3a      	ldr	r2, [r7, #32]
 8008346:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 fde9 	bl	8008f20 <xTaskCreateStatic>
 800834e:	4603      	mov	r3, r0
 8008350:	613b      	str	r3, [r7, #16]
 8008352:	e013      	b.n	800837c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d110      	bne.n	800837c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	b29a      	uxth	r2, r3
 800835e:	f107 0310 	add.w	r3, r7, #16
 8008362:	9301      	str	r3, [sp, #4]
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 fe37 	bl	8008fe0 <xTaskCreate>
 8008372:	4603      	mov	r3, r0
 8008374:	2b01      	cmp	r3, #1
 8008376:	d001      	beq.n	800837c <osThreadNew+0x11a>
            hTask = NULL;
 8008378:	2300      	movs	r3, #0
 800837a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800837c:	693b      	ldr	r3, [r7, #16]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3728      	adds	r7, #40	@ 0x28
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800838e:	f3ef 8305 	mrs	r3, IPSR
 8008392:	60bb      	str	r3, [r7, #8]
  return(result);
 8008394:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <osDelay+0x1c>
    stat = osErrorISR;
 800839a:	f06f 0305 	mvn.w	r3, #5
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	e007      	b.n	80083b2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d002      	beq.n	80083b2 <osDelay+0x2c>
      vTaskDelay(ticks);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 ff65 	bl	800927c <vTaskDelay>
    }
  }

  return (stat);
 80083b2:	68fb      	ldr	r3, [r7, #12]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4a07      	ldr	r2, [pc, #28]	@ (80083e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80083cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	4a06      	ldr	r2, [pc, #24]	@ (80083ec <vApplicationGetIdleTaskMemory+0x30>)
 80083d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2280      	movs	r2, #128	@ 0x80
 80083d8:	601a      	str	r2, [r3, #0]
}
 80083da:	bf00      	nop
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	20000588 	.word	0x20000588
 80083ec:	20000630 	.word	0x20000630

080083f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4a07      	ldr	r2, [pc, #28]	@ (800841c <vApplicationGetTimerTaskMemory+0x2c>)
 8008400:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	4a06      	ldr	r2, [pc, #24]	@ (8008420 <vApplicationGetTimerTaskMemory+0x30>)
 8008406:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800840e:	601a      	str	r2, [r3, #0]
}
 8008410:	bf00      	nop
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	20000830 	.word	0x20000830
 8008420:	200008d8 	.word	0x200008d8

08008424 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f103 0208 	add.w	r2, r3, #8
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f04f 32ff 	mov.w	r2, #4294967295
 800843c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f103 0208 	add.w	r2, r3, #8
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f103 0208 	add.w	r2, r3, #8
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008472:	bf00      	nop
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800847e:	b480      	push	{r7}
 8008480:	b085      	sub	sp, #20
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	683a      	ldr	r2, [r7, #0]
 80084a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	1c5a      	adds	r2, r3, #1
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	601a      	str	r2, [r3, #0]
}
 80084ba:	bf00      	nop
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084c6:	b480      	push	{r7}
 80084c8:	b085      	sub	sp, #20
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084dc:	d103      	bne.n	80084e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	e00c      	b.n	8008500 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	3308      	adds	r3, #8
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	e002      	b.n	80084f4 <vListInsert+0x2e>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d2f6      	bcs.n	80084ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	1c5a      	adds	r2, r3, #1
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	601a      	str	r2, [r3, #0]
}
 800852c:	bf00      	nop
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	6892      	ldr	r2, [r2, #8]
 800854e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	6852      	ldr	r2, [r2, #4]
 8008558:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	429a      	cmp	r2, r3
 8008562:	d103      	bne.n	800856c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	689a      	ldr	r2, [r3, #8]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	1e5a      	subs	r2, r3, #1
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10b      	bne.n	80085b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80085b2:	bf00      	nop
 80085b4:	bf00      	nop
 80085b6:	e7fd      	b.n	80085b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80085b8:	f002 f846 	bl	800a648 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085c4:	68f9      	ldr	r1, [r7, #12]
 80085c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80085c8:	fb01 f303 	mul.w	r3, r1, r3
 80085cc:	441a      	add	r2, r3
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085e8:	3b01      	subs	r3, #1
 80085ea:	68f9      	ldr	r1, [r7, #12]
 80085ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80085ee:	fb01 f303 	mul.w	r3, r1, r3
 80085f2:	441a      	add	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	22ff      	movs	r2, #255	@ 0xff
 80085fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	22ff      	movs	r2, #255	@ 0xff
 8008604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d109      	bne.n	8008622 <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00f      	beq.n	8008636 <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	3310      	adds	r3, #16
 800861a:	4618      	mov	r0, r3
 800861c:	f001 f8e4 	bl	80097e8 <xTaskRemoveFromEventList>
 8008620:	e009      	b.n	8008636 <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	3310      	adds	r3, #16
 8008626:	4618      	mov	r0, r3
 8008628:	f7ff fefc 	bl	8008424 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	3324      	adds	r3, #36	@ 0x24
 8008630:	4618      	mov	r0, r3
 8008632:	f7ff fef7 	bl	8008424 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008636:	f002 f839 	bl	800a6ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800863a:	2301      	movs	r3, #1
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008644:	b580      	push	{r7, lr}
 8008646:	b08e      	sub	sp, #56	@ 0x38
 8008648:	af02      	add	r7, sp, #8
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
 8008650:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10b      	bne.n	8008670 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800866a:	bf00      	nop
 800866c:	bf00      	nop
 800866e:	e7fd      	b.n	800866c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10b      	bne.n	800868e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008688:	bf00      	nop
 800868a:	bf00      	nop
 800868c:	e7fd      	b.n	800868a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <xQueueGenericCreateStatic+0x56>
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <xQueueGenericCreateStatic+0x5a>
 800869a:	2301      	movs	r3, #1
 800869c:	e000      	b.n	80086a0 <xQueueGenericCreateStatic+0x5c>
 800869e:	2300      	movs	r3, #0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10b      	bne.n	80086bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	623b      	str	r3, [r7, #32]
}
 80086b6:	bf00      	nop
 80086b8:	bf00      	nop
 80086ba:	e7fd      	b.n	80086b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d102      	bne.n	80086c8 <xQueueGenericCreateStatic+0x84>
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d101      	bne.n	80086cc <xQueueGenericCreateStatic+0x88>
 80086c8:	2301      	movs	r3, #1
 80086ca:	e000      	b.n	80086ce <xQueueGenericCreateStatic+0x8a>
 80086cc:	2300      	movs	r3, #0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10b      	bne.n	80086ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80086d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	61fb      	str	r3, [r7, #28]
}
 80086e4:	bf00      	nop
 80086e6:	bf00      	nop
 80086e8:	e7fd      	b.n	80086e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086ea:	2350      	movs	r3, #80	@ 0x50
 80086ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	2b50      	cmp	r3, #80	@ 0x50
 80086f2:	d00b      	beq.n	800870c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	61bb      	str	r3, [r7, #24]
}
 8008706:	bf00      	nop
 8008708:	bf00      	nop
 800870a:	e7fd      	b.n	8008708 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800870c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00d      	beq.n	8008734 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800871a:	2201      	movs	r2, #1
 800871c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008720:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	4613      	mov	r3, r2
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	68b9      	ldr	r1, [r7, #8]
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f000 f805 	bl	800873e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008736:	4618      	mov	r0, r3
 8008738:	3730      	adds	r7, #48	@ 0x30
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	60b9      	str	r1, [r7, #8]
 8008748:	607a      	str	r2, [r7, #4]
 800874a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d103      	bne.n	800875a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	601a      	str	r2, [r3, #0]
 8008758:	e002      	b.n	8008760 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800876c:	2101      	movs	r1, #1
 800876e:	69b8      	ldr	r0, [r7, #24]
 8008770:	f7ff ff0c 	bl	800858c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	78fa      	ldrb	r2, [r7, #3]
 8008778:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800877c:	bf00      	nop
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b08e      	sub	sp, #56	@ 0x38
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
 8008790:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008792:	2300      	movs	r3, #0
 8008794:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800879a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10b      	bne.n	80087b8 <xQueueGenericSend+0x34>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80087b2:	bf00      	nop
 80087b4:	bf00      	nop
 80087b6:	e7fd      	b.n	80087b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d103      	bne.n	80087c6 <xQueueGenericSend+0x42>
 80087be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <xQueueGenericSend+0x46>
 80087c6:	2301      	movs	r3, #1
 80087c8:	e000      	b.n	80087cc <xQueueGenericSend+0x48>
 80087ca:	2300      	movs	r3, #0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10b      	bne.n	80087e8 <xQueueGenericSend+0x64>
	__asm volatile
 80087d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80087e2:	bf00      	nop
 80087e4:	bf00      	nop
 80087e6:	e7fd      	b.n	80087e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d103      	bne.n	80087f6 <xQueueGenericSend+0x72>
 80087ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d101      	bne.n	80087fa <xQueueGenericSend+0x76>
 80087f6:	2301      	movs	r3, #1
 80087f8:	e000      	b.n	80087fc <xQueueGenericSend+0x78>
 80087fa:	2300      	movs	r3, #0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10b      	bne.n	8008818 <xQueueGenericSend+0x94>
	__asm volatile
 8008800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	623b      	str	r3, [r7, #32]
}
 8008812:	bf00      	nop
 8008814:	bf00      	nop
 8008816:	e7fd      	b.n	8008814 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008818:	f001 f9a6 	bl	8009b68 <xTaskGetSchedulerState>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d102      	bne.n	8008828 <xQueueGenericSend+0xa4>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <xQueueGenericSend+0xa8>
 8008828:	2301      	movs	r3, #1
 800882a:	e000      	b.n	800882e <xQueueGenericSend+0xaa>
 800882c:	2300      	movs	r3, #0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10b      	bne.n	800884a <xQueueGenericSend+0xc6>
	__asm volatile
 8008832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	61fb      	str	r3, [r7, #28]
}
 8008844:	bf00      	nop
 8008846:	bf00      	nop
 8008848:	e7fd      	b.n	8008846 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800884a:	f001 fefd 	bl	800a648 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800884e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008850:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008856:	429a      	cmp	r2, r3
 8008858:	d302      	bcc.n	8008860 <xQueueGenericSend+0xdc>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b02      	cmp	r3, #2
 800885e:	d112      	bne.n	8008886 <xQueueGenericSend+0x102>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008860:	683a      	ldr	r2, [r7, #0]
 8008862:	68b9      	ldr	r1, [r7, #8]
 8008864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008866:	f000 f9ed 	bl	8008c44 <prvCopyDataToQueue>
 800886a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800886c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008870:	2b00      	cmp	r3, #0
 8008872:	d004      	beq.n	800887e <xQueueGenericSend+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008876:	3324      	adds	r3, #36	@ 0x24
 8008878:	4618      	mov	r0, r3
 800887a:	f000 ffb5 	bl	80097e8 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800887e:	f001 ff15 	bl	800a6ac <vPortExitCritical>
				return pdPASS;
 8008882:	2301      	movs	r3, #1
 8008884:	e062      	b.n	800894c <xQueueGenericSend+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d103      	bne.n	8008894 <xQueueGenericSend+0x110>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800888c:	f001 ff0e 	bl	800a6ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008890:	2300      	movs	r3, #0
 8008892:	e05b      	b.n	800894c <xQueueGenericSend+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008896:	2b00      	cmp	r3, #0
 8008898:	d106      	bne.n	80088a8 <xQueueGenericSend+0x124>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800889a:	f107 0314 	add.w	r3, r7, #20
 800889e:	4618      	mov	r0, r3
 80088a0:	f001 f806 	bl	80098b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088a4:	2301      	movs	r3, #1
 80088a6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088a8:	f001 ff00 	bl	800a6ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088ac:	f000 fd8c 	bl	80093c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088b0:	f001 feca 	bl	800a648 <vPortEnterCritical>
 80088b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088ba:	b25b      	sxtb	r3, r3
 80088bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c0:	d103      	bne.n	80088ca <xQueueGenericSend+0x146>
 80088c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088d0:	b25b      	sxtb	r3, r3
 80088d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d6:	d103      	bne.n	80088e0 <xQueueGenericSend+0x15c>
 80088d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088e0:	f001 fee4 	bl	800a6ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088e4:	1d3a      	adds	r2, r7, #4
 80088e6:	f107 0314 	add.w	r3, r7, #20
 80088ea:	4611      	mov	r1, r2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 fff5 	bl	80098dc <xTaskCheckForTimeOut>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d123      	bne.n	8008940 <xQueueGenericSend+0x1bc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088fa:	f000 fa9b 	bl	8008e34 <prvIsQueueFull>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d017      	beq.n	8008934 <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008906:	3310      	adds	r3, #16
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	4611      	mov	r1, r2
 800890c:	4618      	mov	r0, r3
 800890e:	f000 ff19 	bl	8009744 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008912:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008914:	f000 fa26 	bl	8008d64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008918:	f000 fd64 	bl	80093e4 <xTaskResumeAll>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d193      	bne.n	800884a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008922:	4b0c      	ldr	r3, [pc, #48]	@ (8008954 <xQueueGenericSend+0x1d0>)
 8008924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	e78a      	b.n	800884a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008934:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008936:	f000 fa15 	bl	8008d64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800893a:	f000 fd53 	bl	80093e4 <xTaskResumeAll>
 800893e:	e784      	b.n	800884a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008942:	f000 fa0f 	bl	8008d64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008946:	f000 fd4d 	bl	80093e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800894a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800894c:	4618      	mov	r0, r3
 800894e:	3738      	adds	r7, #56	@ 0x38
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	e000ed04 	.word	0xe000ed04

08008958 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b090      	sub	sp, #64	@ 0x40
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800896a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10b      	bne.n	8008988 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008982:	bf00      	nop
 8008984:	bf00      	nop
 8008986:	e7fd      	b.n	8008984 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d103      	bne.n	8008996 <xQueueGenericSendFromISR+0x3e>
 800898e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <xQueueGenericSendFromISR+0x42>
 8008996:	2301      	movs	r3, #1
 8008998:	e000      	b.n	800899c <xQueueGenericSendFromISR+0x44>
 800899a:	2300      	movs	r3, #0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10b      	bne.n	80089b8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089b2:	bf00      	nop
 80089b4:	bf00      	nop
 80089b6:	e7fd      	b.n	80089b4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d103      	bne.n	80089c6 <xQueueGenericSendFromISR+0x6e>
 80089be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d101      	bne.n	80089ca <xQueueGenericSendFromISR+0x72>
 80089c6:	2301      	movs	r3, #1
 80089c8:	e000      	b.n	80089cc <xQueueGenericSendFromISR+0x74>
 80089ca:	2300      	movs	r3, #0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10b      	bne.n	80089e8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80089d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	623b      	str	r3, [r7, #32]
}
 80089e2:	bf00      	nop
 80089e4:	bf00      	nop
 80089e6:	e7fd      	b.n	80089e4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089e8:	f001 ff0e 	bl	800a808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089ec:	f3ef 8211 	mrs	r2, BASEPRI
 80089f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	61fa      	str	r2, [r7, #28]
 8008a02:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a04:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a06:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d302      	bcc.n	8008a1a <xQueueGenericSendFromISR+0xc2>
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d12f      	bne.n	8008a7a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	68b9      	ldr	r1, [r7, #8]
 8008a2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a30:	f000 f908 	bl	8008c44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a34:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3c:	d112      	bne.n	8008a64 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d016      	beq.n	8008a74 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a48:	3324      	adds	r3, #36	@ 0x24
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 fecc 	bl	80097e8 <xTaskRemoveFromEventList>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00e      	beq.n	8008a74 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00b      	beq.n	8008a74 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	601a      	str	r2, [r3, #0]
 8008a62:	e007      	b.n	8008a74 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a68:	3301      	adds	r3, #1
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	b25a      	sxtb	r2, r3
 8008a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008a74:	2301      	movs	r3, #1
 8008a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008a78:	e001      	b.n	8008a7e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a80:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3740      	adds	r7, #64	@ 0x40
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b08c      	sub	sp, #48	@ 0x30
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10b      	bne.n	8008ac6 <xQueueReceive+0x32>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	623b      	str	r3, [r7, #32]
}
 8008ac0:	bf00      	nop
 8008ac2:	bf00      	nop
 8008ac4:	e7fd      	b.n	8008ac2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d103      	bne.n	8008ad4 <xQueueReceive+0x40>
 8008acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <xQueueReceive+0x44>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e000      	b.n	8008ada <xQueueReceive+0x46>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10b      	bne.n	8008af6 <xQueueReceive+0x62>
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	61fb      	str	r3, [r7, #28]
}
 8008af0:	bf00      	nop
 8008af2:	bf00      	nop
 8008af4:	e7fd      	b.n	8008af2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008af6:	f001 f837 	bl	8009b68 <xTaskGetSchedulerState>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d102      	bne.n	8008b06 <xQueueReceive+0x72>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <xQueueReceive+0x76>
 8008b06:	2301      	movs	r3, #1
 8008b08:	e000      	b.n	8008b0c <xQueueReceive+0x78>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10b      	bne.n	8008b28 <xQueueReceive+0x94>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	61bb      	str	r3, [r7, #24]
}
 8008b22:	bf00      	nop
 8008b24:	bf00      	nop
 8008b26:	e7fd      	b.n	8008b24 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b28:	f001 fd8e 	bl	800a648 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b30:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d014      	beq.n	8008b62 <xQueueReceive+0xce>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b38:	68b9      	ldr	r1, [r7, #8]
 8008b3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b3c:	f000 f8ec 	bl	8008d18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b42:	1e5a      	subs	r2, r3, #1
 8008b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b46:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d004      	beq.n	8008b5a <xQueueReceive+0xc6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b52:	3310      	adds	r3, #16
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fe47 	bl	80097e8 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b5a:	f001 fda7 	bl	800a6ac <vPortExitCritical>
				return pdPASS;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e069      	b.n	8008c36 <xQueueReceive+0x1a2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d103      	bne.n	8008b70 <xQueueReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b68:	f001 fda0 	bl	800a6ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	e062      	b.n	8008c36 <xQueueReceive+0x1a2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d106      	bne.n	8008b84 <xQueueReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b76:	f107 0310 	add.w	r3, r7, #16
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fe98 	bl	80098b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b80:	2301      	movs	r3, #1
 8008b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b84:	f001 fd92 	bl	800a6ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b88:	f000 fc1e 	bl	80093c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b8c:	f001 fd5c 	bl	800a648 <vPortEnterCritical>
 8008b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b96:	b25b      	sxtb	r3, r3
 8008b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9c:	d103      	bne.n	8008ba6 <xQueueReceive+0x112>
 8008b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bac:	b25b      	sxtb	r3, r3
 8008bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb2:	d103      	bne.n	8008bbc <xQueueReceive+0x128>
 8008bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bbc:	f001 fd76 	bl	800a6ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bc0:	1d3a      	adds	r2, r7, #4
 8008bc2:	f107 0310 	add.w	r3, r7, #16
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 fe87 	bl	80098dc <xTaskCheckForTimeOut>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d123      	bne.n	8008c1c <xQueueReceive+0x188>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bd6:	f000 f917 	bl	8008e08 <prvIsQueueEmpty>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d017      	beq.n	8008c10 <xQueueReceive+0x17c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be2:	3324      	adds	r3, #36	@ 0x24
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	4611      	mov	r1, r2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 fdab 	bl	8009744 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bf0:	f000 f8b8 	bl	8008d64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bf4:	f000 fbf6 	bl	80093e4 <xTaskResumeAll>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d194      	bne.n	8008b28 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008bfe:	4b10      	ldr	r3, [pc, #64]	@ (8008c40 <xQueueReceive+0x1ac>)
 8008c00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	e78b      	b.n	8008b28 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c12:	f000 f8a7 	bl	8008d64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c16:	f000 fbe5 	bl	80093e4 <xTaskResumeAll>
 8008c1a:	e785      	b.n	8008b28 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c1e:	f000 f8a1 	bl	8008d64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c22:	f000 fbdf 	bl	80093e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c28:	f000 f8ee 	bl	8008e08 <prvIsQueueEmpty>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f43f af7a 	beq.w	8008b28 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3730      	adds	r7, #48	@ 0x30
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	e000ed04 	.word	0xe000ed04

08008c44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c50:	2300      	movs	r3, #0
 8008c52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10d      	bne.n	8008c7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d14d      	bne.n	8008d06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 ff98 	bl	8009ba4 <xTaskPriorityDisinherit>
 8008c74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	609a      	str	r2, [r3, #8]
 8008c7c:	e043      	b.n	8008d06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d119      	bne.n	8008cb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6858      	ldr	r0, [r3, #4]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	68b9      	ldr	r1, [r7, #8]
 8008c90:	f002 f86e 	bl	800ad70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c9c:	441a      	add	r2, r3
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d32b      	bcc.n	8008d06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	605a      	str	r2, [r3, #4]
 8008cb6:	e026      	b.n	8008d06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	68d8      	ldr	r0, [r3, #12]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	68b9      	ldr	r1, [r7, #8]
 8008cc4:	f002 f854 	bl	800ad70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	68da      	ldr	r2, [r3, #12]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cd0:	425b      	negs	r3, r3
 8008cd2:	441a      	add	r2, r3
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	68da      	ldr	r2, [r3, #12]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d207      	bcs.n	8008cf4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	689a      	ldr	r2, [r3, #8]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cec:	425b      	negs	r3, r3
 8008cee:	441a      	add	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d105      	bne.n	8008d06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	3b01      	subs	r3, #1
 8008d04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	1c5a      	adds	r2, r3, #1
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008d0e:	697b      	ldr	r3, [r7, #20]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d018      	beq.n	8008d5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68da      	ldr	r2, [r3, #12]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d32:	441a      	add	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	68da      	ldr	r2, [r3, #12]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d303      	bcc.n	8008d4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	68d9      	ldr	r1, [r3, #12]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d54:	461a      	mov	r2, r3
 8008d56:	6838      	ldr	r0, [r7, #0]
 8008d58:	f002 f80a 	bl	800ad70 <memcpy>
	}
}
 8008d5c:	bf00      	nop
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d6c:	f001 fc6c 	bl	800a648 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d78:	e011      	b.n	8008d9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d012      	beq.n	8008da8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	3324      	adds	r3, #36	@ 0x24
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 fd2e 	bl	80097e8 <xTaskRemoveFromEventList>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d92:	f000 fe07 	bl	80099a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	dce9      	bgt.n	8008d7a <prvUnlockQueue+0x16>
 8008da6:	e000      	b.n	8008daa <prvUnlockQueue+0x46>
					break;
 8008da8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	22ff      	movs	r2, #255	@ 0xff
 8008dae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008db2:	f001 fc7b 	bl	800a6ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008db6:	f001 fc47 	bl	800a648 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008dc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008dc2:	e011      	b.n	8008de8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d012      	beq.n	8008df2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	3310      	adds	r3, #16
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 fd09 	bl	80097e8 <xTaskRemoveFromEventList>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d001      	beq.n	8008de0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ddc:	f000 fde2 	bl	80099a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008de8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	dce9      	bgt.n	8008dc4 <prvUnlockQueue+0x60>
 8008df0:	e000      	b.n	8008df4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008df2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	22ff      	movs	r2, #255	@ 0xff
 8008df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008dfc:	f001 fc56 	bl	800a6ac <vPortExitCritical>
}
 8008e00:	bf00      	nop
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e10:	f001 fc1a 	bl	800a648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d102      	bne.n	8008e22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	60fb      	str	r3, [r7, #12]
 8008e20:	e001      	b.n	8008e26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e22:	2300      	movs	r3, #0
 8008e24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e26:	f001 fc41 	bl	800a6ac <vPortExitCritical>

	return xReturn;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e3c:	f001 fc04 	bl	800a648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d102      	bne.n	8008e52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	60fb      	str	r3, [r7, #12]
 8008e50:	e001      	b.n	8008e56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e52:	2300      	movs	r3, #0
 8008e54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e56:	f001 fc29 	bl	800a6ac <vPortExitCritical>

	return xReturn;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60fb      	str	r3, [r7, #12]
 8008e72:	e014      	b.n	8008e9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008e74:	4a0f      	ldr	r2, [pc, #60]	@ (8008eb4 <vQueueAddToRegistry+0x50>)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10b      	bne.n	8008e98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008e80:	490c      	ldr	r1, [pc, #48]	@ (8008eb4 <vQueueAddToRegistry+0x50>)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	683a      	ldr	r2, [r7, #0]
 8008e86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8008eb4 <vQueueAddToRegistry+0x50>)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	00db      	lsls	r3, r3, #3
 8008e90:	4413      	add	r3, r2
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008e96:	e006      	b.n	8008ea6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	60fb      	str	r3, [r7, #12]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b07      	cmp	r3, #7
 8008ea2:	d9e7      	bls.n	8008e74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop
 8008ea8:	3714      	adds	r7, #20
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	20000cd8 	.word	0x20000cd8

08008eb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008ec8:	f001 fbbe 	bl	800a648 <vPortEnterCritical>
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ed2:	b25b      	sxtb	r3, r3
 8008ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed8:	d103      	bne.n	8008ee2 <vQueueWaitForMessageRestricted+0x2a>
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ee8:	b25b      	sxtb	r3, r3
 8008eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eee:	d103      	bne.n	8008ef8 <vQueueWaitForMessageRestricted+0x40>
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ef8:	f001 fbd8 	bl	800a6ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d106      	bne.n	8008f12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	3324      	adds	r3, #36	@ 0x24
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	68b9      	ldr	r1, [r7, #8]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f000 fc3f 	bl	8009790 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f12:	6978      	ldr	r0, [r7, #20]
 8008f14:	f7ff ff26 	bl	8008d64 <prvUnlockQueue>
	}
 8008f18:	bf00      	nop
 8008f1a:	3718      	adds	r7, #24
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08e      	sub	sp, #56	@ 0x38
 8008f24:	af04      	add	r7, sp, #16
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10b      	bne.n	8008f4c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	623b      	str	r3, [r7, #32]
}
 8008f46:	bf00      	nop
 8008f48:	bf00      	nop
 8008f4a:	e7fd      	b.n	8008f48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d10b      	bne.n	8008f6a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	61fb      	str	r3, [r7, #28]
}
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop
 8008f68:	e7fd      	b.n	8008f66 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f6a:	23a8      	movs	r3, #168	@ 0xa8
 8008f6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	2ba8      	cmp	r3, #168	@ 0xa8
 8008f72:	d00b      	beq.n	8008f8c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	61bb      	str	r3, [r7, #24]
}
 8008f86:	bf00      	nop
 8008f88:	bf00      	nop
 8008f8a:	e7fd      	b.n	8008f88 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d01e      	beq.n	8008fd2 <xTaskCreateStatic+0xb2>
 8008f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d01b      	beq.n	8008fd2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f9c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008fa2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008fac:	2300      	movs	r3, #0
 8008fae:	9303      	str	r3, [sp, #12]
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb2:	9302      	str	r3, [sp, #8]
 8008fb4:	f107 0314 	add.w	r3, r7, #20
 8008fb8:	9301      	str	r3, [sp, #4]
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	68b9      	ldr	r1, [r7, #8]
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f000 f851 	bl	800906c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008fcc:	f000 f8f6 	bl	80091bc <prvAddNewTaskToReadyList>
 8008fd0:	e001      	b.n	8008fd6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008fd6:	697b      	ldr	r3, [r7, #20]
	}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3728      	adds	r7, #40	@ 0x28
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b08c      	sub	sp, #48	@ 0x30
 8008fe4:	af04      	add	r7, sp, #16
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	603b      	str	r3, [r7, #0]
 8008fec:	4613      	mov	r3, r2
 8008fee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ff0:	88fb      	ldrh	r3, [r7, #6]
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f001 fc49 	bl	800a88c <pvPortMalloc>
 8008ffa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00e      	beq.n	8009020 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009002:	20a8      	movs	r0, #168	@ 0xa8
 8009004:	f001 fc42 	bl	800a88c <pvPortMalloc>
 8009008:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d003      	beq.n	8009018 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	631a      	str	r2, [r3, #48]	@ 0x30
 8009016:	e005      	b.n	8009024 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009018:	6978      	ldr	r0, [r7, #20]
 800901a:	f001 fd05 	bl	800aa28 <vPortFree>
 800901e:	e001      	b.n	8009024 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009020:	2300      	movs	r3, #0
 8009022:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d017      	beq.n	800905a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009032:	88fa      	ldrh	r2, [r7, #6]
 8009034:	2300      	movs	r3, #0
 8009036:	9303      	str	r3, [sp, #12]
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	9302      	str	r3, [sp, #8]
 800903c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800903e:	9301      	str	r3, [sp, #4]
 8009040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	68b9      	ldr	r1, [r7, #8]
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f000 f80f 	bl	800906c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800904e:	69f8      	ldr	r0, [r7, #28]
 8009050:	f000 f8b4 	bl	80091bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009054:	2301      	movs	r3, #1
 8009056:	61bb      	str	r3, [r7, #24]
 8009058:	e002      	b.n	8009060 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800905a:	f04f 33ff 	mov.w	r3, #4294967295
 800905e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009060:	69bb      	ldr	r3, [r7, #24]
	}
 8009062:	4618      	mov	r0, r3
 8009064:	3720      	adds	r7, #32
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b088      	sub	sp, #32
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
 8009078:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800907a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	461a      	mov	r2, r3
 8009084:	21a5      	movs	r1, #165	@ 0xa5
 8009086:	f001 fdef 	bl	800ac68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800908a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009094:	3b01      	subs	r3, #1
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	4413      	add	r3, r2
 800909a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	f023 0307 	bic.w	r3, r3, #7
 80090a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	f003 0307 	and.w	r3, r3, #7
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00b      	beq.n	80090c6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80090ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	617b      	str	r3, [r7, #20]
}
 80090c0:	bf00      	nop
 80090c2:	bf00      	nop
 80090c4:	e7fd      	b.n	80090c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d01f      	beq.n	800910c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090cc:	2300      	movs	r3, #0
 80090ce:	61fb      	str	r3, [r7, #28]
 80090d0:	e012      	b.n	80090f8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	4413      	add	r3, r2
 80090d8:	7819      	ldrb	r1, [r3, #0]
 80090da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	4413      	add	r3, r2
 80090e0:	3334      	adds	r3, #52	@ 0x34
 80090e2:	460a      	mov	r2, r1
 80090e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	4413      	add	r3, r2
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d006      	beq.n	8009100 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	3301      	adds	r3, #1
 80090f6:	61fb      	str	r3, [r7, #28]
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	2b0f      	cmp	r3, #15
 80090fc:	d9e9      	bls.n	80090d2 <prvInitialiseNewTask+0x66>
 80090fe:	e000      	b.n	8009102 <prvInitialiseNewTask+0x96>
			{
				break;
 8009100:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800910a:	e003      	b.n	8009114 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800910c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910e:	2200      	movs	r2, #0
 8009110:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009116:	2b37      	cmp	r3, #55	@ 0x37
 8009118:	d901      	bls.n	800911e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800911a:	2337      	movs	r3, #55	@ 0x37
 800911c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800911e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009120:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009122:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009126:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009128:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800912a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912c:	2200      	movs	r2, #0
 800912e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009132:	3304      	adds	r3, #4
 8009134:	4618      	mov	r0, r3
 8009136:	f7ff f995 	bl	8008464 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800913a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913c:	3318      	adds	r3, #24
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff f990 	bl	8008464 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009148:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800914a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009152:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009158:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800915a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915c:	2200      	movs	r2, #0
 800915e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009164:	2200      	movs	r2, #0
 8009166:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800916a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916c:	3354      	adds	r3, #84	@ 0x54
 800916e:	224c      	movs	r2, #76	@ 0x4c
 8009170:	2100      	movs	r1, #0
 8009172:	4618      	mov	r0, r3
 8009174:	f001 fd78 	bl	800ac68 <memset>
 8009178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917a:	4a0d      	ldr	r2, [pc, #52]	@ (80091b0 <prvInitialiseNewTask+0x144>)
 800917c:	659a      	str	r2, [r3, #88]	@ 0x58
 800917e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009180:	4a0c      	ldr	r2, [pc, #48]	@ (80091b4 <prvInitialiseNewTask+0x148>)
 8009182:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009186:	4a0c      	ldr	r2, [pc, #48]	@ (80091b8 <prvInitialiseNewTask+0x14c>)
 8009188:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	68f9      	ldr	r1, [r7, #12]
 800918e:	69b8      	ldr	r0, [r7, #24]
 8009190:	f001 f926 	bl	800a3e0 <pxPortInitialiseStack>
 8009194:	4602      	mov	r2, r0
 8009196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009198:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800919a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919c:	2b00      	cmp	r3, #0
 800919e:	d002      	beq.n	80091a6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091a6:	bf00      	nop
 80091a8:	3720      	adds	r7, #32
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20001f6c 	.word	0x20001f6c
 80091b4:	20001fd4 	.word	0x20001fd4
 80091b8:	2000203c 	.word	0x2000203c

080091bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091c4:	f001 fa40 	bl	800a648 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091c8:	4b26      	ldr	r3, [pc, #152]	@ (8009264 <prvAddNewTaskToReadyList+0xa8>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3301      	adds	r3, #1
 80091ce:	4a25      	ldr	r2, [pc, #148]	@ (8009264 <prvAddNewTaskToReadyList+0xa8>)
 80091d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091d2:	4b25      	ldr	r3, [pc, #148]	@ (8009268 <prvAddNewTaskToReadyList+0xac>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d109      	bne.n	80091ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091da:	4a23      	ldr	r2, [pc, #140]	@ (8009268 <prvAddNewTaskToReadyList+0xac>)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091e0:	4b20      	ldr	r3, [pc, #128]	@ (8009264 <prvAddNewTaskToReadyList+0xa8>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d110      	bne.n	800920a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80091e8:	f000 fbfa 	bl	80099e0 <prvInitialiseTaskLists>
 80091ec:	e00d      	b.n	800920a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80091ee:	4b1f      	ldr	r3, [pc, #124]	@ (800926c <prvAddNewTaskToReadyList+0xb0>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d109      	bne.n	800920a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80091f6:	4b1c      	ldr	r3, [pc, #112]	@ (8009268 <prvAddNewTaskToReadyList+0xac>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009200:	429a      	cmp	r2, r3
 8009202:	d802      	bhi.n	800920a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009204:	4a18      	ldr	r2, [pc, #96]	@ (8009268 <prvAddNewTaskToReadyList+0xac>)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800920a:	4b19      	ldr	r3, [pc, #100]	@ (8009270 <prvAddNewTaskToReadyList+0xb4>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3301      	adds	r3, #1
 8009210:	4a17      	ldr	r2, [pc, #92]	@ (8009270 <prvAddNewTaskToReadyList+0xb4>)
 8009212:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009214:	4b16      	ldr	r3, [pc, #88]	@ (8009270 <prvAddNewTaskToReadyList+0xb4>)
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009220:	4b14      	ldr	r3, [pc, #80]	@ (8009274 <prvAddNewTaskToReadyList+0xb8>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	429a      	cmp	r2, r3
 8009226:	d903      	bls.n	8009230 <prvAddNewTaskToReadyList+0x74>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922c:	4a11      	ldr	r2, [pc, #68]	@ (8009274 <prvAddNewTaskToReadyList+0xb8>)
 800922e:	6013      	str	r3, [r2, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009234:	4613      	mov	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4a0e      	ldr	r2, [pc, #56]	@ (8009278 <prvAddNewTaskToReadyList+0xbc>)
 800923e:	441a      	add	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	3304      	adds	r3, #4
 8009244:	4619      	mov	r1, r3
 8009246:	4610      	mov	r0, r2
 8009248:	f7ff f919 	bl	800847e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800924c:	f001 fa2e 	bl	800a6ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009250:	4b06      	ldr	r3, [pc, #24]	@ (800926c <prvAddNewTaskToReadyList+0xb0>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009258:	4b03      	ldr	r3, [pc, #12]	@ (8009268 <prvAddNewTaskToReadyList+0xac>)
 800925a:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800925c:	bf00      	nop
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	200011ec 	.word	0x200011ec
 8009268:	20000d18 	.word	0x20000d18
 800926c:	200011f8 	.word	0x200011f8
 8009270:	20001208 	.word	0x20001208
 8009274:	200011f4 	.word	0x200011f4
 8009278:	20000d1c 	.word	0x20000d1c

0800927c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009284:	2300      	movs	r3, #0
 8009286:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d018      	beq.n	80092c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800928e:	4b14      	ldr	r3, [pc, #80]	@ (80092e0 <vTaskDelay+0x64>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00b      	beq.n	80092ae <vTaskDelay+0x32>
	__asm volatile
 8009296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800929a:	f383 8811 	msr	BASEPRI, r3
 800929e:	f3bf 8f6f 	isb	sy
 80092a2:	f3bf 8f4f 	dsb	sy
 80092a6:	60bb      	str	r3, [r7, #8]
}
 80092a8:	bf00      	nop
 80092aa:	bf00      	nop
 80092ac:	e7fd      	b.n	80092aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80092ae:	f000 f88b 	bl	80093c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092b2:	2100      	movs	r1, #0
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 fce5 	bl	8009c84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092ba:	f000 f893 	bl	80093e4 <xTaskResumeAll>
 80092be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d107      	bne.n	80092d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80092c6:	4b07      	ldr	r3, [pc, #28]	@ (80092e4 <vTaskDelay+0x68>)
 80092c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092cc:	601a      	str	r2, [r3, #0]
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092d6:	bf00      	nop
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	20001214 	.word	0x20001214
 80092e4:	e000ed04 	.word	0xe000ed04

080092e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08a      	sub	sp, #40	@ 0x28
 80092ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80092ee:	2300      	movs	r3, #0
 80092f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80092f2:	2300      	movs	r3, #0
 80092f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092f6:	463a      	mov	r2, r7
 80092f8:	1d39      	adds	r1, r7, #4
 80092fa:	f107 0308 	add.w	r3, r7, #8
 80092fe:	4618      	mov	r0, r3
 8009300:	f7ff f85c 	bl	80083bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009304:	6839      	ldr	r1, [r7, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	9202      	str	r2, [sp, #8]
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	2300      	movs	r3, #0
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	2300      	movs	r3, #0
 8009314:	460a      	mov	r2, r1
 8009316:	4924      	ldr	r1, [pc, #144]	@ (80093a8 <vTaskStartScheduler+0xc0>)
 8009318:	4824      	ldr	r0, [pc, #144]	@ (80093ac <vTaskStartScheduler+0xc4>)
 800931a:	f7ff fe01 	bl	8008f20 <xTaskCreateStatic>
 800931e:	4603      	mov	r3, r0
 8009320:	4a23      	ldr	r2, [pc, #140]	@ (80093b0 <vTaskStartScheduler+0xc8>)
 8009322:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009324:	4b22      	ldr	r3, [pc, #136]	@ (80093b0 <vTaskStartScheduler+0xc8>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d002      	beq.n	8009332 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800932c:	2301      	movs	r3, #1
 800932e:	617b      	str	r3, [r7, #20]
 8009330:	e001      	b.n	8009336 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009332:	2300      	movs	r3, #0
 8009334:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d102      	bne.n	8009342 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800933c:	f000 fcf6 	bl	8009d2c <xTimerCreateTimerTask>
 8009340:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d11b      	bne.n	8009380 <vTaskStartScheduler+0x98>
	__asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	613b      	str	r3, [r7, #16]
}
 800935a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800935c:	4b15      	ldr	r3, [pc, #84]	@ (80093b4 <vTaskStartScheduler+0xcc>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3354      	adds	r3, #84	@ 0x54
 8009362:	4a15      	ldr	r2, [pc, #84]	@ (80093b8 <vTaskStartScheduler+0xd0>)
 8009364:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009366:	4b15      	ldr	r3, [pc, #84]	@ (80093bc <vTaskStartScheduler+0xd4>)
 8009368:	f04f 32ff 	mov.w	r2, #4294967295
 800936c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800936e:	4b14      	ldr	r3, [pc, #80]	@ (80093c0 <vTaskStartScheduler+0xd8>)
 8009370:	2201      	movs	r2, #1
 8009372:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009374:	4b13      	ldr	r3, [pc, #76]	@ (80093c4 <vTaskStartScheduler+0xdc>)
 8009376:	2200      	movs	r2, #0
 8009378:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800937a:	f001 f8c1 	bl	800a500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800937e:	e00f      	b.n	80093a0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009386:	d10b      	bne.n	80093a0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	60fb      	str	r3, [r7, #12]
}
 800939a:	bf00      	nop
 800939c:	bf00      	nop
 800939e:	e7fd      	b.n	800939c <vTaskStartScheduler+0xb4>
}
 80093a0:	bf00      	nop
 80093a2:	3718      	adds	r7, #24
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	0800ae80 	.word	0x0800ae80
 80093ac:	080099bd 	.word	0x080099bd
 80093b0:	20001210 	.word	0x20001210
 80093b4:	20000d18 	.word	0x20000d18
 80093b8:	20000014 	.word	0x20000014
 80093bc:	2000120c 	.word	0x2000120c
 80093c0:	200011f8 	.word	0x200011f8
 80093c4:	200011f0 	.word	0x200011f0

080093c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093c8:	b480      	push	{r7}
 80093ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80093cc:	4b04      	ldr	r3, [pc, #16]	@ (80093e0 <vTaskSuspendAll+0x18>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3301      	adds	r3, #1
 80093d2:	4a03      	ldr	r2, [pc, #12]	@ (80093e0 <vTaskSuspendAll+0x18>)
 80093d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80093d6:	bf00      	nop
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	20001214 	.word	0x20001214

080093e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093ea:	2300      	movs	r3, #0
 80093ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80093ee:	2300      	movs	r3, #0
 80093f0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80093f2:	4b3c      	ldr	r3, [pc, #240]	@ (80094e4 <xTaskResumeAll+0x100>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10b      	bne.n	8009412 <xTaskResumeAll+0x2e>
	__asm volatile
 80093fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	603b      	str	r3, [r7, #0]
}
 800940c:	bf00      	nop
 800940e:	bf00      	nop
 8009410:	e7fd      	b.n	800940e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009412:	f001 f919 	bl	800a648 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009416:	4b33      	ldr	r3, [pc, #204]	@ (80094e4 <xTaskResumeAll+0x100>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3b01      	subs	r3, #1
 800941c:	4a31      	ldr	r2, [pc, #196]	@ (80094e4 <xTaskResumeAll+0x100>)
 800941e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009420:	4b30      	ldr	r3, [pc, #192]	@ (80094e4 <xTaskResumeAll+0x100>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d156      	bne.n	80094d6 <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009428:	4b2f      	ldr	r3, [pc, #188]	@ (80094e8 <xTaskResumeAll+0x104>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d052      	beq.n	80094d6 <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009430:	e02f      	b.n	8009492 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009432:	4b2e      	ldr	r3, [pc, #184]	@ (80094ec <xTaskResumeAll+0x108>)
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3318      	adds	r3, #24
 800943e:	4618      	mov	r0, r3
 8009440:	f7ff f87a 	bl	8008538 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	3304      	adds	r3, #4
 8009448:	4618      	mov	r0, r3
 800944a:	f7ff f875 	bl	8008538 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009452:	4b27      	ldr	r3, [pc, #156]	@ (80094f0 <xTaskResumeAll+0x10c>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	429a      	cmp	r2, r3
 8009458:	d903      	bls.n	8009462 <xTaskResumeAll+0x7e>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945e:	4a24      	ldr	r2, [pc, #144]	@ (80094f0 <xTaskResumeAll+0x10c>)
 8009460:	6013      	str	r3, [r2, #0]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009466:	4613      	mov	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4413      	add	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	4a21      	ldr	r2, [pc, #132]	@ (80094f4 <xTaskResumeAll+0x110>)
 8009470:	441a      	add	r2, r3
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	3304      	adds	r3, #4
 8009476:	4619      	mov	r1, r3
 8009478:	4610      	mov	r0, r2
 800947a:	f7ff f800 	bl	800847e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009482:	4b1d      	ldr	r3, [pc, #116]	@ (80094f8 <xTaskResumeAll+0x114>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009488:	429a      	cmp	r2, r3
 800948a:	d302      	bcc.n	8009492 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800948c:	4b1b      	ldr	r3, [pc, #108]	@ (80094fc <xTaskResumeAll+0x118>)
 800948e:	2201      	movs	r2, #1
 8009490:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009492:	4b16      	ldr	r3, [pc, #88]	@ (80094ec <xTaskResumeAll+0x108>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1cb      	bne.n	8009432 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094a0:	f000 fb42 	bl	8009b28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80094a4:	4b16      	ldr	r3, [pc, #88]	@ (8009500 <xTaskResumeAll+0x11c>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d010      	beq.n	80094d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094b0:	f000 f84a 	bl	8009548 <xTaskIncrementTick>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d002      	beq.n	80094c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80094ba:	4b10      	ldr	r3, [pc, #64]	@ (80094fc <xTaskResumeAll+0x118>)
 80094bc:	2201      	movs	r2, #1
 80094be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	3b01      	subs	r3, #1
 80094c4:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1f1      	bne.n	80094b0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80094cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009500 <xTaskResumeAll+0x11c>)
 80094ce:	2200      	movs	r2, #0
 80094d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094d2:	4b0a      	ldr	r3, [pc, #40]	@ (80094fc <xTaskResumeAll+0x118>)
 80094d4:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094d6:	f001 f8e9 	bl	800a6ac <vPortExitCritical>

	return xAlreadyYielded;
 80094da:	687b      	ldr	r3, [r7, #4]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	20001214 	.word	0x20001214
 80094e8:	200011ec 	.word	0x200011ec
 80094ec:	200011ac 	.word	0x200011ac
 80094f0:	200011f4 	.word	0x200011f4
 80094f4:	20000d1c 	.word	0x20000d1c
 80094f8:	20000d18 	.word	0x20000d18
 80094fc:	20001200 	.word	0x20001200
 8009500:	200011fc 	.word	0x200011fc

08009504 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800950a:	4b05      	ldr	r3, [pc, #20]	@ (8009520 <xTaskGetTickCount+0x1c>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009510:	687b      	ldr	r3, [r7, #4]
}
 8009512:	4618      	mov	r0, r3
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	200011f0 	.word	0x200011f0

08009524 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800952a:	f001 f96d 	bl	800a808 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800952e:	2300      	movs	r3, #0
 8009530:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009532:	4b04      	ldr	r3, [pc, #16]	@ (8009544 <xTaskGetTickCountFromISR+0x20>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009538:	683b      	ldr	r3, [r7, #0]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	200011f0 	.word	0x200011f0

08009548 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800954e:	2300      	movs	r3, #0
 8009550:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009552:	4b40      	ldr	r3, [pc, #256]	@ (8009654 <xTaskIncrementTick+0x10c>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d171      	bne.n	800963e <xTaskIncrementTick+0xf6>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800955a:	4b3f      	ldr	r3, [pc, #252]	@ (8009658 <xTaskIncrementTick+0x110>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	3301      	adds	r3, #1
 8009560:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009562:	4a3d      	ldr	r2, [pc, #244]	@ (8009658 <xTaskIncrementTick+0x110>)
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d121      	bne.n	80095b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800956e:	4b3b      	ldr	r3, [pc, #236]	@ (800965c <xTaskIncrementTick+0x114>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00b      	beq.n	8009590 <xTaskIncrementTick+0x48>
	__asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	603b      	str	r3, [r7, #0]
}
 800958a:	bf00      	nop
 800958c:	bf00      	nop
 800958e:	e7fd      	b.n	800958c <xTaskIncrementTick+0x44>
 8009590:	4b32      	ldr	r3, [pc, #200]	@ (800965c <xTaskIncrementTick+0x114>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	60fb      	str	r3, [r7, #12]
 8009596:	4b32      	ldr	r3, [pc, #200]	@ (8009660 <xTaskIncrementTick+0x118>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a30      	ldr	r2, [pc, #192]	@ (800965c <xTaskIncrementTick+0x114>)
 800959c:	6013      	str	r3, [r2, #0]
 800959e:	4a30      	ldr	r2, [pc, #192]	@ (8009660 <xTaskIncrementTick+0x118>)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6013      	str	r3, [r2, #0]
 80095a4:	4b2f      	ldr	r3, [pc, #188]	@ (8009664 <xTaskIncrementTick+0x11c>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3301      	adds	r3, #1
 80095aa:	4a2e      	ldr	r2, [pc, #184]	@ (8009664 <xTaskIncrementTick+0x11c>)
 80095ac:	6013      	str	r3, [r2, #0]
 80095ae:	f000 fabb 	bl	8009b28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095b2:	4b2d      	ldr	r3, [pc, #180]	@ (8009668 <xTaskIncrementTick+0x120>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d345      	bcc.n	8009648 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095bc:	4b27      	ldr	r3, [pc, #156]	@ (800965c <xTaskIncrementTick+0x114>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d104      	bne.n	80095d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095c6:	4b28      	ldr	r3, [pc, #160]	@ (8009668 <xTaskIncrementTick+0x120>)
 80095c8:	f04f 32ff 	mov.w	r2, #4294967295
 80095cc:	601a      	str	r2, [r3, #0]
					break;
 80095ce:	e03b      	b.n	8009648 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095d0:	4b22      	ldr	r3, [pc, #136]	@ (800965c <xTaskIncrementTick+0x114>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d203      	bcs.n	80095f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095e8:	4a1f      	ldr	r2, [pc, #124]	@ (8009668 <xTaskIncrementTick+0x120>)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80095ee:	e02b      	b.n	8009648 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	3304      	adds	r3, #4
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7fe ff9f 	bl	8008538 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d004      	beq.n	800960c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	3318      	adds	r3, #24
 8009606:	4618      	mov	r0, r3
 8009608:	f7fe ff96 	bl	8008538 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009610:	4b16      	ldr	r3, [pc, #88]	@ (800966c <xTaskIncrementTick+0x124>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	429a      	cmp	r2, r3
 8009616:	d903      	bls.n	8009620 <xTaskIncrementTick+0xd8>
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961c:	4a13      	ldr	r2, [pc, #76]	@ (800966c <xTaskIncrementTick+0x124>)
 800961e:	6013      	str	r3, [r2, #0]
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009624:	4613      	mov	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4a10      	ldr	r2, [pc, #64]	@ (8009670 <xTaskIncrementTick+0x128>)
 800962e:	441a      	add	r2, r3
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	3304      	adds	r3, #4
 8009634:	4619      	mov	r1, r3
 8009636:	4610      	mov	r0, r2
 8009638:	f7fe ff21 	bl	800847e <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800963c:	e7be      	b.n	80095bc <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800963e:	4b0d      	ldr	r3, [pc, #52]	@ (8009674 <xTaskIncrementTick+0x12c>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	3301      	adds	r3, #1
 8009644:	4a0b      	ldr	r2, [pc, #44]	@ (8009674 <xTaskIncrementTick+0x12c>)
 8009646:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009648:	697b      	ldr	r3, [r7, #20]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3718      	adds	r7, #24
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	20001214 	.word	0x20001214
 8009658:	200011f0 	.word	0x200011f0
 800965c:	200011a4 	.word	0x200011a4
 8009660:	200011a8 	.word	0x200011a8
 8009664:	20001204 	.word	0x20001204
 8009668:	2000120c 	.word	0x2000120c
 800966c:	200011f4 	.word	0x200011f4
 8009670:	20000d1c 	.word	0x20000d1c
 8009674:	200011fc 	.word	0x200011fc

08009678 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800967e:	4b2b      	ldr	r3, [pc, #172]	@ (800972c <vTaskSwitchContext+0xb4>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009686:	4b2a      	ldr	r3, [pc, #168]	@ (8009730 <vTaskSwitchContext+0xb8>)
 8009688:	2201      	movs	r2, #1
 800968a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800968c:	e047      	b.n	800971e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800968e:	4b28      	ldr	r3, [pc, #160]	@ (8009730 <vTaskSwitchContext+0xb8>)
 8009690:	2200      	movs	r2, #0
 8009692:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009694:	4b27      	ldr	r3, [pc, #156]	@ (8009734 <vTaskSwitchContext+0xbc>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	60fb      	str	r3, [r7, #12]
 800969a:	e011      	b.n	80096c0 <vTaskSwitchContext+0x48>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10b      	bne.n	80096ba <vTaskSwitchContext+0x42>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	607b      	str	r3, [r7, #4]
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop
 80096b8:	e7fd      	b.n	80096b6 <vTaskSwitchContext+0x3e>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	3b01      	subs	r3, #1
 80096be:	60fb      	str	r3, [r7, #12]
 80096c0:	491d      	ldr	r1, [pc, #116]	@ (8009738 <vTaskSwitchContext+0xc0>)
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	4613      	mov	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	440b      	add	r3, r1
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d0e3      	beq.n	800969c <vTaskSwitchContext+0x24>
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	4613      	mov	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	4413      	add	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4a16      	ldr	r2, [pc, #88]	@ (8009738 <vTaskSwitchContext+0xc0>)
 80096e0:	4413      	add	r3, r2
 80096e2:	60bb      	str	r3, [r7, #8]
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	605a      	str	r2, [r3, #4]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	3308      	adds	r3, #8
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d104      	bne.n	8009704 <vTaskSwitchContext+0x8c>
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	605a      	str	r2, [r3, #4]
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	4a0c      	ldr	r2, [pc, #48]	@ (800973c <vTaskSwitchContext+0xc4>)
 800970c:	6013      	str	r3, [r2, #0]
 800970e:	4a09      	ldr	r2, [pc, #36]	@ (8009734 <vTaskSwitchContext+0xbc>)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009714:	4b09      	ldr	r3, [pc, #36]	@ (800973c <vTaskSwitchContext+0xc4>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	3354      	adds	r3, #84	@ 0x54
 800971a:	4a09      	ldr	r2, [pc, #36]	@ (8009740 <vTaskSwitchContext+0xc8>)
 800971c:	6013      	str	r3, [r2, #0]
}
 800971e:	bf00      	nop
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	20001214 	.word	0x20001214
 8009730:	20001200 	.word	0x20001200
 8009734:	200011f4 	.word	0x200011f4
 8009738:	20000d1c 	.word	0x20000d1c
 800973c:	20000d18 	.word	0x20000d18
 8009740:	20000014 	.word	0x20000014

08009744 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10b      	bne.n	800976c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	60fb      	str	r3, [r7, #12]
}
 8009766:	bf00      	nop
 8009768:	bf00      	nop
 800976a:	e7fd      	b.n	8009768 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800976c:	4b07      	ldr	r3, [pc, #28]	@ (800978c <vTaskPlaceOnEventList+0x48>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	3318      	adds	r3, #24
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7fe fea6 	bl	80084c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800977a:	2101      	movs	r1, #1
 800977c:	6838      	ldr	r0, [r7, #0]
 800977e:	f000 fa81 	bl	8009c84 <prvAddCurrentTaskToDelayedList>
}
 8009782:	bf00      	nop
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	20000d18 	.word	0x20000d18

08009790 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10b      	bne.n	80097ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80097a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	617b      	str	r3, [r7, #20]
}
 80097b4:	bf00      	nop
 80097b6:	bf00      	nop
 80097b8:	e7fd      	b.n	80097b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097ba:	4b0a      	ldr	r3, [pc, #40]	@ (80097e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	3318      	adds	r3, #24
 80097c0:	4619      	mov	r1, r3
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f7fe fe5b 	bl	800847e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d002      	beq.n	80097d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80097ce:	f04f 33ff 	mov.w	r3, #4294967295
 80097d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80097d4:	6879      	ldr	r1, [r7, #4]
 80097d6:	68b8      	ldr	r0, [r7, #8]
 80097d8:	f000 fa54 	bl	8009c84 <prvAddCurrentTaskToDelayedList>
	}
 80097dc:	bf00      	nop
 80097de:	3718      	adds	r7, #24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	20000d18 	.word	0x20000d18

080097e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b086      	sub	sp, #24
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10b      	bne.n	8009816 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80097fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	60fb      	str	r3, [r7, #12]
}
 8009810:	bf00      	nop
 8009812:	bf00      	nop
 8009814:	e7fd      	b.n	8009812 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	3318      	adds	r3, #24
 800981a:	4618      	mov	r0, r3
 800981c:	f7fe fe8c 	bl	8008538 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009820:	4b1d      	ldr	r3, [pc, #116]	@ (8009898 <xTaskRemoveFromEventList+0xb0>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d11d      	bne.n	8009864 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	3304      	adds	r3, #4
 800982c:	4618      	mov	r0, r3
 800982e:	f7fe fe83 	bl	8008538 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009836:	4b19      	ldr	r3, [pc, #100]	@ (800989c <xTaskRemoveFromEventList+0xb4>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	429a      	cmp	r2, r3
 800983c:	d903      	bls.n	8009846 <xTaskRemoveFromEventList+0x5e>
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009842:	4a16      	ldr	r2, [pc, #88]	@ (800989c <xTaskRemoveFromEventList+0xb4>)
 8009844:	6013      	str	r3, [r2, #0]
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800984a:	4613      	mov	r3, r2
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4a13      	ldr	r2, [pc, #76]	@ (80098a0 <xTaskRemoveFromEventList+0xb8>)
 8009854:	441a      	add	r2, r3
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	3304      	adds	r3, #4
 800985a:	4619      	mov	r1, r3
 800985c:	4610      	mov	r0, r2
 800985e:	f7fe fe0e 	bl	800847e <vListInsertEnd>
 8009862:	e005      	b.n	8009870 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	3318      	adds	r3, #24
 8009868:	4619      	mov	r1, r3
 800986a:	480e      	ldr	r0, [pc, #56]	@ (80098a4 <xTaskRemoveFromEventList+0xbc>)
 800986c:	f7fe fe07 	bl	800847e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009874:	4b0c      	ldr	r3, [pc, #48]	@ (80098a8 <xTaskRemoveFromEventList+0xc0>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800987a:	429a      	cmp	r2, r3
 800987c:	d905      	bls.n	800988a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800987e:	2301      	movs	r3, #1
 8009880:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009882:	4b0a      	ldr	r3, [pc, #40]	@ (80098ac <xTaskRemoveFromEventList+0xc4>)
 8009884:	2201      	movs	r2, #1
 8009886:	601a      	str	r2, [r3, #0]
 8009888:	e001      	b.n	800988e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800988a:	2300      	movs	r3, #0
 800988c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800988e:	697b      	ldr	r3, [r7, #20]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3718      	adds	r7, #24
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	20001214 	.word	0x20001214
 800989c:	200011f4 	.word	0x200011f4
 80098a0:	20000d1c 	.word	0x20000d1c
 80098a4:	200011ac 	.word	0x200011ac
 80098a8:	20000d18 	.word	0x20000d18
 80098ac:	20001200 	.word	0x20001200

080098b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098b8:	4b06      	ldr	r3, [pc, #24]	@ (80098d4 <vTaskInternalSetTimeOutState+0x24>)
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098c0:	4b05      	ldr	r3, [pc, #20]	@ (80098d8 <vTaskInternalSetTimeOutState+0x28>)
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	605a      	str	r2, [r3, #4]
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr
 80098d4:	20001204 	.word	0x20001204
 80098d8:	200011f0 	.word	0x200011f0

080098dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10b      	bne.n	8009904 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80098ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f0:	f383 8811 	msr	BASEPRI, r3
 80098f4:	f3bf 8f6f 	isb	sy
 80098f8:	f3bf 8f4f 	dsb	sy
 80098fc:	613b      	str	r3, [r7, #16]
}
 80098fe:	bf00      	nop
 8009900:	bf00      	nop
 8009902:	e7fd      	b.n	8009900 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10b      	bne.n	8009922 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	60fb      	str	r3, [r7, #12]
}
 800991c:	bf00      	nop
 800991e:	bf00      	nop
 8009920:	e7fd      	b.n	800991e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009922:	f000 fe91 	bl	800a648 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009926:	4b1d      	ldr	r3, [pc, #116]	@ (800999c <xTaskCheckForTimeOut+0xc0>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	69ba      	ldr	r2, [r7, #24]
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993e:	d102      	bne.n	8009946 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009940:	2300      	movs	r3, #0
 8009942:	61fb      	str	r3, [r7, #28]
 8009944:	e023      	b.n	800998e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	4b15      	ldr	r3, [pc, #84]	@ (80099a0 <xTaskCheckForTimeOut+0xc4>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	429a      	cmp	r2, r3
 8009950:	d007      	beq.n	8009962 <xTaskCheckForTimeOut+0x86>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	69ba      	ldr	r2, [r7, #24]
 8009958:	429a      	cmp	r2, r3
 800995a:	d302      	bcc.n	8009962 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800995c:	2301      	movs	r3, #1
 800995e:	61fb      	str	r3, [r7, #28]
 8009960:	e015      	b.n	800998e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	697a      	ldr	r2, [r7, #20]
 8009968:	429a      	cmp	r2, r3
 800996a:	d20b      	bcs.n	8009984 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	1ad2      	subs	r2, r2, r3
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7ff ff99 	bl	80098b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800997e:	2300      	movs	r3, #0
 8009980:	61fb      	str	r3, [r7, #28]
 8009982:	e004      	b.n	800998e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	2200      	movs	r2, #0
 8009988:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800998a:	2301      	movs	r3, #1
 800998c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800998e:	f000 fe8d 	bl	800a6ac <vPortExitCritical>

	return xReturn;
 8009992:	69fb      	ldr	r3, [r7, #28]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3720      	adds	r7, #32
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	200011f0 	.word	0x200011f0
 80099a0:	20001204 	.word	0x20001204

080099a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80099a4:	b480      	push	{r7}
 80099a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80099a8:	4b03      	ldr	r3, [pc, #12]	@ (80099b8 <vTaskMissedYield+0x14>)
 80099aa:	2201      	movs	r2, #1
 80099ac:	601a      	str	r2, [r3, #0]
}
 80099ae:	bf00      	nop
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	20001200 	.word	0x20001200

080099bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80099c4:	f000 f84c 	bl	8009a60 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 80099c8:	4b04      	ldr	r3, [pc, #16]	@ (80099dc <prvIdleTask+0x20>)
 80099ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099ce:	601a      	str	r2, [r3, #0]
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099d8:	bf00      	nop
 80099da:	e7f3      	b.n	80099c4 <prvIdleTask+0x8>
 80099dc:	e000ed04 	.word	0xe000ed04

080099e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099e6:	2300      	movs	r3, #0
 80099e8:	607b      	str	r3, [r7, #4]
 80099ea:	e00c      	b.n	8009a06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	4613      	mov	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4a12      	ldr	r2, [pc, #72]	@ (8009a40 <prvInitialiseTaskLists+0x60>)
 80099f8:	4413      	add	r3, r2
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fe fd12 	bl	8008424 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	3301      	adds	r3, #1
 8009a04:	607b      	str	r3, [r7, #4]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2b37      	cmp	r3, #55	@ 0x37
 8009a0a:	d9ef      	bls.n	80099ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a0c:	480d      	ldr	r0, [pc, #52]	@ (8009a44 <prvInitialiseTaskLists+0x64>)
 8009a0e:	f7fe fd09 	bl	8008424 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a12:	480d      	ldr	r0, [pc, #52]	@ (8009a48 <prvInitialiseTaskLists+0x68>)
 8009a14:	f7fe fd06 	bl	8008424 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a18:	480c      	ldr	r0, [pc, #48]	@ (8009a4c <prvInitialiseTaskLists+0x6c>)
 8009a1a:	f7fe fd03 	bl	8008424 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a1e:	480c      	ldr	r0, [pc, #48]	@ (8009a50 <prvInitialiseTaskLists+0x70>)
 8009a20:	f7fe fd00 	bl	8008424 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a24:	480b      	ldr	r0, [pc, #44]	@ (8009a54 <prvInitialiseTaskLists+0x74>)
 8009a26:	f7fe fcfd 	bl	8008424 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a58 <prvInitialiseTaskLists+0x78>)
 8009a2c:	4a05      	ldr	r2, [pc, #20]	@ (8009a44 <prvInitialiseTaskLists+0x64>)
 8009a2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a30:	4b0a      	ldr	r3, [pc, #40]	@ (8009a5c <prvInitialiseTaskLists+0x7c>)
 8009a32:	4a05      	ldr	r2, [pc, #20]	@ (8009a48 <prvInitialiseTaskLists+0x68>)
 8009a34:	601a      	str	r2, [r3, #0]
}
 8009a36:	bf00      	nop
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	20000d1c 	.word	0x20000d1c
 8009a44:	2000117c 	.word	0x2000117c
 8009a48:	20001190 	.word	0x20001190
 8009a4c:	200011ac 	.word	0x200011ac
 8009a50:	200011c0 	.word	0x200011c0
 8009a54:	200011d8 	.word	0x200011d8
 8009a58:	200011a4 	.word	0x200011a4
 8009a5c:	200011a8 	.word	0x200011a8

08009a60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a66:	e019      	b.n	8009a9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a68:	f000 fdee 	bl	800a648 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a6c:	4b10      	ldr	r3, [pc, #64]	@ (8009ab0 <prvCheckTasksWaitingTermination+0x50>)
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	3304      	adds	r3, #4
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7fe fd5d 	bl	8008538 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab4 <prvCheckTasksWaitingTermination+0x54>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3b01      	subs	r3, #1
 8009a84:	4a0b      	ldr	r2, [pc, #44]	@ (8009ab4 <prvCheckTasksWaitingTermination+0x54>)
 8009a86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a88:	4b0b      	ldr	r3, [pc, #44]	@ (8009ab8 <prvCheckTasksWaitingTermination+0x58>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8009ab8 <prvCheckTasksWaitingTermination+0x58>)
 8009a90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a92:	f000 fe0b 	bl	800a6ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f810 	bl	8009abc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a9c:	4b06      	ldr	r3, [pc, #24]	@ (8009ab8 <prvCheckTasksWaitingTermination+0x58>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1e1      	bne.n	8009a68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009aa4:	bf00      	nop
 8009aa6:	bf00      	nop
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	200011c0 	.word	0x200011c0
 8009ab4:	200011ec 	.word	0x200011ec
 8009ab8:	200011d4 	.word	0x200011d4

08009abc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	3354      	adds	r3, #84	@ 0x54
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f001 f8d5 	bl	800ac78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d108      	bne.n	8009aea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009adc:	4618      	mov	r0, r3
 8009ade:	f000 ffa3 	bl	800aa28 <vPortFree>
				vPortFree( pxTCB );
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 ffa0 	bl	800aa28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ae8:	e019      	b.n	8009b1e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d103      	bne.n	8009afc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 ff97 	bl	800aa28 <vPortFree>
	}
 8009afa:	e010      	b.n	8009b1e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d00b      	beq.n	8009b1e <prvDeleteTCB+0x62>
	__asm volatile
 8009b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b0a:	f383 8811 	msr	BASEPRI, r3
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	f3bf 8f4f 	dsb	sy
 8009b16:	60fb      	str	r3, [r7, #12]
}
 8009b18:	bf00      	nop
 8009b1a:	bf00      	nop
 8009b1c:	e7fd      	b.n	8009b1a <prvDeleteTCB+0x5e>
	}
 8009b1e:	bf00      	nop
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
	...

08009b28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8009b60 <prvResetNextTaskUnblockTime+0x38>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d104      	bne.n	8009b42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b38:	4b0a      	ldr	r3, [pc, #40]	@ (8009b64 <prvResetNextTaskUnblockTime+0x3c>)
 8009b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b40:	e008      	b.n	8009b54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b42:	4b07      	ldr	r3, [pc, #28]	@ (8009b60 <prvResetNextTaskUnblockTime+0x38>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	4a04      	ldr	r2, [pc, #16]	@ (8009b64 <prvResetNextTaskUnblockTime+0x3c>)
 8009b52:	6013      	str	r3, [r2, #0]
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	200011a4 	.word	0x200011a4
 8009b64:	2000120c 	.word	0x2000120c

08009b68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8009b9c <xTaskGetSchedulerState+0x34>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d102      	bne.n	8009b7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b76:	2301      	movs	r3, #1
 8009b78:	607b      	str	r3, [r7, #4]
 8009b7a:	e008      	b.n	8009b8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b7c:	4b08      	ldr	r3, [pc, #32]	@ (8009ba0 <xTaskGetSchedulerState+0x38>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d102      	bne.n	8009b8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b84:	2302      	movs	r3, #2
 8009b86:	607b      	str	r3, [r7, #4]
 8009b88:	e001      	b.n	8009b8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b8e:	687b      	ldr	r3, [r7, #4]
	}
 8009b90:	4618      	mov	r0, r3
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	200011f8 	.word	0x200011f8
 8009ba0:	20001214 	.word	0x20001214

08009ba4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d058      	beq.n	8009c6c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009bba:	4b2f      	ldr	r3, [pc, #188]	@ (8009c78 <xTaskPriorityDisinherit+0xd4>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	693a      	ldr	r2, [r7, #16]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d00b      	beq.n	8009bdc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	60fb      	str	r3, [r7, #12]
}
 8009bd6:	bf00      	nop
 8009bd8:	bf00      	nop
 8009bda:	e7fd      	b.n	8009bd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10b      	bne.n	8009bfc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	60bb      	str	r3, [r7, #8]
}
 8009bf6:	bf00      	nop
 8009bf8:	bf00      	nop
 8009bfa:	e7fd      	b.n	8009bf8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c00:	1e5a      	subs	r2, r3, #1
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d02c      	beq.n	8009c6c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d128      	bne.n	8009c6c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fe fc8a 	bl	8008538 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8009c7c <xTaskPriorityDisinherit+0xd8>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d903      	bls.n	8009c4c <xTaskPriorityDisinherit+0xa8>
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c48:	4a0c      	ldr	r2, [pc, #48]	@ (8009c7c <xTaskPriorityDisinherit+0xd8>)
 8009c4a:	6013      	str	r3, [r2, #0]
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c50:	4613      	mov	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	4a09      	ldr	r2, [pc, #36]	@ (8009c80 <xTaskPriorityDisinherit+0xdc>)
 8009c5a:	441a      	add	r2, r3
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	3304      	adds	r3, #4
 8009c60:	4619      	mov	r1, r3
 8009c62:	4610      	mov	r0, r2
 8009c64:	f7fe fc0b 	bl	800847e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c6c:	697b      	ldr	r3, [r7, #20]
	}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3718      	adds	r7, #24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	20000d18 	.word	0x20000d18
 8009c7c:	200011f4 	.word	0x200011f4
 8009c80:	20000d1c 	.word	0x20000d1c

08009c84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c8e:	4b21      	ldr	r3, [pc, #132]	@ (8009d14 <prvAddCurrentTaskToDelayedList+0x90>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c94:	4b20      	ldr	r3, [pc, #128]	@ (8009d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	3304      	adds	r3, #4
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fe fc4c 	bl	8008538 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca6:	d10a      	bne.n	8009cbe <prvAddCurrentTaskToDelayedList+0x3a>
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d007      	beq.n	8009cbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cae:	4b1a      	ldr	r3, [pc, #104]	@ (8009d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	4819      	ldr	r0, [pc, #100]	@ (8009d1c <prvAddCurrentTaskToDelayedList+0x98>)
 8009cb8:	f7fe fbe1 	bl	800847e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009cbc:	e026      	b.n	8009d0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009cc6:	4b14      	ldr	r3, [pc, #80]	@ (8009d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d209      	bcs.n	8009cea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cd6:	4b12      	ldr	r3, [pc, #72]	@ (8009d20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	4b0f      	ldr	r3, [pc, #60]	@ (8009d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3304      	adds	r3, #4
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4610      	mov	r0, r2
 8009ce4:	f7fe fbef 	bl	80084c6 <vListInsert>
}
 8009ce8:	e010      	b.n	8009d0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cea:	4b0e      	ldr	r3, [pc, #56]	@ (8009d24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	4b0a      	ldr	r3, [pc, #40]	@ (8009d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	3304      	adds	r3, #4
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	f7fe fbe5 	bl	80084c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8009d28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d202      	bcs.n	8009d0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009d06:	4a08      	ldr	r2, [pc, #32]	@ (8009d28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	6013      	str	r3, [r2, #0]
}
 8009d0c:	bf00      	nop
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	200011f0 	.word	0x200011f0
 8009d18:	20000d18 	.word	0x20000d18
 8009d1c:	200011d8 	.word	0x200011d8
 8009d20:	200011a8 	.word	0x200011a8
 8009d24:	200011a4 	.word	0x200011a4
 8009d28:	2000120c 	.word	0x2000120c

08009d2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b08a      	sub	sp, #40	@ 0x28
 8009d30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d32:	2300      	movs	r3, #0
 8009d34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d36:	f000 fb13 	bl	800a360 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8009db0 <xTimerCreateTimerTask+0x84>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d021      	beq.n	8009d86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009d42:	2300      	movs	r3, #0
 8009d44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009d46:	2300      	movs	r3, #0
 8009d48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009d4a:	1d3a      	adds	r2, r7, #4
 8009d4c:	f107 0108 	add.w	r1, r7, #8
 8009d50:	f107 030c 	add.w	r3, r7, #12
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7fe fb4b 	bl	80083f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009d5a:	6879      	ldr	r1, [r7, #4]
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	9202      	str	r2, [sp, #8]
 8009d62:	9301      	str	r3, [sp, #4]
 8009d64:	2302      	movs	r3, #2
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	2300      	movs	r3, #0
 8009d6a:	460a      	mov	r2, r1
 8009d6c:	4911      	ldr	r1, [pc, #68]	@ (8009db4 <xTimerCreateTimerTask+0x88>)
 8009d6e:	4812      	ldr	r0, [pc, #72]	@ (8009db8 <xTimerCreateTimerTask+0x8c>)
 8009d70:	f7ff f8d6 	bl	8008f20 <xTaskCreateStatic>
 8009d74:	4603      	mov	r3, r0
 8009d76:	4a11      	ldr	r2, [pc, #68]	@ (8009dbc <xTimerCreateTimerTask+0x90>)
 8009d78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009d7a:	4b10      	ldr	r3, [pc, #64]	@ (8009dbc <xTimerCreateTimerTask+0x90>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009d82:	2301      	movs	r3, #1
 8009d84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10b      	bne.n	8009da4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d90:	f383 8811 	msr	BASEPRI, r3
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	613b      	str	r3, [r7, #16]
}
 8009d9e:	bf00      	nop
 8009da0:	bf00      	nop
 8009da2:	e7fd      	b.n	8009da0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009da4:	697b      	ldr	r3, [r7, #20]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3718      	adds	r7, #24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	20001248 	.word	0x20001248
 8009db4:	0800ae88 	.word	0x0800ae88
 8009db8:	08009ef9 	.word	0x08009ef9
 8009dbc:	2000124c 	.word	0x2000124c

08009dc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b08a      	sub	sp, #40	@ 0x28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
 8009dcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10b      	bne.n	8009df0 <xTimerGenericCommand+0x30>
	__asm volatile
 8009dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	623b      	str	r3, [r7, #32]
}
 8009dea:	bf00      	nop
 8009dec:	bf00      	nop
 8009dee:	e7fd      	b.n	8009dec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009df0:	4b19      	ldr	r3, [pc, #100]	@ (8009e58 <xTimerGenericCommand+0x98>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d02a      	beq.n	8009e4e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	2b05      	cmp	r3, #5
 8009e08:	dc18      	bgt.n	8009e3c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009e0a:	f7ff fead 	bl	8009b68 <xTaskGetSchedulerState>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d109      	bne.n	8009e28 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e14:	4b10      	ldr	r3, [pc, #64]	@ (8009e58 <xTimerGenericCommand+0x98>)
 8009e16:	6818      	ldr	r0, [r3, #0]
 8009e18:	f107 0110 	add.w	r1, r7, #16
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e20:	f7fe fcb0 	bl	8008784 <xQueueGenericSend>
 8009e24:	6278      	str	r0, [r7, #36]	@ 0x24
 8009e26:	e012      	b.n	8009e4e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009e28:	4b0b      	ldr	r3, [pc, #44]	@ (8009e58 <xTimerGenericCommand+0x98>)
 8009e2a:	6818      	ldr	r0, [r3, #0]
 8009e2c:	f107 0110 	add.w	r1, r7, #16
 8009e30:	2300      	movs	r3, #0
 8009e32:	2200      	movs	r2, #0
 8009e34:	f7fe fca6 	bl	8008784 <xQueueGenericSend>
 8009e38:	6278      	str	r0, [r7, #36]	@ 0x24
 8009e3a:	e008      	b.n	8009e4e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e3c:	4b06      	ldr	r3, [pc, #24]	@ (8009e58 <xTimerGenericCommand+0x98>)
 8009e3e:	6818      	ldr	r0, [r3, #0]
 8009e40:	f107 0110 	add.w	r1, r7, #16
 8009e44:	2300      	movs	r3, #0
 8009e46:	683a      	ldr	r2, [r7, #0]
 8009e48:	f7fe fd86 	bl	8008958 <xQueueGenericSendFromISR>
 8009e4c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3728      	adds	r7, #40	@ 0x28
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	20001248 	.word	0x20001248

08009e5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b088      	sub	sp, #32
 8009e60:	af02      	add	r7, sp, #8
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e66:	4b23      	ldr	r3, [pc, #140]	@ (8009ef4 <prvProcessExpiredTimer+0x98>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	3304      	adds	r3, #4
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7fe fb5f 	bl	8008538 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e80:	f003 0304 	and.w	r3, r3, #4
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d023      	beq.n	8009ed0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	699a      	ldr	r2, [r3, #24]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	18d1      	adds	r1, r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	683a      	ldr	r2, [r7, #0]
 8009e94:	6978      	ldr	r0, [r7, #20]
 8009e96:	f000 f8d5 	bl	800a044 <prvInsertTimerInActiveList>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d020      	beq.n	8009ee2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	6978      	ldr	r0, [r7, #20]
 8009eac:	f7ff ff88 	bl	8009dc0 <xTimerGenericCommand>
 8009eb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d114      	bne.n	8009ee2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ebc:	f383 8811 	msr	BASEPRI, r3
 8009ec0:	f3bf 8f6f 	isb	sy
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	60fb      	str	r3, [r7, #12]
}
 8009eca:	bf00      	nop
 8009ecc:	bf00      	nop
 8009ece:	e7fd      	b.n	8009ecc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ed6:	f023 0301 	bic.w	r3, r3, #1
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	6978      	ldr	r0, [r7, #20]
 8009ee8:	4798      	blx	r3
}
 8009eea:	bf00      	nop
 8009eec:	3718      	adds	r7, #24
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	20001240 	.word	0x20001240

08009ef8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f00:	f107 0308 	add.w	r3, r7, #8
 8009f04:	4618      	mov	r0, r3
 8009f06:	f000 f859 	bl	8009fbc <prvGetNextExpireTime>
 8009f0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	4619      	mov	r1, r3
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f000 f805 	bl	8009f20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009f16:	f000 f8d7 	bl	800a0c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f1a:	bf00      	nop
 8009f1c:	e7f0      	b.n	8009f00 <prvTimerTask+0x8>
	...

08009f20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009f2a:	f7ff fa4d 	bl	80093c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f2e:	f107 0308 	add.w	r3, r7, #8
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 f866 	bl	800a004 <prvSampleTimeNow>
 8009f38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d130      	bne.n	8009fa2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10a      	bne.n	8009f5c <prvProcessTimerOrBlockTask+0x3c>
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d806      	bhi.n	8009f5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f4e:	f7ff fa49 	bl	80093e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f52:	68f9      	ldr	r1, [r7, #12]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f7ff ff81 	bl	8009e5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f5a:	e024      	b.n	8009fa6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d008      	beq.n	8009f74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f62:	4b13      	ldr	r3, [pc, #76]	@ (8009fb0 <prvProcessTimerOrBlockTask+0x90>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d101      	bne.n	8009f70 <prvProcessTimerOrBlockTask+0x50>
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e000      	b.n	8009f72 <prvProcessTimerOrBlockTask+0x52>
 8009f70:	2300      	movs	r3, #0
 8009f72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f74:	4b0f      	ldr	r3, [pc, #60]	@ (8009fb4 <prvProcessTimerOrBlockTask+0x94>)
 8009f76:	6818      	ldr	r0, [r3, #0]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	4619      	mov	r1, r3
 8009f82:	f7fe ff99 	bl	8008eb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009f86:	f7ff fa2d 	bl	80093e4 <xTaskResumeAll>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10a      	bne.n	8009fa6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f90:	4b09      	ldr	r3, [pc, #36]	@ (8009fb8 <prvProcessTimerOrBlockTask+0x98>)
 8009f92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f96:	601a      	str	r2, [r3, #0]
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	f3bf 8f6f 	isb	sy
}
 8009fa0:	e001      	b.n	8009fa6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009fa2:	f7ff fa1f 	bl	80093e4 <xTaskResumeAll>
}
 8009fa6:	bf00      	nop
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	20001244 	.word	0x20001244
 8009fb4:	20001248 	.word	0x20001248
 8009fb8:	e000ed04 	.word	0xe000ed04

08009fbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009fc4:	4b0e      	ldr	r3, [pc, #56]	@ (800a000 <prvGetNextExpireTime+0x44>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d101      	bne.n	8009fd2 <prvGetNextExpireTime+0x16>
 8009fce:	2201      	movs	r2, #1
 8009fd0:	e000      	b.n	8009fd4 <prvGetNextExpireTime+0x18>
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d105      	bne.n	8009fec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fe0:	4b07      	ldr	r3, [pc, #28]	@ (800a000 <prvGetNextExpireTime+0x44>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	60fb      	str	r3, [r7, #12]
 8009fea:	e001      	b.n	8009ff0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009fec:	2300      	movs	r3, #0
 8009fee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3714      	adds	r7, #20
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	20001240 	.word	0x20001240

0800a004 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a00c:	f7ff fa7a 	bl	8009504 <xTaskGetTickCount>
 800a010:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a012:	4b0b      	ldr	r3, [pc, #44]	@ (800a040 <prvSampleTimeNow+0x3c>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d205      	bcs.n	800a028 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a01c:	f000 f93a 	bl	800a294 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	601a      	str	r2, [r3, #0]
 800a026:	e002      	b.n	800a02e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a02e:	4a04      	ldr	r2, [pc, #16]	@ (800a040 <prvSampleTimeNow+0x3c>)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a034:	68fb      	ldr	r3, [r7, #12]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	20001250 	.word	0x20001250

0800a044 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
 800a050:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a052:	2300      	movs	r3, #0
 800a054:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	429a      	cmp	r2, r3
 800a068:	d812      	bhi.n	800a090 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	1ad2      	subs	r2, r2, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	699b      	ldr	r3, [r3, #24]
 800a074:	429a      	cmp	r2, r3
 800a076:	d302      	bcc.n	800a07e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a078:	2301      	movs	r3, #1
 800a07a:	617b      	str	r3, [r7, #20]
 800a07c:	e01b      	b.n	800a0b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a07e:	4b10      	ldr	r3, [pc, #64]	@ (800a0c0 <prvInsertTimerInActiveList+0x7c>)
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	3304      	adds	r3, #4
 800a086:	4619      	mov	r1, r3
 800a088:	4610      	mov	r0, r2
 800a08a:	f7fe fa1c 	bl	80084c6 <vListInsert>
 800a08e:	e012      	b.n	800a0b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	429a      	cmp	r2, r3
 800a096:	d206      	bcs.n	800a0a6 <prvInsertTimerInActiveList+0x62>
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d302      	bcc.n	800a0a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	617b      	str	r3, [r7, #20]
 800a0a4:	e007      	b.n	800a0b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0a6:	4b07      	ldr	r3, [pc, #28]	@ (800a0c4 <prvInsertTimerInActiveList+0x80>)
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	f7fe fa08 	bl	80084c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a0b6:	697b      	ldr	r3, [r7, #20]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3718      	adds	r7, #24
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	20001244 	.word	0x20001244
 800a0c4:	20001240 	.word	0x20001240

0800a0c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b08e      	sub	sp, #56	@ 0x38
 800a0cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0ce:	e0ce      	b.n	800a26e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	da19      	bge.n	800a10a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a0d6:	1d3b      	adds	r3, r7, #4
 800a0d8:	3304      	adds	r3, #4
 800a0da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10b      	bne.n	800a0fa <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e6:	f383 8811 	msr	BASEPRI, r3
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	61fb      	str	r3, [r7, #28]
}
 800a0f4:	bf00      	nop
 800a0f6:	bf00      	nop
 800a0f8:	e7fd      	b.n	800a0f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a100:	6850      	ldr	r0, [r2, #4]
 800a102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a104:	6892      	ldr	r2, [r2, #8]
 800a106:	4611      	mov	r1, r2
 800a108:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f2c0 80ae 	blt.w	800a26e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d004      	beq.n	800a128 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a120:	3304      	adds	r3, #4
 800a122:	4618      	mov	r0, r3
 800a124:	f7fe fa08 	bl	8008538 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a128:	463b      	mov	r3, r7
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7ff ff6a 	bl	800a004 <prvSampleTimeNow>
 800a130:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2b09      	cmp	r3, #9
 800a136:	f200 8097 	bhi.w	800a268 <prvProcessReceivedCommands+0x1a0>
 800a13a:	a201      	add	r2, pc, #4	@ (adr r2, 800a140 <prvProcessReceivedCommands+0x78>)
 800a13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a140:	0800a169 	.word	0x0800a169
 800a144:	0800a169 	.word	0x0800a169
 800a148:	0800a169 	.word	0x0800a169
 800a14c:	0800a1df 	.word	0x0800a1df
 800a150:	0800a1f3 	.word	0x0800a1f3
 800a154:	0800a23f 	.word	0x0800a23f
 800a158:	0800a169 	.word	0x0800a169
 800a15c:	0800a169 	.word	0x0800a169
 800a160:	0800a1df 	.word	0x0800a1df
 800a164:	0800a1f3 	.word	0x0800a1f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a16a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a16e:	f043 0301 	orr.w	r3, r3, #1
 800a172:	b2da      	uxtb	r2, r3
 800a174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a176:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	18d1      	adds	r1, r2, r3
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a186:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a188:	f7ff ff5c 	bl	800a044 <prvInsertTimerInActiveList>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d06c      	beq.n	800a26c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a198:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1a0:	f003 0304 	and.w	r3, r3, #4
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d061      	beq.n	800a26c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	441a      	add	r2, r3
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1ba:	f7ff fe01 	bl	8009dc0 <xTimerGenericCommand>
 800a1be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a1c0:	6a3b      	ldr	r3, [r7, #32]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d152      	bne.n	800a26c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	61bb      	str	r3, [r7, #24]
}
 800a1d8:	bf00      	nop
 800a1da:	bf00      	nop
 800a1dc:	e7fd      	b.n	800a1da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1e4:	f023 0301 	bic.w	r3, r3, #1
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a1f0:	e03d      	b.n	800a26e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1f8:	f043 0301 	orr.w	r3, r3, #1
 800a1fc:	b2da      	uxtb	r2, r3
 800a1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a200:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a208:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a20c:	699b      	ldr	r3, [r3, #24]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10b      	bne.n	800a22a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a216:	f383 8811 	msr	BASEPRI, r3
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	617b      	str	r3, [r7, #20]
}
 800a224:	bf00      	nop
 800a226:	bf00      	nop
 800a228:	e7fd      	b.n	800a226 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22c:	699a      	ldr	r2, [r3, #24]
 800a22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a230:	18d1      	adds	r1, r2, r3
 800a232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a236:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a238:	f7ff ff04 	bl	800a044 <prvInsertTimerInActiveList>
					break;
 800a23c:	e017      	b.n	800a26e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a240:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a244:	f003 0302 	and.w	r3, r3, #2
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d103      	bne.n	800a254 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a24c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a24e:	f000 fbeb 	bl	800aa28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a252:	e00c      	b.n	800a26e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a256:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a25a:	f023 0301 	bic.w	r3, r3, #1
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a262:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a266:	e002      	b.n	800a26e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a268:	bf00      	nop
 800a26a:	e000      	b.n	800a26e <prvProcessReceivedCommands+0x1a6>
					break;
 800a26c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a26e:	4b08      	ldr	r3, [pc, #32]	@ (800a290 <prvProcessReceivedCommands+0x1c8>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	1d39      	adds	r1, r7, #4
 800a274:	2200      	movs	r2, #0
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe fc0c 	bl	8008a94 <xQueueReceive>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	f47f af26 	bne.w	800a0d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a284:	bf00      	nop
 800a286:	bf00      	nop
 800a288:	3730      	adds	r7, #48	@ 0x30
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	20001248 	.word	0x20001248

0800a294 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b088      	sub	sp, #32
 800a298:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a29a:	e049      	b.n	800a330 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a29c:	4b2e      	ldr	r3, [pc, #184]	@ (800a358 <prvSwitchTimerLists+0xc4>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2a6:	4b2c      	ldr	r3, [pc, #176]	@ (800a358 <prvSwitchTimerLists+0xc4>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	3304      	adds	r3, #4
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7fe f93f 	bl	8008538 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2c8:	f003 0304 	and.w	r3, r3, #4
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d02f      	beq.n	800a330 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d90e      	bls.n	800a300 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2ee:	4b1a      	ldr	r3, [pc, #104]	@ (800a358 <prvSwitchTimerLists+0xc4>)
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	4610      	mov	r0, r2
 800a2fa:	f7fe f8e4 	bl	80084c6 <vListInsert>
 800a2fe:	e017      	b.n	800a330 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a300:	2300      	movs	r3, #0
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	2300      	movs	r3, #0
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	2100      	movs	r1, #0
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f7ff fd58 	bl	8009dc0 <xTimerGenericCommand>
 800a310:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10b      	bne.n	800a330 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	603b      	str	r3, [r7, #0]
}
 800a32a:	bf00      	nop
 800a32c:	bf00      	nop
 800a32e:	e7fd      	b.n	800a32c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a330:	4b09      	ldr	r3, [pc, #36]	@ (800a358 <prvSwitchTimerLists+0xc4>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1b0      	bne.n	800a29c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a33a:	4b07      	ldr	r3, [pc, #28]	@ (800a358 <prvSwitchTimerLists+0xc4>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a340:	4b06      	ldr	r3, [pc, #24]	@ (800a35c <prvSwitchTimerLists+0xc8>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a04      	ldr	r2, [pc, #16]	@ (800a358 <prvSwitchTimerLists+0xc4>)
 800a346:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a348:	4a04      	ldr	r2, [pc, #16]	@ (800a35c <prvSwitchTimerLists+0xc8>)
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	6013      	str	r3, [r2, #0]
}
 800a34e:	bf00      	nop
 800a350:	3718      	adds	r7, #24
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20001240 	.word	0x20001240
 800a35c:	20001244 	.word	0x20001244

0800a360 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a366:	f000 f96f 	bl	800a648 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a36a:	4b15      	ldr	r3, [pc, #84]	@ (800a3c0 <prvCheckForValidListAndQueue+0x60>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d120      	bne.n	800a3b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a372:	4814      	ldr	r0, [pc, #80]	@ (800a3c4 <prvCheckForValidListAndQueue+0x64>)
 800a374:	f7fe f856 	bl	8008424 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a378:	4813      	ldr	r0, [pc, #76]	@ (800a3c8 <prvCheckForValidListAndQueue+0x68>)
 800a37a:	f7fe f853 	bl	8008424 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a37e:	4b13      	ldr	r3, [pc, #76]	@ (800a3cc <prvCheckForValidListAndQueue+0x6c>)
 800a380:	4a10      	ldr	r2, [pc, #64]	@ (800a3c4 <prvCheckForValidListAndQueue+0x64>)
 800a382:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a384:	4b12      	ldr	r3, [pc, #72]	@ (800a3d0 <prvCheckForValidListAndQueue+0x70>)
 800a386:	4a10      	ldr	r2, [pc, #64]	@ (800a3c8 <prvCheckForValidListAndQueue+0x68>)
 800a388:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a38a:	2300      	movs	r3, #0
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	4b11      	ldr	r3, [pc, #68]	@ (800a3d4 <prvCheckForValidListAndQueue+0x74>)
 800a390:	4a11      	ldr	r2, [pc, #68]	@ (800a3d8 <prvCheckForValidListAndQueue+0x78>)
 800a392:	2110      	movs	r1, #16
 800a394:	200a      	movs	r0, #10
 800a396:	f7fe f955 	bl	8008644 <xQueueGenericCreateStatic>
 800a39a:	4603      	mov	r3, r0
 800a39c:	4a08      	ldr	r2, [pc, #32]	@ (800a3c0 <prvCheckForValidListAndQueue+0x60>)
 800a39e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a3a0:	4b07      	ldr	r3, [pc, #28]	@ (800a3c0 <prvCheckForValidListAndQueue+0x60>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d005      	beq.n	800a3b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a3a8:	4b05      	ldr	r3, [pc, #20]	@ (800a3c0 <prvCheckForValidListAndQueue+0x60>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	490b      	ldr	r1, [pc, #44]	@ (800a3dc <prvCheckForValidListAndQueue+0x7c>)
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fe fd58 	bl	8008e64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3b4:	f000 f97a 	bl	800a6ac <vPortExitCritical>
}
 800a3b8:	bf00      	nop
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	20001248 	.word	0x20001248
 800a3c4:	20001218 	.word	0x20001218
 800a3c8:	2000122c 	.word	0x2000122c
 800a3cc:	20001240 	.word	0x20001240
 800a3d0:	20001244 	.word	0x20001244
 800a3d4:	200012f4 	.word	0x200012f4
 800a3d8:	20001254 	.word	0x20001254
 800a3dc:	0800ae90 	.word	0x0800ae90

0800a3e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	3b04      	subs	r3, #4
 800a3f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a3f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	3b04      	subs	r3, #4
 800a3fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	f023 0201 	bic.w	r2, r3, #1
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	3b04      	subs	r3, #4
 800a40e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a410:	4a0c      	ldr	r2, [pc, #48]	@ (800a444 <pxPortInitialiseStack+0x64>)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	3b14      	subs	r3, #20
 800a41a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	3b04      	subs	r3, #4
 800a426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f06f 0202 	mvn.w	r2, #2
 800a42e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	3b20      	subs	r3, #32
 800a434:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a436:	68fb      	ldr	r3, [r7, #12]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr
 800a444:	0800a449 	.word	0x0800a449

0800a448 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a44e:	2300      	movs	r3, #0
 800a450:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a452:	4b13      	ldr	r3, [pc, #76]	@ (800a4a0 <prvTaskExitError+0x58>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a45a:	d00b      	beq.n	800a474 <prvTaskExitError+0x2c>
	__asm volatile
 800a45c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a460:	f383 8811 	msr	BASEPRI, r3
 800a464:	f3bf 8f6f 	isb	sy
 800a468:	f3bf 8f4f 	dsb	sy
 800a46c:	60fb      	str	r3, [r7, #12]
}
 800a46e:	bf00      	nop
 800a470:	bf00      	nop
 800a472:	e7fd      	b.n	800a470 <prvTaskExitError+0x28>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	60bb      	str	r3, [r7, #8]
}
 800a486:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a488:	bf00      	nop
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d0fc      	beq.n	800a48a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a490:	bf00      	nop
 800a492:	bf00      	nop
 800a494:	3714      	adds	r7, #20
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	20000010 	.word	0x20000010
	...

0800a4b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a4b0:	4b07      	ldr	r3, [pc, #28]	@ (800a4d0 <pxCurrentTCBConst2>)
 800a4b2:	6819      	ldr	r1, [r3, #0]
 800a4b4:	6808      	ldr	r0, [r1, #0]
 800a4b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ba:	f380 8809 	msr	PSP, r0
 800a4be:	f3bf 8f6f 	isb	sy
 800a4c2:	f04f 0000 	mov.w	r0, #0
 800a4c6:	f380 8811 	msr	BASEPRI, r0
 800a4ca:	4770      	bx	lr
 800a4cc:	f3af 8000 	nop.w

0800a4d0 <pxCurrentTCBConst2>:
 800a4d0:	20000d18 	.word	0x20000d18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a4d4:	bf00      	nop
 800a4d6:	bf00      	nop

0800a4d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a4d8:	4808      	ldr	r0, [pc, #32]	@ (800a4fc <prvPortStartFirstTask+0x24>)
 800a4da:	6800      	ldr	r0, [r0, #0]
 800a4dc:	6800      	ldr	r0, [r0, #0]
 800a4de:	f380 8808 	msr	MSP, r0
 800a4e2:	f04f 0000 	mov.w	r0, #0
 800a4e6:	f380 8814 	msr	CONTROL, r0
 800a4ea:	b662      	cpsie	i
 800a4ec:	b661      	cpsie	f
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	df00      	svc	0
 800a4f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a4fa:	bf00      	nop
 800a4fc:	e000ed08 	.word	0xe000ed08

0800a500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a506:	4b47      	ldr	r3, [pc, #284]	@ (800a624 <xPortStartScheduler+0x124>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a47      	ldr	r2, [pc, #284]	@ (800a628 <xPortStartScheduler+0x128>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d10b      	bne.n	800a528 <xPortStartScheduler+0x28>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	613b      	str	r3, [r7, #16]
}
 800a522:	bf00      	nop
 800a524:	bf00      	nop
 800a526:	e7fd      	b.n	800a524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a528:	4b3e      	ldr	r3, [pc, #248]	@ (800a624 <xPortStartScheduler+0x124>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a3f      	ldr	r2, [pc, #252]	@ (800a62c <xPortStartScheduler+0x12c>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d10b      	bne.n	800a54a <xPortStartScheduler+0x4a>
	__asm volatile
 800a532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a536:	f383 8811 	msr	BASEPRI, r3
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	60fb      	str	r3, [r7, #12]
}
 800a544:	bf00      	nop
 800a546:	bf00      	nop
 800a548:	e7fd      	b.n	800a546 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a54a:	4b39      	ldr	r3, [pc, #228]	@ (800a630 <xPortStartScheduler+0x130>)
 800a54c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	b2db      	uxtb	r3, r3
 800a554:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	22ff      	movs	r2, #255	@ 0xff
 800a55a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	b2db      	uxtb	r3, r3
 800a562:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a564:	78fb      	ldrb	r3, [r7, #3]
 800a566:	b2db      	uxtb	r3, r3
 800a568:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	4b31      	ldr	r3, [pc, #196]	@ (800a634 <xPortStartScheduler+0x134>)
 800a570:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a572:	4b31      	ldr	r3, [pc, #196]	@ (800a638 <xPortStartScheduler+0x138>)
 800a574:	2207      	movs	r2, #7
 800a576:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a578:	e009      	b.n	800a58e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a57a:	4b2f      	ldr	r3, [pc, #188]	@ (800a638 <xPortStartScheduler+0x138>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	3b01      	subs	r3, #1
 800a580:	4a2d      	ldr	r2, [pc, #180]	@ (800a638 <xPortStartScheduler+0x138>)
 800a582:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a584:	78fb      	ldrb	r3, [r7, #3]
 800a586:	b2db      	uxtb	r3, r3
 800a588:	005b      	lsls	r3, r3, #1
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a58e:	78fb      	ldrb	r3, [r7, #3]
 800a590:	b2db      	uxtb	r3, r3
 800a592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a596:	2b80      	cmp	r3, #128	@ 0x80
 800a598:	d0ef      	beq.n	800a57a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a59a:	4b27      	ldr	r3, [pc, #156]	@ (800a638 <xPortStartScheduler+0x138>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f1c3 0307 	rsb	r3, r3, #7
 800a5a2:	2b04      	cmp	r3, #4
 800a5a4:	d00b      	beq.n	800a5be <xPortStartScheduler+0xbe>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	60bb      	str	r3, [r7, #8]
}
 800a5b8:	bf00      	nop
 800a5ba:	bf00      	nop
 800a5bc:	e7fd      	b.n	800a5ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a5be:	4b1e      	ldr	r3, [pc, #120]	@ (800a638 <xPortStartScheduler+0x138>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	021b      	lsls	r3, r3, #8
 800a5c4:	4a1c      	ldr	r2, [pc, #112]	@ (800a638 <xPortStartScheduler+0x138>)
 800a5c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a5c8:	4b1b      	ldr	r3, [pc, #108]	@ (800a638 <xPortStartScheduler+0x138>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a5d0:	4a19      	ldr	r2, [pc, #100]	@ (800a638 <xPortStartScheduler+0x138>)
 800a5d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	b2da      	uxtb	r2, r3
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a5dc:	4b17      	ldr	r3, [pc, #92]	@ (800a63c <xPortStartScheduler+0x13c>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a16      	ldr	r2, [pc, #88]	@ (800a63c <xPortStartScheduler+0x13c>)
 800a5e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a5e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a5e8:	4b14      	ldr	r3, [pc, #80]	@ (800a63c <xPortStartScheduler+0x13c>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a13      	ldr	r2, [pc, #76]	@ (800a63c <xPortStartScheduler+0x13c>)
 800a5ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a5f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a5f4:	f000 f8da 	bl	800a7ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a5f8:	4b11      	ldr	r3, [pc, #68]	@ (800a640 <xPortStartScheduler+0x140>)
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a5fe:	f000 f8f9 	bl	800a7f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a602:	4b10      	ldr	r3, [pc, #64]	@ (800a644 <xPortStartScheduler+0x144>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a0f      	ldr	r2, [pc, #60]	@ (800a644 <xPortStartScheduler+0x144>)
 800a608:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a60c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a60e:	f7ff ff63 	bl	800a4d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a612:	f7ff f831 	bl	8009678 <vTaskSwitchContext>
	prvTaskExitError();
 800a616:	f7ff ff17 	bl	800a448 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3718      	adds	r7, #24
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	e000ed00 	.word	0xe000ed00
 800a628:	410fc271 	.word	0x410fc271
 800a62c:	410fc270 	.word	0x410fc270
 800a630:	e000e400 	.word	0xe000e400
 800a634:	20001344 	.word	0x20001344
 800a638:	20001348 	.word	0x20001348
 800a63c:	e000ed20 	.word	0xe000ed20
 800a640:	20000010 	.word	0x20000010
 800a644:	e000ef34 	.word	0xe000ef34

0800a648 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	607b      	str	r3, [r7, #4]
}
 800a660:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a662:	4b10      	ldr	r3, [pc, #64]	@ (800a6a4 <vPortEnterCritical+0x5c>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	3301      	adds	r3, #1
 800a668:	4a0e      	ldr	r2, [pc, #56]	@ (800a6a4 <vPortEnterCritical+0x5c>)
 800a66a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a66c:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a4 <vPortEnterCritical+0x5c>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d110      	bne.n	800a696 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a674:	4b0c      	ldr	r3, [pc, #48]	@ (800a6a8 <vPortEnterCritical+0x60>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00b      	beq.n	800a696 <vPortEnterCritical+0x4e>
	__asm volatile
 800a67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a682:	f383 8811 	msr	BASEPRI, r3
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	603b      	str	r3, [r7, #0]
}
 800a690:	bf00      	nop
 800a692:	bf00      	nop
 800a694:	e7fd      	b.n	800a692 <vPortEnterCritical+0x4a>
	}
}
 800a696:	bf00      	nop
 800a698:	370c      	adds	r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	20000010 	.word	0x20000010
 800a6a8:	e000ed04 	.word	0xe000ed04

0800a6ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a6b2:	4b12      	ldr	r3, [pc, #72]	@ (800a6fc <vPortExitCritical+0x50>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d10b      	bne.n	800a6d2 <vPortExitCritical+0x26>
	__asm volatile
 800a6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	607b      	str	r3, [r7, #4]
}
 800a6cc:	bf00      	nop
 800a6ce:	bf00      	nop
 800a6d0:	e7fd      	b.n	800a6ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a6d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a6fc <vPortExitCritical+0x50>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	4a08      	ldr	r2, [pc, #32]	@ (800a6fc <vPortExitCritical+0x50>)
 800a6da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a6dc:	4b07      	ldr	r3, [pc, #28]	@ (800a6fc <vPortExitCritical+0x50>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d105      	bne.n	800a6f0 <vPortExitCritical+0x44>
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	f383 8811 	msr	BASEPRI, r3
}
 800a6ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a6f0:	bf00      	nop
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr
 800a6fc:	20000010 	.word	0x20000010

0800a700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a700:	f3ef 8009 	mrs	r0, PSP
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	4b15      	ldr	r3, [pc, #84]	@ (800a760 <pxCurrentTCBConst>)
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	f01e 0f10 	tst.w	lr, #16
 800a710:	bf08      	it	eq
 800a712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71a:	6010      	str	r0, [r2, #0]
 800a71c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a720:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a724:	f380 8811 	msr	BASEPRI, r0
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	f3bf 8f6f 	isb	sy
 800a730:	f7fe ffa2 	bl	8009678 <vTaskSwitchContext>
 800a734:	f04f 0000 	mov.w	r0, #0
 800a738:	f380 8811 	msr	BASEPRI, r0
 800a73c:	bc09      	pop	{r0, r3}
 800a73e:	6819      	ldr	r1, [r3, #0]
 800a740:	6808      	ldr	r0, [r1, #0]
 800a742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a746:	f01e 0f10 	tst.w	lr, #16
 800a74a:	bf08      	it	eq
 800a74c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a750:	f380 8809 	msr	PSP, r0
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	f3af 8000 	nop.w

0800a760 <pxCurrentTCBConst>:
 800a760:	20000d18 	.word	0x20000d18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a764:	bf00      	nop
 800a766:	bf00      	nop

0800a768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
	__asm volatile
 800a76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	607b      	str	r3, [r7, #4]
}
 800a780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a782:	f7fe fee1 	bl	8009548 <xTaskIncrementTick>
 800a786:	4603      	mov	r3, r0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d003      	beq.n	800a794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a78c:	4b06      	ldr	r3, [pc, #24]	@ (800a7a8 <xPortSysTickHandler+0x40>)
 800a78e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a792:	601a      	str	r2, [r3, #0]
 800a794:	2300      	movs	r3, #0
 800a796:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	f383 8811 	msr	BASEPRI, r3
}
 800a79e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a7a0:	bf00      	nop
 800a7a2:	3708      	adds	r7, #8
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	e000ed04 	.word	0xe000ed04

0800a7ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a7b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a7e0 <vPortSetupTimerInterrupt+0x34>)
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a7b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a7e4 <vPortSetupTimerInterrupt+0x38>)
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a7bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a7e8 <vPortSetupTimerInterrupt+0x3c>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a0a      	ldr	r2, [pc, #40]	@ (800a7ec <vPortSetupTimerInterrupt+0x40>)
 800a7c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7c6:	099b      	lsrs	r3, r3, #6
 800a7c8:	4a09      	ldr	r2, [pc, #36]	@ (800a7f0 <vPortSetupTimerInterrupt+0x44>)
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a7ce:	4b04      	ldr	r3, [pc, #16]	@ (800a7e0 <vPortSetupTimerInterrupt+0x34>)
 800a7d0:	2207      	movs	r2, #7
 800a7d2:	601a      	str	r2, [r3, #0]
}
 800a7d4:	bf00      	nop
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	e000e010 	.word	0xe000e010
 800a7e4:	e000e018 	.word	0xe000e018
 800a7e8:	20000004 	.word	0x20000004
 800a7ec:	10624dd3 	.word	0x10624dd3
 800a7f0:	e000e014 	.word	0xe000e014

0800a7f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a7f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a804 <vPortEnableVFP+0x10>
 800a7f8:	6801      	ldr	r1, [r0, #0]
 800a7fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a7fe:	6001      	str	r1, [r0, #0]
 800a800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a802:	bf00      	nop
 800a804:	e000ed88 	.word	0xe000ed88

0800a808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a808:	b480      	push	{r7}
 800a80a:	b085      	sub	sp, #20
 800a80c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a80e:	f3ef 8305 	mrs	r3, IPSR
 800a812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2b0f      	cmp	r3, #15
 800a818:	d915      	bls.n	800a846 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a81a:	4a18      	ldr	r2, [pc, #96]	@ (800a87c <vPortValidateInterruptPriority+0x74>)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	4413      	add	r3, r2
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a824:	4b16      	ldr	r3, [pc, #88]	@ (800a880 <vPortValidateInterruptPriority+0x78>)
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	7afa      	ldrb	r2, [r7, #11]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d20b      	bcs.n	800a846 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a832:	f383 8811 	msr	BASEPRI, r3
 800a836:	f3bf 8f6f 	isb	sy
 800a83a:	f3bf 8f4f 	dsb	sy
 800a83e:	607b      	str	r3, [r7, #4]
}
 800a840:	bf00      	nop
 800a842:	bf00      	nop
 800a844:	e7fd      	b.n	800a842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a846:	4b0f      	ldr	r3, [pc, #60]	@ (800a884 <vPortValidateInterruptPriority+0x7c>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a84e:	4b0e      	ldr	r3, [pc, #56]	@ (800a888 <vPortValidateInterruptPriority+0x80>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	429a      	cmp	r2, r3
 800a854:	d90b      	bls.n	800a86e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	603b      	str	r3, [r7, #0]
}
 800a868:	bf00      	nop
 800a86a:	bf00      	nop
 800a86c:	e7fd      	b.n	800a86a <vPortValidateInterruptPriority+0x62>
	}
 800a86e:	bf00      	nop
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	e000e3f0 	.word	0xe000e3f0
 800a880:	20001344 	.word	0x20001344
 800a884:	e000ed0c 	.word	0xe000ed0c
 800a888:	20001348 	.word	0x20001348

0800a88c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08a      	sub	sp, #40	@ 0x28
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a894:	2300      	movs	r3, #0
 800a896:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a898:	f7fe fd96 	bl	80093c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a89c:	4b5c      	ldr	r3, [pc, #368]	@ (800aa10 <pvPortMalloc+0x184>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d101      	bne.n	800a8a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a8a4:	f000 f924 	bl	800aaf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a8a8:	4b5a      	ldr	r3, [pc, #360]	@ (800aa14 <pvPortMalloc+0x188>)
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f040 8095 	bne.w	800a9e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d01e      	beq.n	800a8fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a8bc:	2208      	movs	r2, #8
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f003 0307 	and.w	r3, r3, #7
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d015      	beq.n	800a8fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f023 0307 	bic.w	r3, r3, #7
 800a8d4:	3308      	adds	r3, #8
 800a8d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f003 0307 	and.w	r3, r3, #7
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00b      	beq.n	800a8fa <pvPortMalloc+0x6e>
	__asm volatile
 800a8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e6:	f383 8811 	msr	BASEPRI, r3
 800a8ea:	f3bf 8f6f 	isb	sy
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	617b      	str	r3, [r7, #20]
}
 800a8f4:	bf00      	nop
 800a8f6:	bf00      	nop
 800a8f8:	e7fd      	b.n	800a8f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d06f      	beq.n	800a9e0 <pvPortMalloc+0x154>
 800a900:	4b45      	ldr	r3, [pc, #276]	@ (800aa18 <pvPortMalloc+0x18c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	429a      	cmp	r2, r3
 800a908:	d86a      	bhi.n	800a9e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a90a:	4b44      	ldr	r3, [pc, #272]	@ (800aa1c <pvPortMalloc+0x190>)
 800a90c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a90e:	4b43      	ldr	r3, [pc, #268]	@ (800aa1c <pvPortMalloc+0x190>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a914:	e004      	b.n	800a920 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a918:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	429a      	cmp	r2, r3
 800a928:	d903      	bls.n	800a932 <pvPortMalloc+0xa6>
 800a92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1f1      	bne.n	800a916 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a932:	4b37      	ldr	r3, [pc, #220]	@ (800aa10 <pvPortMalloc+0x184>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a938:	429a      	cmp	r2, r3
 800a93a:	d051      	beq.n	800a9e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a93c:	6a3b      	ldr	r3, [r7, #32]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2208      	movs	r2, #8
 800a942:	4413      	add	r3, r2
 800a944:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	6a3b      	ldr	r3, [r7, #32]
 800a94c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a950:	685a      	ldr	r2, [r3, #4]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	1ad2      	subs	r2, r2, r3
 800a956:	2308      	movs	r3, #8
 800a958:	005b      	lsls	r3, r3, #1
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d920      	bls.n	800a9a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a95e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4413      	add	r3, r2
 800a964:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	f003 0307 	and.w	r3, r3, #7
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00b      	beq.n	800a988 <pvPortMalloc+0xfc>
	__asm volatile
 800a970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	613b      	str	r3, [r7, #16]
}
 800a982:	bf00      	nop
 800a984:	bf00      	nop
 800a986:	e7fd      	b.n	800a984 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98a:	685a      	ldr	r2, [r3, #4]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	1ad2      	subs	r2, r2, r3
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a99a:	69b8      	ldr	r0, [r7, #24]
 800a99c:	f000 f90a 	bl	800abb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a9a0:	4b1d      	ldr	r3, [pc, #116]	@ (800aa18 <pvPortMalloc+0x18c>)
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	4a1b      	ldr	r2, [pc, #108]	@ (800aa18 <pvPortMalloc+0x18c>)
 800a9ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a9ae:	4b1a      	ldr	r3, [pc, #104]	@ (800aa18 <pvPortMalloc+0x18c>)
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	4b1b      	ldr	r3, [pc, #108]	@ (800aa20 <pvPortMalloc+0x194>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d203      	bcs.n	800a9c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a9ba:	4b17      	ldr	r3, [pc, #92]	@ (800aa18 <pvPortMalloc+0x18c>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a18      	ldr	r2, [pc, #96]	@ (800aa20 <pvPortMalloc+0x194>)
 800a9c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c4:	685a      	ldr	r2, [r3, #4]
 800a9c6:	4b13      	ldr	r3, [pc, #76]	@ (800aa14 <pvPortMalloc+0x188>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	431a      	orrs	r2, r3
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a9d6:	4b13      	ldr	r3, [pc, #76]	@ (800aa24 <pvPortMalloc+0x198>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	4a11      	ldr	r2, [pc, #68]	@ (800aa24 <pvPortMalloc+0x198>)
 800a9de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a9e0:	f7fe fd00 	bl	80093e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	f003 0307 	and.w	r3, r3, #7
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00b      	beq.n	800aa06 <pvPortMalloc+0x17a>
	__asm volatile
 800a9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	60fb      	str	r3, [r7, #12]
}
 800aa00:	bf00      	nop
 800aa02:	bf00      	nop
 800aa04:	e7fd      	b.n	800aa02 <pvPortMalloc+0x176>
	return pvReturn;
 800aa06:	69fb      	ldr	r3, [r7, #28]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3728      	adds	r7, #40	@ 0x28
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	20001f54 	.word	0x20001f54
 800aa14:	20001f68 	.word	0x20001f68
 800aa18:	20001f58 	.word	0x20001f58
 800aa1c:	20001f4c 	.word	0x20001f4c
 800aa20:	20001f5c 	.word	0x20001f5c
 800aa24:	20001f60 	.word	0x20001f60

0800aa28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d04f      	beq.n	800aada <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa3a:	2308      	movs	r3, #8
 800aa3c:	425b      	negs	r3, r3
 800aa3e:	697a      	ldr	r2, [r7, #20]
 800aa40:	4413      	add	r3, r2
 800aa42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	685a      	ldr	r2, [r3, #4]
 800aa4c:	4b25      	ldr	r3, [pc, #148]	@ (800aae4 <vPortFree+0xbc>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4013      	ands	r3, r2
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10b      	bne.n	800aa6e <vPortFree+0x46>
	__asm volatile
 800aa56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa5a:	f383 8811 	msr	BASEPRI, r3
 800aa5e:	f3bf 8f6f 	isb	sy
 800aa62:	f3bf 8f4f 	dsb	sy
 800aa66:	60fb      	str	r3, [r7, #12]
}
 800aa68:	bf00      	nop
 800aa6a:	bf00      	nop
 800aa6c:	e7fd      	b.n	800aa6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00b      	beq.n	800aa8e <vPortFree+0x66>
	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	60bb      	str	r3, [r7, #8]
}
 800aa88:	bf00      	nop
 800aa8a:	bf00      	nop
 800aa8c:	e7fd      	b.n	800aa8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	685a      	ldr	r2, [r3, #4]
 800aa92:	4b14      	ldr	r3, [pc, #80]	@ (800aae4 <vPortFree+0xbc>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4013      	ands	r3, r2
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d01e      	beq.n	800aada <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d11a      	bne.n	800aada <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	685a      	ldr	r2, [r3, #4]
 800aaa8:	4b0e      	ldr	r3, [pc, #56]	@ (800aae4 <vPortFree+0xbc>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	43db      	mvns	r3, r3
 800aaae:	401a      	ands	r2, r3
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aab4:	f7fe fc88 	bl	80093c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	685a      	ldr	r2, [r3, #4]
 800aabc:	4b0a      	ldr	r3, [pc, #40]	@ (800aae8 <vPortFree+0xc0>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4413      	add	r3, r2
 800aac2:	4a09      	ldr	r2, [pc, #36]	@ (800aae8 <vPortFree+0xc0>)
 800aac4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aac6:	6938      	ldr	r0, [r7, #16]
 800aac8:	f000 f874 	bl	800abb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aacc:	4b07      	ldr	r3, [pc, #28]	@ (800aaec <vPortFree+0xc4>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	3301      	adds	r3, #1
 800aad2:	4a06      	ldr	r2, [pc, #24]	@ (800aaec <vPortFree+0xc4>)
 800aad4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aad6:	f7fe fc85 	bl	80093e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aada:	bf00      	nop
 800aadc:	3718      	adds	r7, #24
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	20001f68 	.word	0x20001f68
 800aae8:	20001f58 	.word	0x20001f58
 800aaec:	20001f64 	.word	0x20001f64

0800aaf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aaf6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800aafa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aafc:	4b27      	ldr	r3, [pc, #156]	@ (800ab9c <prvHeapInit+0xac>)
 800aafe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f003 0307 	and.w	r3, r3, #7
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00c      	beq.n	800ab24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	3307      	adds	r3, #7
 800ab0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f023 0307 	bic.w	r3, r3, #7
 800ab16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab18:	68ba      	ldr	r2, [r7, #8]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	1ad3      	subs	r3, r2, r3
 800ab1e:	4a1f      	ldr	r2, [pc, #124]	@ (800ab9c <prvHeapInit+0xac>)
 800ab20:	4413      	add	r3, r2
 800ab22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab28:	4a1d      	ldr	r2, [pc, #116]	@ (800aba0 <prvHeapInit+0xb0>)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab2e:	4b1c      	ldr	r3, [pc, #112]	@ (800aba0 <prvHeapInit+0xb0>)
 800ab30:	2200      	movs	r2, #0
 800ab32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	4413      	add	r3, r2
 800ab3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab3c:	2208      	movs	r2, #8
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	1a9b      	subs	r3, r3, r2
 800ab42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f023 0307 	bic.w	r3, r3, #7
 800ab4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	4a15      	ldr	r2, [pc, #84]	@ (800aba4 <prvHeapInit+0xb4>)
 800ab50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab52:	4b14      	ldr	r3, [pc, #80]	@ (800aba4 <prvHeapInit+0xb4>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2200      	movs	r2, #0
 800ab58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab5a:	4b12      	ldr	r3, [pc, #72]	@ (800aba4 <prvHeapInit+0xb4>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	68fa      	ldr	r2, [r7, #12]
 800ab6a:	1ad2      	subs	r2, r2, r3
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab70:	4b0c      	ldr	r3, [pc, #48]	@ (800aba4 <prvHeapInit+0xb4>)
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	4a0a      	ldr	r2, [pc, #40]	@ (800aba8 <prvHeapInit+0xb8>)
 800ab7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	4a09      	ldr	r2, [pc, #36]	@ (800abac <prvHeapInit+0xbc>)
 800ab86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab88:	4b09      	ldr	r3, [pc, #36]	@ (800abb0 <prvHeapInit+0xc0>)
 800ab8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ab8e:	601a      	str	r2, [r3, #0]
}
 800ab90:	bf00      	nop
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	2000134c 	.word	0x2000134c
 800aba0:	20001f4c 	.word	0x20001f4c
 800aba4:	20001f54 	.word	0x20001f54
 800aba8:	20001f5c 	.word	0x20001f5c
 800abac:	20001f58 	.word	0x20001f58
 800abb0:	20001f68 	.word	0x20001f68

0800abb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800abb4:	b480      	push	{r7}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800abbc:	4b28      	ldr	r3, [pc, #160]	@ (800ac60 <prvInsertBlockIntoFreeList+0xac>)
 800abbe:	60fb      	str	r3, [r7, #12]
 800abc0:	e002      	b.n	800abc8 <prvInsertBlockIntoFreeList+0x14>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	60fb      	str	r3, [r7, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d8f7      	bhi.n	800abc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	68ba      	ldr	r2, [r7, #8]
 800abdc:	4413      	add	r3, r2
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d108      	bne.n	800abf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	685a      	ldr	r2, [r3, #4]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	441a      	add	r2, r3
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	441a      	add	r2, r3
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d118      	bne.n	800ac3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	4b15      	ldr	r3, [pc, #84]	@ (800ac64 <prvInsertBlockIntoFreeList+0xb0>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d00d      	beq.n	800ac32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	685a      	ldr	r2, [r3, #4]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	441a      	add	r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	601a      	str	r2, [r3, #0]
 800ac30:	e008      	b.n	800ac44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac32:	4b0c      	ldr	r3, [pc, #48]	@ (800ac64 <prvInsertBlockIntoFreeList+0xb0>)
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	601a      	str	r2, [r3, #0]
 800ac3a:	e003      	b.n	800ac44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d002      	beq.n	800ac52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac52:	bf00      	nop
 800ac54:	3714      	adds	r7, #20
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	20001f4c 	.word	0x20001f4c
 800ac64:	20001f54 	.word	0x20001f54

0800ac68 <memset>:
 800ac68:	4402      	add	r2, r0
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d100      	bne.n	800ac72 <memset+0xa>
 800ac70:	4770      	bx	lr
 800ac72:	f803 1b01 	strb.w	r1, [r3], #1
 800ac76:	e7f9      	b.n	800ac6c <memset+0x4>

0800ac78 <_reclaim_reent>:
 800ac78:	4b29      	ldr	r3, [pc, #164]	@ (800ad20 <_reclaim_reent+0xa8>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4283      	cmp	r3, r0
 800ac7e:	b570      	push	{r4, r5, r6, lr}
 800ac80:	4604      	mov	r4, r0
 800ac82:	d04b      	beq.n	800ad1c <_reclaim_reent+0xa4>
 800ac84:	69c3      	ldr	r3, [r0, #28]
 800ac86:	b1ab      	cbz	r3, 800acb4 <_reclaim_reent+0x3c>
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	b16b      	cbz	r3, 800aca8 <_reclaim_reent+0x30>
 800ac8c:	2500      	movs	r5, #0
 800ac8e:	69e3      	ldr	r3, [r4, #28]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	5959      	ldr	r1, [r3, r5]
 800ac94:	2900      	cmp	r1, #0
 800ac96:	d13b      	bne.n	800ad10 <_reclaim_reent+0x98>
 800ac98:	3504      	adds	r5, #4
 800ac9a:	2d80      	cmp	r5, #128	@ 0x80
 800ac9c:	d1f7      	bne.n	800ac8e <_reclaim_reent+0x16>
 800ac9e:	69e3      	ldr	r3, [r4, #28]
 800aca0:	4620      	mov	r0, r4
 800aca2:	68d9      	ldr	r1, [r3, #12]
 800aca4:	f000 f872 	bl	800ad8c <_free_r>
 800aca8:	69e3      	ldr	r3, [r4, #28]
 800acaa:	6819      	ldr	r1, [r3, #0]
 800acac:	b111      	cbz	r1, 800acb4 <_reclaim_reent+0x3c>
 800acae:	4620      	mov	r0, r4
 800acb0:	f000 f86c 	bl	800ad8c <_free_r>
 800acb4:	6961      	ldr	r1, [r4, #20]
 800acb6:	b111      	cbz	r1, 800acbe <_reclaim_reent+0x46>
 800acb8:	4620      	mov	r0, r4
 800acba:	f000 f867 	bl	800ad8c <_free_r>
 800acbe:	69e1      	ldr	r1, [r4, #28]
 800acc0:	b111      	cbz	r1, 800acc8 <_reclaim_reent+0x50>
 800acc2:	4620      	mov	r0, r4
 800acc4:	f000 f862 	bl	800ad8c <_free_r>
 800acc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800acca:	b111      	cbz	r1, 800acd2 <_reclaim_reent+0x5a>
 800accc:	4620      	mov	r0, r4
 800acce:	f000 f85d 	bl	800ad8c <_free_r>
 800acd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800acd4:	b111      	cbz	r1, 800acdc <_reclaim_reent+0x64>
 800acd6:	4620      	mov	r0, r4
 800acd8:	f000 f858 	bl	800ad8c <_free_r>
 800acdc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800acde:	b111      	cbz	r1, 800ace6 <_reclaim_reent+0x6e>
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 f853 	bl	800ad8c <_free_r>
 800ace6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ace8:	b111      	cbz	r1, 800acf0 <_reclaim_reent+0x78>
 800acea:	4620      	mov	r0, r4
 800acec:	f000 f84e 	bl	800ad8c <_free_r>
 800acf0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800acf2:	b111      	cbz	r1, 800acfa <_reclaim_reent+0x82>
 800acf4:	4620      	mov	r0, r4
 800acf6:	f000 f849 	bl	800ad8c <_free_r>
 800acfa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800acfc:	b111      	cbz	r1, 800ad04 <_reclaim_reent+0x8c>
 800acfe:	4620      	mov	r0, r4
 800ad00:	f000 f844 	bl	800ad8c <_free_r>
 800ad04:	6a23      	ldr	r3, [r4, #32]
 800ad06:	b14b      	cbz	r3, 800ad1c <_reclaim_reent+0xa4>
 800ad08:	4620      	mov	r0, r4
 800ad0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad0e:	4718      	bx	r3
 800ad10:	680e      	ldr	r6, [r1, #0]
 800ad12:	4620      	mov	r0, r4
 800ad14:	f000 f83a 	bl	800ad8c <_free_r>
 800ad18:	4631      	mov	r1, r6
 800ad1a:	e7bb      	b.n	800ac94 <_reclaim_reent+0x1c>
 800ad1c:	bd70      	pop	{r4, r5, r6, pc}
 800ad1e:	bf00      	nop
 800ad20:	20000014 	.word	0x20000014

0800ad24 <__libc_init_array>:
 800ad24:	b570      	push	{r4, r5, r6, lr}
 800ad26:	4d0d      	ldr	r5, [pc, #52]	@ (800ad5c <__libc_init_array+0x38>)
 800ad28:	4c0d      	ldr	r4, [pc, #52]	@ (800ad60 <__libc_init_array+0x3c>)
 800ad2a:	1b64      	subs	r4, r4, r5
 800ad2c:	10a4      	asrs	r4, r4, #2
 800ad2e:	2600      	movs	r6, #0
 800ad30:	42a6      	cmp	r6, r4
 800ad32:	d109      	bne.n	800ad48 <__libc_init_array+0x24>
 800ad34:	4d0b      	ldr	r5, [pc, #44]	@ (800ad64 <__libc_init_array+0x40>)
 800ad36:	4c0c      	ldr	r4, [pc, #48]	@ (800ad68 <__libc_init_array+0x44>)
 800ad38:	f000 f87e 	bl	800ae38 <_init>
 800ad3c:	1b64      	subs	r4, r4, r5
 800ad3e:	10a4      	asrs	r4, r4, #2
 800ad40:	2600      	movs	r6, #0
 800ad42:	42a6      	cmp	r6, r4
 800ad44:	d105      	bne.n	800ad52 <__libc_init_array+0x2e>
 800ad46:	bd70      	pop	{r4, r5, r6, pc}
 800ad48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad4c:	4798      	blx	r3
 800ad4e:	3601      	adds	r6, #1
 800ad50:	e7ee      	b.n	800ad30 <__libc_init_array+0xc>
 800ad52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad56:	4798      	blx	r3
 800ad58:	3601      	adds	r6, #1
 800ad5a:	e7f2      	b.n	800ad42 <__libc_init_array+0x1e>
 800ad5c:	0800af70 	.word	0x0800af70
 800ad60:	0800af70 	.word	0x0800af70
 800ad64:	0800af70 	.word	0x0800af70
 800ad68:	0800af74 	.word	0x0800af74

0800ad6c <__retarget_lock_acquire_recursive>:
 800ad6c:	4770      	bx	lr

0800ad6e <__retarget_lock_release_recursive>:
 800ad6e:	4770      	bx	lr

0800ad70 <memcpy>:
 800ad70:	440a      	add	r2, r1
 800ad72:	4291      	cmp	r1, r2
 800ad74:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad78:	d100      	bne.n	800ad7c <memcpy+0xc>
 800ad7a:	4770      	bx	lr
 800ad7c:	b510      	push	{r4, lr}
 800ad7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad86:	4291      	cmp	r1, r2
 800ad88:	d1f9      	bne.n	800ad7e <memcpy+0xe>
 800ad8a:	bd10      	pop	{r4, pc}

0800ad8c <_free_r>:
 800ad8c:	b538      	push	{r3, r4, r5, lr}
 800ad8e:	4605      	mov	r5, r0
 800ad90:	2900      	cmp	r1, #0
 800ad92:	d041      	beq.n	800ae18 <_free_r+0x8c>
 800ad94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad98:	1f0c      	subs	r4, r1, #4
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	bfb8      	it	lt
 800ad9e:	18e4      	addlt	r4, r4, r3
 800ada0:	f000 f83e 	bl	800ae20 <__malloc_lock>
 800ada4:	4a1d      	ldr	r2, [pc, #116]	@ (800ae1c <_free_r+0x90>)
 800ada6:	6813      	ldr	r3, [r2, #0]
 800ada8:	b933      	cbnz	r3, 800adb8 <_free_r+0x2c>
 800adaa:	6063      	str	r3, [r4, #4]
 800adac:	6014      	str	r4, [r2, #0]
 800adae:	4628      	mov	r0, r5
 800adb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adb4:	f000 b83a 	b.w	800ae2c <__malloc_unlock>
 800adb8:	42a3      	cmp	r3, r4
 800adba:	d908      	bls.n	800adce <_free_r+0x42>
 800adbc:	6820      	ldr	r0, [r4, #0]
 800adbe:	1821      	adds	r1, r4, r0
 800adc0:	428b      	cmp	r3, r1
 800adc2:	bf01      	itttt	eq
 800adc4:	6819      	ldreq	r1, [r3, #0]
 800adc6:	685b      	ldreq	r3, [r3, #4]
 800adc8:	1809      	addeq	r1, r1, r0
 800adca:	6021      	streq	r1, [r4, #0]
 800adcc:	e7ed      	b.n	800adaa <_free_r+0x1e>
 800adce:	461a      	mov	r2, r3
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	b10b      	cbz	r3, 800add8 <_free_r+0x4c>
 800add4:	42a3      	cmp	r3, r4
 800add6:	d9fa      	bls.n	800adce <_free_r+0x42>
 800add8:	6811      	ldr	r1, [r2, #0]
 800adda:	1850      	adds	r0, r2, r1
 800addc:	42a0      	cmp	r0, r4
 800adde:	d10b      	bne.n	800adf8 <_free_r+0x6c>
 800ade0:	6820      	ldr	r0, [r4, #0]
 800ade2:	4401      	add	r1, r0
 800ade4:	1850      	adds	r0, r2, r1
 800ade6:	4283      	cmp	r3, r0
 800ade8:	6011      	str	r1, [r2, #0]
 800adea:	d1e0      	bne.n	800adae <_free_r+0x22>
 800adec:	6818      	ldr	r0, [r3, #0]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	6053      	str	r3, [r2, #4]
 800adf2:	4408      	add	r0, r1
 800adf4:	6010      	str	r0, [r2, #0]
 800adf6:	e7da      	b.n	800adae <_free_r+0x22>
 800adf8:	d902      	bls.n	800ae00 <_free_r+0x74>
 800adfa:	230c      	movs	r3, #12
 800adfc:	602b      	str	r3, [r5, #0]
 800adfe:	e7d6      	b.n	800adae <_free_r+0x22>
 800ae00:	6820      	ldr	r0, [r4, #0]
 800ae02:	1821      	adds	r1, r4, r0
 800ae04:	428b      	cmp	r3, r1
 800ae06:	bf04      	itt	eq
 800ae08:	6819      	ldreq	r1, [r3, #0]
 800ae0a:	685b      	ldreq	r3, [r3, #4]
 800ae0c:	6063      	str	r3, [r4, #4]
 800ae0e:	bf04      	itt	eq
 800ae10:	1809      	addeq	r1, r1, r0
 800ae12:	6021      	streq	r1, [r4, #0]
 800ae14:	6054      	str	r4, [r2, #4]
 800ae16:	e7ca      	b.n	800adae <_free_r+0x22>
 800ae18:	bd38      	pop	{r3, r4, r5, pc}
 800ae1a:	bf00      	nop
 800ae1c:	200020a8 	.word	0x200020a8

0800ae20 <__malloc_lock>:
 800ae20:	4801      	ldr	r0, [pc, #4]	@ (800ae28 <__malloc_lock+0x8>)
 800ae22:	f7ff bfa3 	b.w	800ad6c <__retarget_lock_acquire_recursive>
 800ae26:	bf00      	nop
 800ae28:	200020a4 	.word	0x200020a4

0800ae2c <__malloc_unlock>:
 800ae2c:	4801      	ldr	r0, [pc, #4]	@ (800ae34 <__malloc_unlock+0x8>)
 800ae2e:	f7ff bf9e 	b.w	800ad6e <__retarget_lock_release_recursive>
 800ae32:	bf00      	nop
 800ae34:	200020a4 	.word	0x200020a4

0800ae38 <_init>:
 800ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3a:	bf00      	nop
 800ae3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae3e:	bc08      	pop	{r3}
 800ae40:	469e      	mov	lr, r3
 800ae42:	4770      	bx	lr

0800ae44 <_fini>:
 800ae44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae46:	bf00      	nop
 800ae48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae4a:	bc08      	pop	{r3}
 800ae4c:	469e      	mov	lr, r3
 800ae4e:	4770      	bx	lr
