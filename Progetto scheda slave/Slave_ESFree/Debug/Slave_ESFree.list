
Slave_ESFree.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b360  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800b540  0800b540  0000c540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b664  0800b664  0000d064  2**0
                  CONTENTS
  4 .ARM          00000008  0800b664  0800b664  0000c664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b66c  0800b66c  0000d064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b66c  0800b66c  0000c66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b670  0800b670  0000c670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800b674  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020f8  20000068  0800b6d8  0000d068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002160  0800b6d8  0000d160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bbc4  00000000  00000000  0000d094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005921  00000000  00000000  00038c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022b8  00000000  00000000  0003e580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001af3  00000000  00000000  00040838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007802  00000000  00000000  0004232b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c888  00000000  00000000  00049b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00122c4a  00000000  00000000  000763b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00198fff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009870  00000000  00000000  00199044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001a28b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b528 	.word	0x0800b528

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800b528 	.word	0x0800b528

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	@ 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b96a 	b.w	8000ee8 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	460c      	mov	r4, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14e      	bne.n	8000cd6 <__udivmoddi4+0xaa>
 8000c38:	4694      	mov	ip, r2
 8000c3a:	458c      	cmp	ip, r1
 8000c3c:	4686      	mov	lr, r0
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	d962      	bls.n	8000d0a <__udivmoddi4+0xde>
 8000c44:	b14a      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c46:	f1c2 0320 	rsb	r3, r2, #32
 8000c4a:	4091      	lsls	r1, r2
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c54:	4319      	orrs	r1, r3
 8000c56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5e:	fa1f f68c 	uxth.w	r6, ip
 8000c62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c72:	fb04 f106 	mul.w	r1, r4, r6
 8000c76:	4299      	cmp	r1, r3
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x64>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c82:	f080 8112 	bcs.w	8000eaa <__udivmoddi4+0x27e>
 8000c86:	4299      	cmp	r1, r3
 8000c88:	f240 810f 	bls.w	8000eaa <__udivmoddi4+0x27e>
 8000c8c:	3c02      	subs	r4, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a59      	subs	r1, r3, r1
 8000c92:	fa1f f38e 	uxth.w	r3, lr
 8000c96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca2:	fb00 f606 	mul.w	r6, r0, r6
 8000ca6:	429e      	cmp	r6, r3
 8000ca8:	d90a      	bls.n	8000cc0 <__udivmoddi4+0x94>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cb2:	f080 80fc 	bcs.w	8000eae <__udivmoddi4+0x282>
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	f240 80f9 	bls.w	8000eae <__udivmoddi4+0x282>
 8000cbc:	4463      	add	r3, ip
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	1b9b      	subs	r3, r3, r6
 8000cc2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	b11d      	cbz	r5, 8000cd2 <__udivmoddi4+0xa6>
 8000cca:	40d3      	lsrs	r3, r2
 8000ccc:	2200      	movs	r2, #0
 8000cce:	e9c5 3200 	strd	r3, r2, [r5]
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d905      	bls.n	8000ce6 <__udivmoddi4+0xba>
 8000cda:	b10d      	cbz	r5, 8000ce0 <__udivmoddi4+0xb4>
 8000cdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e7f5      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000ce6:	fab3 f183 	clz	r1, r3
 8000cea:	2900      	cmp	r1, #0
 8000cec:	d146      	bne.n	8000d7c <__udivmoddi4+0x150>
 8000cee:	42a3      	cmp	r3, r4
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0xcc>
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	f0c0 80f0 	bcc.w	8000ed8 <__udivmoddi4+0x2ac>
 8000cf8:	1a86      	subs	r6, r0, r2
 8000cfa:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	2d00      	cmp	r5, #0
 8000d02:	d0e6      	beq.n	8000cd2 <__udivmoddi4+0xa6>
 8000d04:	e9c5 6300 	strd	r6, r3, [r5]
 8000d08:	e7e3      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	f040 8090 	bne.w	8000e30 <__udivmoddi4+0x204>
 8000d10:	eba1 040c 	sub.w	r4, r1, ip
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa1f f78c 	uxth.w	r7, ip
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb08 4416 	mls	r4, r8, r6, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb07 f006 	mul.w	r0, r7, r6
 8000d32:	4298      	cmp	r0, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x11c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x11a>
 8000d40:	4298      	cmp	r0, r3
 8000d42:	f200 80cd 	bhi.w	8000ee0 <__udivmoddi4+0x2b4>
 8000d46:	4626      	mov	r6, r4
 8000d48:	1a1c      	subs	r4, r3, r0
 8000d4a:	fa1f f38e 	uxth.w	r3, lr
 8000d4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d52:	fb08 4410 	mls	r4, r8, r0, r4
 8000d56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d5a:	fb00 f707 	mul.w	r7, r0, r7
 8000d5e:	429f      	cmp	r7, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x148>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x146>
 8000d6c:	429f      	cmp	r7, r3
 8000d6e:	f200 80b0 	bhi.w	8000ed2 <__udivmoddi4+0x2a6>
 8000d72:	4620      	mov	r0, r4
 8000d74:	1bdb      	subs	r3, r3, r7
 8000d76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0x9c>
 8000d7c:	f1c1 0620 	rsb	r6, r1, #32
 8000d80:	408b      	lsls	r3, r1
 8000d82:	fa22 f706 	lsr.w	r7, r2, r6
 8000d86:	431f      	orrs	r7, r3
 8000d88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d90:	ea43 030c 	orr.w	r3, r3, ip
 8000d94:	40f4      	lsrs	r4, r6
 8000d96:	fa00 f801 	lsl.w	r8, r0, r1
 8000d9a:	0c38      	lsrs	r0, r7, #16
 8000d9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000da0:	fbb4 fef0 	udiv	lr, r4, r0
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db0:	fb0e f90c 	mul.w	r9, lr, ip
 8000db4:	45a1      	cmp	r9, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	d90a      	bls.n	8000dd2 <__udivmoddi4+0x1a6>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dc2:	f080 8084 	bcs.w	8000ece <__udivmoddi4+0x2a2>
 8000dc6:	45a1      	cmp	r9, r4
 8000dc8:	f240 8081 	bls.w	8000ece <__udivmoddi4+0x2a2>
 8000dcc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	eba4 0409 	sub.w	r4, r4, r9
 8000dd6:	fa1f f983 	uxth.w	r9, r3
 8000dda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dde:	fb00 4413 	mls	r4, r0, r3, r4
 8000de2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x1d2>
 8000dee:	193c      	adds	r4, r7, r4
 8000df0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df4:	d267      	bcs.n	8000ec6 <__udivmoddi4+0x29a>
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d965      	bls.n	8000ec6 <__udivmoddi4+0x29a>
 8000dfa:	3b02      	subs	r3, #2
 8000dfc:	443c      	add	r4, r7
 8000dfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e02:	fba0 9302 	umull	r9, r3, r0, r2
 8000e06:	eba4 040c 	sub.w	r4, r4, ip
 8000e0a:	429c      	cmp	r4, r3
 8000e0c:	46ce      	mov	lr, r9
 8000e0e:	469c      	mov	ip, r3
 8000e10:	d351      	bcc.n	8000eb6 <__udivmoddi4+0x28a>
 8000e12:	d04e      	beq.n	8000eb2 <__udivmoddi4+0x286>
 8000e14:	b155      	cbz	r5, 8000e2c <__udivmoddi4+0x200>
 8000e16:	ebb8 030e 	subs.w	r3, r8, lr
 8000e1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e22:	40cb      	lsrs	r3, r1
 8000e24:	431e      	orrs	r6, r3
 8000e26:	40cc      	lsrs	r4, r1
 8000e28:	e9c5 6400 	strd	r6, r4, [r5]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	e750      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000e30:	f1c2 0320 	rsb	r3, r2, #32
 8000e34:	fa20 f103 	lsr.w	r1, r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e40:	4094      	lsls	r4, r2
 8000e42:	430c      	orrs	r4, r1
 8000e44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4c:	fa1f f78c 	uxth.w	r7, ip
 8000e50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e54:	fb08 3110 	mls	r1, r8, r0, r3
 8000e58:	0c23      	lsrs	r3, r4, #16
 8000e5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5e:	fb00 f107 	mul.w	r1, r0, r7
 8000e62:	4299      	cmp	r1, r3
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x24c>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6e:	d22c      	bcs.n	8000eca <__udivmoddi4+0x29e>
 8000e70:	4299      	cmp	r1, r3
 8000e72:	d92a      	bls.n	8000eca <__udivmoddi4+0x29e>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1a5b      	subs	r3, r3, r1
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e80:	fb08 3311 	mls	r3, r8, r1, r3
 8000e84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e88:	fb01 f307 	mul.w	r3, r1, r7
 8000e8c:	42a3      	cmp	r3, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x276>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e98:	d213      	bcs.n	8000ec2 <__udivmoddi4+0x296>
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	d911      	bls.n	8000ec2 <__udivmoddi4+0x296>
 8000e9e:	3902      	subs	r1, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	1ae4      	subs	r4, r4, r3
 8000ea4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea8:	e739      	b.n	8000d1e <__udivmoddi4+0xf2>
 8000eaa:	4604      	mov	r4, r0
 8000eac:	e6f0      	b.n	8000c90 <__udivmoddi4+0x64>
 8000eae:	4608      	mov	r0, r1
 8000eb0:	e706      	b.n	8000cc0 <__udivmoddi4+0x94>
 8000eb2:	45c8      	cmp	r8, r9
 8000eb4:	d2ae      	bcs.n	8000e14 <__udivmoddi4+0x1e8>
 8000eb6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ebe:	3801      	subs	r0, #1
 8000ec0:	e7a8      	b.n	8000e14 <__udivmoddi4+0x1e8>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	e7ed      	b.n	8000ea2 <__udivmoddi4+0x276>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	e799      	b.n	8000dfe <__udivmoddi4+0x1d2>
 8000eca:	4630      	mov	r0, r6
 8000ecc:	e7d4      	b.n	8000e78 <__udivmoddi4+0x24c>
 8000ece:	46d6      	mov	lr, sl
 8000ed0:	e77f      	b.n	8000dd2 <__udivmoddi4+0x1a6>
 8000ed2:	4463      	add	r3, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e74d      	b.n	8000d74 <__udivmoddi4+0x148>
 8000ed8:	4606      	mov	r6, r0
 8000eda:	4623      	mov	r3, r4
 8000edc:	4608      	mov	r0, r1
 8000ede:	e70f      	b.n	8000d00 <__udivmoddi4+0xd4>
 8000ee0:	3e02      	subs	r6, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	e730      	b.n	8000d48 <__udivmoddi4+0x11c>
 8000ee6:	bf00      	nop

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	@ 0x30
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2220      	movs	r2, #32
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f00a fa27 	bl	800b358 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f0a:	4b32      	ldr	r3, [pc, #200]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000f0c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f12:	4b30      	ldr	r3, [pc, #192]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000f14:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f20:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f26:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f2c:	4b29      	ldr	r3, [pc, #164]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f32:	4b28      	ldr	r3, [pc, #160]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000f34:	2204      	movs	r2, #4
 8000f36:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f38:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f3e:	4b25      	ldr	r3, [pc, #148]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f44:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f4a:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f52:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f58:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f66:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f6c:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f74:	4817      	ldr	r0, [pc, #92]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000f76:	f002 faff 	bl	8003578 <HAL_ADC_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f80:	f000 fff8 	bl	8001f74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4811      	ldr	r0, [pc, #68]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000f90:	f003 fba2 	bl	80046d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f9a:	f000 ffeb 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <MX_ADC1_Init+0xec>)
 8000fa0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000faa:	237f      	movs	r3, #127	@ 0x7f
 8000fac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <MX_ADC1_Init+0xe8>)
 8000fbc:	f002 fe90 	bl	8003ce0 <HAL_ADC_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fc6:	f000 ffd5 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	3730      	adds	r7, #48	@ 0x30
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000084 	.word	0x20000084
 8000fd8:	c3210000 	.word	0xc3210000

08000fdc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b098      	sub	sp, #96	@ 0x60
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2254      	movs	r2, #84	@ 0x54
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f00a f9b3 	bl	800b358 <memset>
  if(adcHandle->Instance==ADC1)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ffa:	d11b      	bne.n	8001034 <HAL_ADC_MspInit+0x58>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ffc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001000:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001002:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001006:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	4618      	mov	r0, r3
 800100e:	f004 fe43 	bl	8005c98 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8001018:	f000 ffac 	bl	8001f74 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800101c:	4b07      	ldr	r3, [pc, #28]	@ (800103c <HAL_ADC_MspInit+0x60>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001020:	4a06      	ldr	r2, [pc, #24]	@ (800103c <HAL_ADC_MspInit+0x60>)
 8001022:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001026:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <HAL_ADC_MspInit+0x60>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001034:	bf00      	nop
 8001036:	3760      	adds	r7, #96	@ 0x60
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021000 	.word	0x40021000

08001040 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */



	PID_Init(&pid1,0.001, 0.5,0);
 8001044:	ed9f 2b28 	vldr	d2, [pc, #160]	@ 80010e8 <MX_FREERTOS_Init+0xa8>
 8001048:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 80010f0 <MX_FREERTOS_Init+0xb0>
 800104c:	ed9f 0b2a 	vldr	d0, [pc, #168]	@ 80010f8 <MX_FREERTOS_Init+0xb8>
 8001050:	482b      	ldr	r0, [pc, #172]	@ (8001100 <MX_FREERTOS_Init+0xc0>)
 8001052:	f000 ff95 	bl	8001f80 <PID_Init>
	PID_Init(&pid2,0.001, 0.5,0);
 8001056:	ed9f 2b24 	vldr	d2, [pc, #144]	@ 80010e8 <MX_FREERTOS_Init+0xa8>
 800105a:	ed9f 1b25 	vldr	d1, [pc, #148]	@ 80010f0 <MX_FREERTOS_Init+0xb0>
 800105e:	ed9f 0b26 	vldr	d0, [pc, #152]	@ 80010f8 <MX_FREERTOS_Init+0xb8>
 8001062:	4828      	ldr	r0, [pc, #160]	@ (8001104 <MX_FREERTOS_Init+0xc4>)
 8001064:	f000 ff8c 	bl	8001f80 <PID_Init>
	PID_Init(&pid3,0.001, 0.5,0);
 8001068:	ed9f 2b1f 	vldr	d2, [pc, #124]	@ 80010e8 <MX_FREERTOS_Init+0xa8>
 800106c:	ed9f 1b20 	vldr	d1, [pc, #128]	@ 80010f0 <MX_FREERTOS_Init+0xb0>
 8001070:	ed9f 0b21 	vldr	d0, [pc, #132]	@ 80010f8 <MX_FREERTOS_Init+0xb8>
 8001074:	4824      	ldr	r0, [pc, #144]	@ (8001108 <MX_FREERTOS_Init+0xc8>)
 8001076:	f000 ff83 	bl	8001f80 <PID_Init>
	PID_Init(&pid4,0.001, 0.5,0);
 800107a:	ed9f 2b1b 	vldr	d2, [pc, #108]	@ 80010e8 <MX_FREERTOS_Init+0xa8>
 800107e:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80010f0 <MX_FREERTOS_Init+0xb0>
 8001082:	ed9f 0b1d 	vldr	d0, [pc, #116]	@ 80010f8 <MX_FREERTOS_Init+0xb8>
 8001086:	4821      	ldr	r0, [pc, #132]	@ (800110c <MX_FREERTOS_Init+0xcc>)
 8001088:	f000 ff7a 	bl	8001f80 <PID_Init>
	HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, SET);
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001092:	481f      	ldr	r0, [pc, #124]	@ (8001110 <MX_FREERTOS_Init+0xd0>)
 8001094:	f003 fea2 	bl	8004ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_R_GPIO_Port, LED2_R_Pin, SET);
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800109e:	481c      	ldr	r0, [pc, #112]	@ (8001110 <MX_FREERTOS_Init+0xd0>)
 80010a0:	f003 fe9c 	bl	8004ddc <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ReadingTask */
  ReadingTaskHandle = osThreadNew(StartReadingTask, NULL, &ReadingTask_attributes);
 80010a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001114 <MX_FREERTOS_Init+0xd4>)
 80010a6:	2100      	movs	r1, #0
 80010a8:	481b      	ldr	r0, [pc, #108]	@ (8001118 <MX_FREERTOS_Init+0xd8>)
 80010aa:	f007 fc52 	bl	8008952 <osThreadNew>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a1a      	ldr	r2, [pc, #104]	@ (800111c <MX_FREERTOS_Init+0xdc>)
 80010b2:	6013      	str	r3, [r2, #0]

  /* creation of CommunicationTa */
  CommunicationTaHandle = osThreadNew(StartCommunicationTask, NULL, &CommunicationTa_attributes);
 80010b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001120 <MX_FREERTOS_Init+0xe0>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	481a      	ldr	r0, [pc, #104]	@ (8001124 <MX_FREERTOS_Init+0xe4>)
 80010ba:	f007 fc4a 	bl	8008952 <osThreadNew>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a19      	ldr	r2, [pc, #100]	@ (8001128 <MX_FREERTOS_Init+0xe8>)
 80010c2:	6013      	str	r3, [r2, #0]

  /* creation of ActuationTask */
  ActuationTaskHandle = osThreadNew(StartActuationTask, NULL, &ActuationTask_attributes);
 80010c4:	4a19      	ldr	r2, [pc, #100]	@ (800112c <MX_FREERTOS_Init+0xec>)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4819      	ldr	r0, [pc, #100]	@ (8001130 <MX_FREERTOS_Init+0xf0>)
 80010ca:	f007 fc42 	bl	8008952 <osThreadNew>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a18      	ldr	r2, [pc, #96]	@ (8001134 <MX_FREERTOS_Init+0xf4>)
 80010d2:	6013      	str	r3, [r2, #0]

  /* creation of EmergencyTask */
  EmergencyTaskHandle = osThreadNew(StartEmergencyTask, NULL, &EmergencyTask_attributes);
 80010d4:	4a18      	ldr	r2, [pc, #96]	@ (8001138 <MX_FREERTOS_Init+0xf8>)
 80010d6:	2100      	movs	r1, #0
 80010d8:	4818      	ldr	r0, [pc, #96]	@ (800113c <MX_FREERTOS_Init+0xfc>)
 80010da:	f007 fc3a 	bl	8008952 <osThreadNew>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a17      	ldr	r2, [pc, #92]	@ (8001140 <MX_FREERTOS_Init+0x100>)
 80010e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
	...
 80010f4:	3fe00000 	.word	0x3fe00000
 80010f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80010fc:	3f50624d 	.word	0x3f50624d
 8001100:	200000f0 	.word	0x200000f0
 8001104:	20000120 	.word	0x20000120
 8001108:	20000150 	.word	0x20000150
 800110c:	20000180 	.word	0x20000180
 8001110:	48000800 	.word	0x48000800
 8001114:	0800b594 	.word	0x0800b594
 8001118:	08001145 	.word	0x08001145
 800111c:	20000234 	.word	0x20000234
 8001120:	0800b5b8 	.word	0x0800b5b8
 8001124:	080011d5 	.word	0x080011d5
 8001128:	20000238 	.word	0x20000238
 800112c:	0800b5dc 	.word	0x0800b5dc
 8001130:	080013b5 	.word	0x080013b5
 8001134:	2000023c 	.word	0x2000023c
 8001138:	0800b600 	.word	0x0800b600
 800113c:	08001479 	.word	0x08001479
 8001140:	20000240 	.word	0x20000240

08001144 <StartReadingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadingTask */
void StartReadingTask(void *argument)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadingTask */
  /* Infinite loop */
  for(;;)
  {

		data_slave.temperatura1=TemperatureSensor_Read();
 800114c:	f001 fb1a 	bl	8002784 <TemperatureSensor_Read>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <StartReadingTask+0x7c>)
 8001156:	801a      	strh	r2, [r3, #0]

	  	if(data_slave.temperatura1>90 || data_slave.temperatura1==-1){start_temp++;}
 8001158:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <StartReadingTask+0x7c>)
 800115a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115e:	2b5a      	cmp	r3, #90	@ 0x5a
 8001160:	dc05      	bgt.n	800116e <StartReadingTask+0x2a>
 8001162:	4b17      	ldr	r3, [pc, #92]	@ (80011c0 <StartReadingTask+0x7c>)
 8001164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116c:	d106      	bne.n	800117c <StartReadingTask+0x38>
 800116e:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <StartReadingTask+0x80>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	b29a      	uxth	r2, r3
 8001176:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <StartReadingTask+0x80>)
 8001178:	801a      	strh	r2, [r3, #0]
 800117a:	e002      	b.n	8001182 <StartReadingTask+0x3e>
	  	else{start_temp=0;}
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <StartReadingTask+0x80>)
 800117e:	2200      	movs	r2, #0
 8001180:	801a      	strh	r2, [r3, #0]

	  	data_slave.encoder1=TIM2->CNT;
 8001182:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001188:	b29a      	uxth	r2, r3
 800118a:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <StartReadingTask+0x7c>)
 800118c:	80da      	strh	r2, [r3, #6]
	  	data_slave.encoder2=TIM3->CNT;
 800118e:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <StartReadingTask+0x84>)
 8001190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <StartReadingTask+0x7c>)
 8001196:	811a      	strh	r2, [r3, #8]
	  	data_slave.encoder3=TIM4->CNT;
 8001198:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <StartReadingTask+0x88>)
 800119a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119c:	b29a      	uxth	r2, r3
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <StartReadingTask+0x7c>)
 80011a0:	815a      	strh	r2, [r3, #10]
	  	data_slave.encoder4=TIM5->CNT;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <StartReadingTask+0x8c>)
 80011a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <StartReadingTask+0x7c>)
 80011aa:	819a      	strh	r2, [r3, #12]

	  	//controllo validità dei dati rilevati dai sensori
	  	dataCheck(start_temp, &data_slave);
 80011ac:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <StartReadingTask+0x80>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	4903      	ldr	r1, [pc, #12]	@ (80011c0 <StartReadingTask+0x7c>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f970 	bl	8001498 <dataCheck>
	  	osDelay(1);
 80011b8:	2001      	movs	r0, #1
 80011ba:	f007 fc5c 	bl	8008a76 <osDelay>
		data_slave.temperatura1=TemperatureSensor_Read();
 80011be:	e7c5      	b.n	800114c <StartReadingTask+0x8>
 80011c0:	200001ec 	.word	0x200001ec
 80011c4:	200001b0 	.word	0x200001b0
 80011c8:	40000400 	.word	0x40000400
 80011cc:	40000800 	.word	0x40000800
 80011d0:	40000c00 	.word	0x40000c00

080011d4 <StartCommunicationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommunicationTask */
void StartCommunicationTask(void *argument)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommunicationTask */
  /* Infinite loop */
  for(;;)
  {
	  // Reset delle variabili di stato
	  state_boards=3;
 80011dc:	4b6c      	ldr	r3, [pc, #432]	@ (8001390 <StartCommunicationTask+0x1bc>)
 80011de:	2203      	movs	r2, #3
 80011e0:	701a      	strb	r2, [r3, #0]
	  final_decision = 3;
 80011e2:	4b6c      	ldr	r3, [pc, #432]	@ (8001394 <StartCommunicationTask+0x1c0>)
 80011e4:	2203      	movs	r2, #3
 80011e6:	701a      	strb	r2, [r3, #0]
	  data_slave.B1_decision = 4;
 80011e8:	4b6b      	ldr	r3, [pc, #428]	@ (8001398 <StartCommunicationTask+0x1c4>)
 80011ea:	2204      	movs	r2, #4
 80011ec:	73da      	strb	r2, [r3, #15]



	  //RICEZIONE PARTIAL STATE DAL MASTER

	  timeout=osKernelGetTickCount();
 80011ee:	f007 fb9b 	bl	8008928 <osKernelGetTickCount>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a69      	ldr	r2, [pc, #420]	@ (800139c <StartCommunicationTask+0x1c8>)
 80011f6:	6013      	str	r3, [r2, #0]
	  while (HAL_GPIO_ReadPin(B2_pin_GPIO_Port, B2_pin_Pin) == GPIO_PIN_RESET){
 80011f8:	e00b      	b.n	8001212 <StartCommunicationTask+0x3e>
		  if(osKernelGetTickCount()-timeout > 80){
 80011fa:	f007 fb95 	bl	8008928 <osKernelGetTickCount>
 80011fe:	4602      	mov	r2, r0
 8001200:	4b66      	ldr	r3, [pc, #408]	@ (800139c <StartCommunicationTask+0x1c8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b50      	cmp	r3, #80	@ 0x50
 8001208:	d903      	bls.n	8001212 <StartCommunicationTask+0x3e>
				state_boards = 0;
 800120a:	4b61      	ldr	r3, [pc, #388]	@ (8001390 <StartCommunicationTask+0x1bc>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
				goto fine;
 8001210:	e0ba      	b.n	8001388 <StartCommunicationTask+0x1b4>
	  while (HAL_GPIO_ReadPin(B2_pin_GPIO_Port, B2_pin_Pin) == GPIO_PIN_RESET){
 8001212:	2110      	movs	r1, #16
 8001214:	4862      	ldr	r0, [pc, #392]	@ (80013a0 <StartCommunicationTask+0x1cc>)
 8001216:	f003 fdc9 	bl	8004dac <HAL_GPIO_ReadPin>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0ec      	beq.n	80011fa <StartCommunicationTask+0x26>
		  }
	  }

	  HAL_GPIO_WritePin(GPIOB, B1_pin_Pin, GPIO_PIN_SET);
 8001220:	2201      	movs	r2, #1
 8001222:	2120      	movs	r1, #32
 8001224:	485e      	ldr	r0, [pc, #376]	@ (80013a0 <StartCommunicationTask+0x1cc>)
 8001226:	f003 fdd9 	bl	8004ddc <HAL_GPIO_WritePin>

	  HAL_SPI_Receive(&hspi1, buffer_receive, sizeof(buffer_receive), HAL_MAX_DELAY);
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	2221      	movs	r2, #33	@ 0x21
 8001230:	495c      	ldr	r1, [pc, #368]	@ (80013a4 <StartCommunicationTask+0x1d0>)
 8001232:	485d      	ldr	r0, [pc, #372]	@ (80013a8 <StartCommunicationTask+0x1d4>)
 8001234:	f005 f99f 	bl	8006576 <HAL_SPI_Receive>

	  HAL_GPIO_WritePin(GPIOB, B1_pin_Pin, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2120      	movs	r1, #32
 800123c:	4858      	ldr	r0, [pc, #352]	@ (80013a0 <StartCommunicationTask+0x1cc>)
 800123e:	f003 fdcd 	bl	8004ddc <HAL_GPIO_WritePin>

	  deserialize_partial(&global_data,&data_slave,buffer_receive);
 8001242:	4a58      	ldr	r2, [pc, #352]	@ (80013a4 <StartCommunicationTask+0x1d0>)
 8001244:	4954      	ldr	r1, [pc, #336]	@ (8001398 <StartCommunicationTask+0x1c4>)
 8001246:	4859      	ldr	r0, [pc, #356]	@ (80013ac <StartCommunicationTask+0x1d8>)
 8001248:	f000 fa34 	bl	80016b4 <deserialize_partial>


	  //DECISIONE DI B1 IN BASE AI DATI

		if(global_data.B2_state==0 && global_data.B1_state==1){ //Emergenza slave
 800124c:	4b57      	ldr	r3, [pc, #348]	@ (80013ac <StartCommunicationTask+0x1d8>)
 800124e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10b      	bne.n	800126e <StartCommunicationTask+0x9a>
 8001256:	4b55      	ldr	r3, [pc, #340]	@ (80013ac <StartCommunicationTask+0x1d8>)
 8001258:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800125c:	2b01      	cmp	r3, #1
 800125e:	d106      	bne.n	800126e <StartCommunicationTask+0x9a>
			state_boards=0;
 8001260:	4b4b      	ldr	r3, [pc, #300]	@ (8001390 <StartCommunicationTask+0x1bc>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
			data_slave.B1_decision = 0;
 8001266:	4b4c      	ldr	r3, [pc, #304]	@ (8001398 <StartCommunicationTask+0x1c4>)
 8001268:	2200      	movs	r2, #0
 800126a:	73da      	strb	r2, [r3, #15]
 800126c:	e02b      	b.n	80012c6 <StartCommunicationTask+0xf2>
		}
		else if(global_data.B2_state==1 && global_data.B1_state==1){ //Attuazione slave
 800126e:	4b4f      	ldr	r3, [pc, #316]	@ (80013ac <StartCommunicationTask+0x1d8>)
 8001270:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001274:	2b01      	cmp	r3, #1
 8001276:	d10b      	bne.n	8001290 <StartCommunicationTask+0xbc>
 8001278:	4b4c      	ldr	r3, [pc, #304]	@ (80013ac <StartCommunicationTask+0x1d8>)
 800127a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800127e:	2b01      	cmp	r3, #1
 8001280:	d106      	bne.n	8001290 <StartCommunicationTask+0xbc>
			state_boards=1;
 8001282:	4b43      	ldr	r3, [pc, #268]	@ (8001390 <StartCommunicationTask+0x1bc>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
			data_slave.B1_decision = 1;
 8001288:	4b43      	ldr	r3, [pc, #268]	@ (8001398 <StartCommunicationTask+0x1c4>)
 800128a:	2201      	movs	r2, #1
 800128c:	73da      	strb	r2, [r3, #15]
 800128e:	e01a      	b.n	80012c6 <StartCommunicationTask+0xf2>
		}
		else if(global_data.B2_state==1 && global_data.B1_state==0){ //Degradato master
 8001290:	4b46      	ldr	r3, [pc, #280]	@ (80013ac <StartCommunicationTask+0x1d8>)
 8001292:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001296:	2b01      	cmp	r3, #1
 8001298:	d108      	bne.n	80012ac <StartCommunicationTask+0xd8>
 800129a:	4b44      	ldr	r3, [pc, #272]	@ (80013ac <StartCommunicationTask+0x1d8>)
 800129c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d103      	bne.n	80012ac <StartCommunicationTask+0xd8>
			data_slave.B1_decision = 2;
 80012a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001398 <StartCommunicationTask+0x1c4>)
 80012a6:	2202      	movs	r2, #2
 80012a8:	73da      	strb	r2, [r3, #15]
 80012aa:	e00c      	b.n	80012c6 <StartCommunicationTask+0xf2>
		}
		else if(global_data.B2_state==0 && global_data.B1_state==0){ // Emergenza master
 80012ac:	4b3f      	ldr	r3, [pc, #252]	@ (80013ac <StartCommunicationTask+0x1d8>)
 80012ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d107      	bne.n	80012c6 <StartCommunicationTask+0xf2>
 80012b6:	4b3d      	ldr	r3, [pc, #244]	@ (80013ac <StartCommunicationTask+0x1d8>)
 80012b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <StartCommunicationTask+0xf2>
			data_slave.B1_decision = 3;
 80012c0:	4b35      	ldr	r3, [pc, #212]	@ (8001398 <StartCommunicationTask+0x1c4>)
 80012c2:	2203      	movs	r2, #3
 80012c4:	73da      	strb	r2, [r3, #15]



		//INVIO PARTIAL STATE AL MASTER PIù DECISIONE SLAVE

		serialize_partial(&data_slave, buffer_send);
 80012c6:	493a      	ldr	r1, [pc, #232]	@ (80013b0 <StartCommunicationTask+0x1dc>)
 80012c8:	4833      	ldr	r0, [pc, #204]	@ (8001398 <StartCommunicationTask+0x1c4>)
 80012ca:	f000 faf7 	bl	80018bc <serialize_partial>


		HAL_GPIO_WritePin(GPIOB, B1_pin_Pin, GPIO_PIN_SET);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2120      	movs	r1, #32
 80012d2:	4833      	ldr	r0, [pc, #204]	@ (80013a0 <StartCommunicationTask+0x1cc>)
 80012d4:	f003 fd82 	bl	8004ddc <HAL_GPIO_WritePin>
	    timeout = osKernelGetTickCount();
 80012d8:	f007 fb26 	bl	8008928 <osKernelGetTickCount>
 80012dc:	4603      	mov	r3, r0
 80012de:	4a2f      	ldr	r2, [pc, #188]	@ (800139c <StartCommunicationTask+0x1c8>)
 80012e0:	6013      	str	r3, [r2, #0]
	    while (HAL_GPIO_ReadPin(GPIOB, B2_pin_Pin) == GPIO_PIN_RESET){
 80012e2:	e00b      	b.n	80012fc <StartCommunicationTask+0x128>
	  		if(osKernelGetTickCount()-timeout > 10){
 80012e4:	f007 fb20 	bl	8008928 <osKernelGetTickCount>
 80012e8:	4602      	mov	r2, r0
 80012ea:	4b2c      	ldr	r3, [pc, #176]	@ (800139c <StartCommunicationTask+0x1c8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b0a      	cmp	r3, #10
 80012f2:	d903      	bls.n	80012fc <StartCommunicationTask+0x128>
	  			/*snprintf(buf, sizeof(buf),"timeout2: %d\r\n", osKernelGetTickCount()-timeout);
	  			HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), HAL_MAX_DELAY);*/
	  				state_boards = 0;
 80012f4:	4b26      	ldr	r3, [pc, #152]	@ (8001390 <StartCommunicationTask+0x1bc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
	  				goto fine;
 80012fa:	e045      	b.n	8001388 <StartCommunicationTask+0x1b4>
	    while (HAL_GPIO_ReadPin(GPIOB, B2_pin_Pin) == GPIO_PIN_RESET){
 80012fc:	2110      	movs	r1, #16
 80012fe:	4828      	ldr	r0, [pc, #160]	@ (80013a0 <StartCommunicationTask+0x1cc>)
 8001300:	f003 fd54 	bl	8004dac <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0ec      	beq.n	80012e4 <StartCommunicationTask+0x110>
	  		}
	     }


		  HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer_send, sizeof(buffer_send), HAL_MAX_DELAY);
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	2210      	movs	r2, #16
 8001310:	4927      	ldr	r1, [pc, #156]	@ (80013b0 <StartCommunicationTask+0x1dc>)
 8001312:	4825      	ldr	r0, [pc, #148]	@ (80013a8 <StartCommunicationTask+0x1d4>)
 8001314:	f004 ffb9 	bl	800628a <HAL_SPI_Transmit>

		  HAL_GPIO_WritePin(GPIOB, B1_pin_Pin, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	2120      	movs	r1, #32
 800131c:	4820      	ldr	r0, [pc, #128]	@ (80013a0 <StartCommunicationTask+0x1cc>)
 800131e:	f003 fd5d 	bl	8004ddc <HAL_GPIO_WritePin>




	  //RICEZIONE DECISIONE FINALE MASTER PIù CONTROLLO FINALE
			timeout=osKernelGetTickCount();
 8001322:	f007 fb01 	bl	8008928 <osKernelGetTickCount>
 8001326:	4603      	mov	r3, r0
 8001328:	4a1c      	ldr	r2, [pc, #112]	@ (800139c <StartCommunicationTask+0x1c8>)
 800132a:	6013      	str	r3, [r2, #0]
			while (HAL_GPIO_ReadPin(B2_pin_GPIO_Port, B2_pin_Pin) == GPIO_PIN_RESET){
 800132c:	e00b      	b.n	8001346 <StartCommunicationTask+0x172>
				if(osKernelGetTickCount()-timeout > 10){
 800132e:	f007 fafb 	bl	8008928 <osKernelGetTickCount>
 8001332:	4602      	mov	r2, r0
 8001334:	4b19      	ldr	r3, [pc, #100]	@ (800139c <StartCommunicationTask+0x1c8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b0a      	cmp	r3, #10
 800133c:	d903      	bls.n	8001346 <StartCommunicationTask+0x172>
					state_boards = 0;
 800133e:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <StartCommunicationTask+0x1bc>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
					goto fine;
 8001344:	e020      	b.n	8001388 <StartCommunicationTask+0x1b4>
			while (HAL_GPIO_ReadPin(B2_pin_GPIO_Port, B2_pin_Pin) == GPIO_PIN_RESET){
 8001346:	2110      	movs	r1, #16
 8001348:	4815      	ldr	r0, [pc, #84]	@ (80013a0 <StartCommunicationTask+0x1cc>)
 800134a:	f003 fd2f 	bl	8004dac <HAL_GPIO_ReadPin>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0ec      	beq.n	800132e <StartCommunicationTask+0x15a>
	  	  		}
	  	  	}

	  	  HAL_GPIO_WritePin(GPIOB, B1_pin_Pin, GPIO_PIN_SET);
 8001354:	2201      	movs	r2, #1
 8001356:	2120      	movs	r1, #32
 8001358:	4811      	ldr	r0, [pc, #68]	@ (80013a0 <StartCommunicationTask+0x1cc>)
 800135a:	f003 fd3f 	bl	8004ddc <HAL_GPIO_WritePin>

	  	  HAL_SPI_Receive(&hspi1, &final_decision, sizeof(final_decision), HAL_MAX_DELAY);
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	2201      	movs	r2, #1
 8001364:	490b      	ldr	r1, [pc, #44]	@ (8001394 <StartCommunicationTask+0x1c0>)
 8001366:	4810      	ldr	r0, [pc, #64]	@ (80013a8 <StartCommunicationTask+0x1d4>)
 8001368:	f005 f905 	bl	8006576 <HAL_SPI_Receive>

	  	  HAL_GPIO_WritePin(GPIOB, B1_pin_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2120      	movs	r1, #32
 8001370:	480b      	ldr	r0, [pc, #44]	@ (80013a0 <StartCommunicationTask+0x1cc>)
 8001372:	f003 fd33 	bl	8004ddc <HAL_GPIO_WritePin>

	  	  //Se la decisione finale è uguale a 0 significa che le due schede
	  	  //hanno preso decisioni differenti e quindi il master prende il comando
	  	  if(final_decision == 0){
 8001376:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <StartCommunicationTask+0x1c0>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d103      	bne.n	8001386 <StartCommunicationTask+0x1b2>
	  		  state_boards = 3;
 800137e:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <StartCommunicationTask+0x1bc>)
 8001380:	2203      	movs	r2, #3
 8001382:	701a      	strb	r2, [r3, #0]
 8001384:	e000      	b.n	8001388 <StartCommunicationTask+0x1b4>
	  	  }

	fine:
 8001386:	bf00      	nop
	osDelay(1);
 8001388:	2001      	movs	r0, #1
 800138a:	f007 fb74 	bl	8008a76 <osDelay>
	  state_boards=3;
 800138e:	e725      	b.n	80011dc <StartCommunicationTask+0x8>
 8001390:	20000000 	.word	0x20000000
 8001394:	20000230 	.word	0x20000230
 8001398:	200001ec 	.word	0x200001ec
 800139c:	200001b4 	.word	0x200001b4
 80013a0:	48000400 	.word	0x48000400
 80013a4:	200001b8 	.word	0x200001b8
 80013a8:	20000298 	.word	0x20000298
 80013ac:	200001fc 	.word	0x200001fc
 80013b0:	200001dc 	.word	0x200001dc

080013b4 <StartActuationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartActuationTask */
void StartActuationTask(void *argument)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartActuationTask */
  /* Infinite loop */
  for(;;)
  {
	if(state_boards==1){
 80013bc:	4b25      	ldr	r3, [pc, #148]	@ (8001454 <StartActuationTask+0xa0>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d143      	bne.n	800144c <StartActuationTask+0x98>
		//funzione per il comando dei motori
		motori(&global_data,&pid1,&pid2,&pid3,&pid4);
 80013c4:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <StartActuationTask+0xa4>)
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	4b24      	ldr	r3, [pc, #144]	@ (800145c <StartActuationTask+0xa8>)
 80013ca:	4a25      	ldr	r2, [pc, #148]	@ (8001460 <StartActuationTask+0xac>)
 80013cc:	4925      	ldr	r1, [pc, #148]	@ (8001464 <StartActuationTask+0xb0>)
 80013ce:	4826      	ldr	r0, [pc, #152]	@ (8001468 <StartActuationTask+0xb4>)
 80013d0:	f000 f89e 	bl	8001510 <motori>

		//Suono clacson
		if(global_data.controller.b_btn==1){
 80013d4:	4b24      	ldr	r3, [pc, #144]	@ (8001468 <StartActuationTask+0xb4>)
 80013d6:	7a9b      	ldrb	r3, [r3, #10]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d106      	bne.n	80013ea <StartActuationTask+0x36>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013e2:	4822      	ldr	r0, [pc, #136]	@ (800146c <StartActuationTask+0xb8>)
 80013e4:	f003 fcfa 	bl	8004ddc <HAL_GPIO_WritePin>
 80013e8:	e005      	b.n	80013f6 <StartActuationTask+0x42>
		}
		else{
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013f0:	481e      	ldr	r0, [pc, #120]	@ (800146c <StartActuationTask+0xb8>)
 80013f2:	f003 fcf3 	bl	8004ddc <HAL_GPIO_WritePin>
		}
		// la variabile globale ledOn viene utilizzata per capire se i led devono essere accesi o spenti
		if(ledOn == 0 && global_data.controller.btn2 == 1 && lastBtn != 1){
 80013f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001470 <StartActuationTask+0xbc>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10e      	bne.n	800141c <StartActuationTask+0x68>
 80013fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <StartActuationTask+0xb4>)
 8001400:	7b1b      	ldrb	r3, [r3, #12]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d10a      	bne.n	800141c <StartActuationTask+0x68>
 8001406:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <StartActuationTask+0xc0>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d006      	beq.n	800141c <StartActuationTask+0x68>
			ledOn = 1;
 800140e:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <StartActuationTask+0xbc>)
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
			lastBtn = 1;
 8001414:	4b17      	ldr	r3, [pc, #92]	@ (8001474 <StartActuationTask+0xc0>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
 800141a:	e015      	b.n	8001448 <StartActuationTask+0x94>
		}else if(global_data.controller.btn2 == 1 && lastBtn != 1){
 800141c:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <StartActuationTask+0xb4>)
 800141e:	7b1b      	ldrb	r3, [r3, #12]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d10a      	bne.n	800143a <StartActuationTask+0x86>
 8001424:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <StartActuationTask+0xc0>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d006      	beq.n	800143a <StartActuationTask+0x86>
			ledOn = 0;
 800142c:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <StartActuationTask+0xbc>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
			lastBtn = 1;
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <StartActuationTask+0xc0>)
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
 8001438:	e006      	b.n	8001448 <StartActuationTask+0x94>
		}else if(global_data.controller.btn2 == 0){
 800143a:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <StartActuationTask+0xb4>)
 800143c:	7b1b      	ldrb	r3, [r3, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <StartActuationTask+0x94>
			lastBtn = 0;
 8001442:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <StartActuationTask+0xc0>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
		}
		ledActuation();
 8001448:	f000 f83c 	bl	80014c4 <ledActuation>

	}
    osDelay(1);
 800144c:	2001      	movs	r0, #1
 800144e:	f007 fb12 	bl	8008a76 <osDelay>
	if(state_boards==1){
 8001452:	e7b3      	b.n	80013bc <StartActuationTask+0x8>
 8001454:	20000000 	.word	0x20000000
 8001458:	20000180 	.word	0x20000180
 800145c:	20000150 	.word	0x20000150
 8001460:	20000120 	.word	0x20000120
 8001464:	200000f0 	.word	0x200000f0
 8001468:	200001fc 	.word	0x200001fc
 800146c:	48000400 	.word	0x48000400
 8001470:	20000231 	.word	0x20000231
 8001474:	20000232 	.word	0x20000232

08001478 <StartEmergencyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEmergencyTask */
void StartEmergencyTask(void *argument)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEmergencyTask */
  /* Infinite loop */
  for(;;)
  {
	if(state_boards==0){
 8001480:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <StartEmergencyTask+0x1c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <StartEmergencyTask+0x14>
		emergency();
 8001488:	f000 f8ec 	bl	8001664 <emergency>
	}
    osDelay(1);
 800148c:	2001      	movs	r0, #1
 800148e:	f007 faf2 	bl	8008a76 <osDelay>
	if(state_boards==0){
 8001492:	e7f5      	b.n	8001480 <StartEmergencyTask+0x8>
 8001494:	20000000 	.word	0x20000000

08001498 <dataCheck>:
  /* USER CODE END StartEmergencyTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void dataCheck(uint16_t start_temp, partial_slave_t* data_slave){
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	80fb      	strh	r3, [r7, #6]

	if(data_slave->encoder1 < 0 || data_slave->encoder2< 0 || data_slave->encoder3< 0 || data_slave->encoder4< 0 || start_temp>200){
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	2bc8      	cmp	r3, #200	@ 0xc8
 80014a8:	d903      	bls.n	80014b2 <dataCheck+0x1a>
		data_slave->B1_state=0;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	2200      	movs	r2, #0
 80014ae:	739a      	strb	r2, [r3, #14]
	}
	else{
		data_slave->B1_state=1;
	}

}
 80014b0:	e002      	b.n	80014b8 <dataCheck+0x20>
		data_slave->B1_state=1;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2201      	movs	r2, #1
 80014b6:	739a      	strb	r2, [r3, #14]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <ledActuation>:

void ledActuation(){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	if(ledOn == 1){
 80014c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <ledActuation+0x44>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d10c      	bne.n	80014ea <ledActuation+0x26>

	HAL_GPIO_WritePin(LED1_W_GPIO_Port, LED1_W_Pin, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014d6:	480d      	ldr	r0, [pc, #52]	@ (800150c <ledActuation+0x48>)
 80014d8:	f003 fc80 	bl	8004ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_W_GPIO_Port, LED2_W_Pin, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014e2:	480a      	ldr	r0, [pc, #40]	@ (800150c <ledActuation+0x48>)
 80014e4:	f003 fc7a 	bl	8004ddc <HAL_GPIO_WritePin>
	}else{
	HAL_GPIO_WritePin(LED1_W_GPIO_Port, LED1_W_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED2_W_GPIO_Port, LED2_W_Pin, GPIO_PIN_SET);
	}
	return;
 80014e8:	e00c      	b.n	8001504 <ledActuation+0x40>
	HAL_GPIO_WritePin(LED1_W_GPIO_Port, LED1_W_Pin, GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014f0:	4806      	ldr	r0, [pc, #24]	@ (800150c <ledActuation+0x48>)
 80014f2:	f003 fc73 	bl	8004ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_W_GPIO_Port, LED2_W_Pin, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014fc:	4803      	ldr	r0, [pc, #12]	@ (800150c <ledActuation+0x48>)
 80014fe:	f003 fc6d 	bl	8004ddc <HAL_GPIO_WritePin>
	return;
 8001502:	bf00      	nop
}
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000231 	.word	0x20000231
 800150c:	48000800 	.word	0x48000800

08001510 <motori>:

void motori(global_t* global_data,PID_Controller *pid1,PID_Controller *pid2,PID_Controller *pid3,PID_Controller *pid4){
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b095      	sub	sp, #84	@ 0x54
 8001514:	af02      	add	r7, sp, #8
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
	wheel_speeds_t speed;
	uint32_t tick1,tick2,tick3,tick4;
	int counterValue1,counterValue2,counterValue3,counterValue4;
	uint8_t power1,power2,power3,power4,INpower2,INpower4;

	speed=compute(&global_data->controller, global_data->sonar1,global_data->sonar2,global_data->sonar3);
 800151e:	68f9      	ldr	r1, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8bda      	ldrh	r2, [r3, #30]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8c1c      	ldrh	r4, [r3, #32]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800152c:	f107 0018 	add.w	r0, r7, #24
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	4623      	mov	r3, r4
 8001534:	f000 fa3a 	bl	80019ac <compute>


	tick1 = HAL_GetTick();
 8001538:	f001 fde6 	bl	8003108 <HAL_GetTick>
 800153c:	6478      	str	r0, [r7, #68]	@ 0x44
	counterValue1 = TIM2->CNT;
 800153e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001544:	643b      	str	r3, [r7, #64]	@ 0x40
	power1=PID_Compute(pid1, counterValue1, tick1, speed.right_speed, 2448.0,1);
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	ee07 3a90 	vmov	s15, r3
 800154c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001550:	2301      	movs	r3, #1
 8001552:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 800164c <motori+0x13c>
 8001556:	eeb0 0a67 	vmov.f32	s0, s15
 800155a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800155c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800155e:	68b8      	ldr	r0, [r7, #8]
 8001560:	f000 fd42 	bl	8001fe8 <PID_Compute>
 8001564:	4603      	mov	r3, r0
 8001566:	75fb      	strb	r3, [r7, #23]


	tick2 = HAL_GetTick();
 8001568:	f001 fdce 	bl	8003108 <HAL_GetTick>
 800156c:	63f8      	str	r0, [r7, #60]	@ 0x3c
	counterValue2 = TIM3->CNT;
 800156e:	4b38      	ldr	r3, [pc, #224]	@ (8001650 <motori+0x140>)
 8001570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001572:	63bb      	str	r3, [r7, #56]	@ 0x38
	power2=PID_Compute(pid2, counterValue2, tick2, speed.left_speed, 2448.0,2);
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	ee07 3a90 	vmov	s15, r3
 800157a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157e:	2302      	movs	r3, #2
 8001580:	eddf 0a32 	vldr	s1, [pc, #200]	@ 800164c <motori+0x13c>
 8001584:	eeb0 0a67 	vmov.f32	s0, s15
 8001588:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800158a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 fd2b 	bl	8001fe8 <PID_Compute>
 8001592:	4603      	mov	r3, r0
 8001594:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	INpower2=power2+127;
 8001598:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800159c:	337f      	adds	r3, #127	@ 0x7f
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	757b      	strb	r3, [r7, #21]


	tick3 = HAL_GetTick();
 80015a2:	f001 fdb1 	bl	8003108 <HAL_GetTick>
 80015a6:	6338      	str	r0, [r7, #48]	@ 0x30
	counterValue3 = TIM4->CNT;
 80015a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001654 <motori+0x144>)
 80015aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	power3=PID_Compute(pid3, counterValue3, tick3, speed.right_speed, 2448.0,3);
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	ee07 3a90 	vmov	s15, r3
 80015b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b8:	2303      	movs	r3, #3
 80015ba:	eddf 0a24 	vldr	s1, [pc, #144]	@ 800164c <motori+0x13c>
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80015c6:	6838      	ldr	r0, [r7, #0]
 80015c8:	f000 fd0e 	bl	8001fe8 <PID_Compute>
 80015cc:	4603      	mov	r3, r0
 80015ce:	75bb      	strb	r3, [r7, #22]


	tick4 = HAL_GetTick();
 80015d0:	f001 fd9a 	bl	8003108 <HAL_GetTick>
 80015d4:	62b8      	str	r0, [r7, #40]	@ 0x28
	counterValue4 = TIM5->CNT;
 80015d6:	4b20      	ldr	r3, [pc, #128]	@ (8001658 <motori+0x148>)
 80015d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015da:	627b      	str	r3, [r7, #36]	@ 0x24
	power4=PID_Compute(pid4, counterValue4, tick4, speed.left_speed, 2448.0,4);
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	ee07 3a90 	vmov	s15, r3
 80015e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e6:	2304      	movs	r3, #4
 80015e8:	eddf 0a18 	vldr	s1, [pc, #96]	@ 800164c <motori+0x13c>
 80015ec:	eeb0 0a67 	vmov.f32	s0, s15
 80015f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015f4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80015f6:	f000 fcf7 	bl	8001fe8 <PID_Compute>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	INpower4=power4+127;
 8001600:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001604:	337f      	adds	r3, #127	@ 0x7f
 8001606:	b2db      	uxtb	r3, r3
 8001608:	753b      	strb	r3, [r7, #20]



	HAL_UART_Transmit(&huart1, &power1,1,0);
 800160a:	f107 0117 	add.w	r1, r7, #23
 800160e:	2300      	movs	r3, #0
 8001610:	2201      	movs	r2, #1
 8001612:	4812      	ldr	r0, [pc, #72]	@ (800165c <motori+0x14c>)
 8001614:	f006 fa4e 	bl	8007ab4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &INpower2, 1,0);
 8001618:	f107 0115 	add.w	r1, r7, #21
 800161c:	2300      	movs	r3, #0
 800161e:	2201      	movs	r2, #1
 8001620:	480e      	ldr	r0, [pc, #56]	@ (800165c <motori+0x14c>)
 8001622:	f006 fa47 	bl	8007ab4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, &power3, 1,0);
 8001626:	f107 0116 	add.w	r1, r7, #22
 800162a:	2300      	movs	r3, #0
 800162c:	2201      	movs	r2, #1
 800162e:	480c      	ldr	r0, [pc, #48]	@ (8001660 <motori+0x150>)
 8001630:	f006 fa40 	bl	8007ab4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, &INpower4, 1,0);
 8001634:	f107 0114 	add.w	r1, r7, #20
 8001638:	2300      	movs	r3, #0
 800163a:	2201      	movs	r2, #1
 800163c:	4808      	ldr	r0, [pc, #32]	@ (8001660 <motori+0x150>)
 800163e:	f006 fa39 	bl	8007ab4 <HAL_UART_Transmit>


}
 8001642:	bf00      	nop
 8001644:	374c      	adds	r7, #76	@ 0x4c
 8001646:	46bd      	mov	sp, r7
 8001648:	bd90      	pop	{r4, r7, pc}
 800164a:	bf00      	nop
 800164c:	45190000 	.word	0x45190000
 8001650:	40000400 	.word	0x40000400
 8001654:	40000800 	.word	0x40000800
 8001658:	40000c00 	.word	0x40000c00
 800165c:	20000478 	.word	0x20000478
 8001660:	200005a0 	.word	0x200005a0

08001664 <emergency>:


void emergency(){
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
    uint8_t power=64;
 800166a:	2340      	movs	r3, #64	@ 0x40
 800166c:	71fb      	strb	r3, [r7, #7]
    uint8_t power2=64+127;
 800166e:	23bf      	movs	r3, #191	@ 0xbf
 8001670:	71bb      	strb	r3, [r7, #6]

    HAL_UART_Transmit(&huart1, &power, 1,0);
 8001672:	1df9      	adds	r1, r7, #7
 8001674:	2300      	movs	r3, #0
 8001676:	2201      	movs	r2, #1
 8001678:	480c      	ldr	r0, [pc, #48]	@ (80016ac <emergency+0x48>)
 800167a:	f006 fa1b 	bl	8007ab4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &power2, 1,0);
 800167e:	1db9      	adds	r1, r7, #6
 8001680:	2300      	movs	r3, #0
 8001682:	2201      	movs	r2, #1
 8001684:	4809      	ldr	r0, [pc, #36]	@ (80016ac <emergency+0x48>)
 8001686:	f006 fa15 	bl	8007ab4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, &power, 1,0);
 800168a:	1df9      	adds	r1, r7, #7
 800168c:	2300      	movs	r3, #0
 800168e:	2201      	movs	r2, #1
 8001690:	4807      	ldr	r0, [pc, #28]	@ (80016b0 <emergency+0x4c>)
 8001692:	f006 fa0f 	bl	8007ab4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, &power2, 1,0);
 8001696:	1db9      	adds	r1, r7, #6
 8001698:	2300      	movs	r3, #0
 800169a:	2201      	movs	r2, #1
 800169c:	4804      	ldr	r0, [pc, #16]	@ (80016b0 <emergency+0x4c>)
 800169e:	f006 fa09 	bl	8007ab4 <HAL_UART_Transmit>

}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000478 	.word	0x20000478
 80016b0:	200005a0 	.word	0x200005a0

080016b4 <deserialize_partial>:
TRACCIA: 
Progettare e implementare un rover in grado di eseguire i comandi ricevuti tramite un controller il rover può trovarsi in tre diversi stati operativi: OK quando il sistema funziona correttamente senza anomalie, DEGRADATO in caso di malfunzionamento parziale che riduce alcune funzionalità ma mantiene il rover operativo, EMERGENZA quando il rover entra in uno stato di sicurezza per prevenire danni limitando o sospendendo le operazioni.
*/

#include "com.h"
void deserialize_partial(global_t* global_data,partial_slave_t* data_slave, const uint8_t* buffer_recived) {
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]

	global_data->controller.ax = (buffer_recived[0] << 8) | buffer_recived[1];
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	b21a      	sxth	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3301      	adds	r3, #1
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	801a      	strh	r2, [r3, #0]
	global_data->controller.ay = (buffer_recived[2] << 8) | buffer_recived[3];
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3302      	adds	r3, #2
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	b21a      	sxth	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3303      	adds	r3, #3
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	805a      	strh	r2, [r3, #2]
	global_data->controller.a_btn = buffer_recived[4];
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3304      	adds	r3, #4
 80016fa:	781a      	ldrb	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	711a      	strb	r2, [r3, #4]
	global_data->controller.bx = (buffer_recived[5] << 8) | buffer_recived[6];
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3305      	adds	r3, #5
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	b21a      	sxth	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3306      	adds	r3, #6
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	b21b      	sxth	r3, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	b21b      	sxth	r3, r3
 8001716:	b29a      	uxth	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	80da      	strh	r2, [r3, #6]
	global_data->controller.by = (buffer_recived[7] << 8) | buffer_recived[8];
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3307      	adds	r3, #7
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	b21a      	sxth	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3308      	adds	r3, #8
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b21b      	sxth	r3, r3
 800172e:	4313      	orrs	r3, r2
 8001730:	b21b      	sxth	r3, r3
 8001732:	b29a      	uxth	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	811a      	strh	r2, [r3, #8]
	global_data->controller.b_btn = buffer_recived[9];
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3309      	adds	r3, #9
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	729a      	strb	r2, [r3, #10]
	global_data->controller.btn1 = buffer_recived[10];
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	330a      	adds	r3, #10
 8001746:	781a      	ldrb	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	72da      	strb	r2, [r3, #11]
	global_data->controller.btn2 = buffer_recived[11];
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	330b      	adds	r3, #11
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	731a      	strb	r2, [r3, #12]

	global_data->accelerometer.acc_x=(buffer_recived[12] << 8) | buffer_recived[13];
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	330c      	adds	r3, #12
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	b21a      	sxth	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	330d      	adds	r3, #13
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	b21b      	sxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b21a      	sxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	81da      	strh	r2, [r3, #14]
	global_data->accelerometer.acc_y=(buffer_recived[14] << 8) | buffer_recived[15];
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	330e      	adds	r3, #14
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	b21a      	sxth	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	330f      	adds	r3, #15
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b21b      	sxth	r3, r3
 8001782:	4313      	orrs	r3, r2
 8001784:	b21a      	sxth	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	821a      	strh	r2, [r3, #16]
	global_data->accelerometer.acc_z=(buffer_recived[16] << 8) | buffer_recived[17];
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3310      	adds	r3, #16
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	b21a      	sxth	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3311      	adds	r3, #17
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b21b      	sxth	r3, r3
 800179c:	4313      	orrs	r3, r2
 800179e:	b21a      	sxth	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	825a      	strh	r2, [r3, #18]
	global_data->accelerometer.gyro_x=(buffer_recived[18] << 8) | buffer_recived[19];
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3312      	adds	r3, #18
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	b21a      	sxth	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3313      	adds	r3, #19
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b21b      	sxth	r3, r3
 80017b6:	4313      	orrs	r3, r2
 80017b8:	b21a      	sxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	829a      	strh	r2, [r3, #20]
	global_data->accelerometer.gyro_y=(buffer_recived[20] << 8) | buffer_recived[21];
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3314      	adds	r3, #20
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	b21a      	sxth	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3315      	adds	r3, #21
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	82da      	strh	r2, [r3, #22]
	global_data->accelerometer.gyro_z=(buffer_recived[22] << 8) | buffer_recived[23];
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3316      	adds	r3, #22
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	b21a      	sxth	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3317      	adds	r3, #23
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b21a      	sxth	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	831a      	strh	r2, [r3, #24]

	global_data->temperatura1 = data_slave->temperatura1;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	835a      	strh	r2, [r3, #26]
	global_data->temperatura2 = (buffer_recived[24] << 8) | buffer_recived[25];
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3318      	adds	r3, #24
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	b21a      	sxth	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3319      	adds	r3, #25
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b21b      	sxth	r3, r3
 800180e:	4313      	orrs	r3, r2
 8001810:	b21a      	sxth	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	839a      	strh	r2, [r3, #28]
	global_data->sonar1 = (buffer_recived[26] << 8) | buffer_recived[27];
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	331a      	adds	r3, #26
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	b21a      	sxth	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	331b      	adds	r3, #27
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b21b      	sxth	r3, r3
 8001828:	4313      	orrs	r3, r2
 800182a:	b21b      	sxth	r3, r3
 800182c:	b29a      	uxth	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	83da      	strh	r2, [r3, #30]
	global_data->sonar2 = (buffer_recived[28] << 8) | buffer_recived[29];
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	331c      	adds	r3, #28
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	021b      	lsls	r3, r3, #8
 800183a:	b21a      	sxth	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	331d      	adds	r3, #29
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b21b      	sxth	r3, r3
 8001844:	4313      	orrs	r3, r2
 8001846:	b21b      	sxth	r3, r3
 8001848:	b29a      	uxth	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	841a      	strh	r2, [r3, #32]
	global_data->sonar3 = (buffer_recived[30] << 8) | buffer_recived[31];
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	331e      	adds	r3, #30
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b21a      	sxth	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	331f      	adds	r3, #31
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b21b      	sxth	r3, r3
 8001860:	4313      	orrs	r3, r2
 8001862:	b21b      	sxth	r3, r3
 8001864:	b29a      	uxth	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	845a      	strh	r2, [r3, #34]	@ 0x22
	global_data->led1 = data_slave->led1;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	885a      	ldrh	r2, [r3, #2]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	849a      	strh	r2, [r3, #36]	@ 0x24
	global_data->led2 = data_slave->led2;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	889a      	ldrh	r2, [r3, #4]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	84da      	strh	r2, [r3, #38]	@ 0x26
	global_data->encoder1 = data_slave->encoder1;
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	88da      	ldrh	r2, [r3, #6]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	851a      	strh	r2, [r3, #40]	@ 0x28
	global_data->encoder2 = data_slave->encoder2;
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	891a      	ldrh	r2, [r3, #8]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	855a      	strh	r2, [r3, #42]	@ 0x2a
	global_data->encoder3 = data_slave->encoder3;
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	895a      	ldrh	r2, [r3, #10]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	859a      	strh	r2, [r3, #44]	@ 0x2c
	global_data->encoder4 = data_slave->encoder4;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	899a      	ldrh	r2, [r3, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	85da      	strh	r2, [r3, #46]	@ 0x2e
	global_data->B1_state=data_slave->B1_state;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	7b9a      	ldrb	r2, [r3, #14]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	global_data->B2_state=buffer_recived[32];
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3320      	adds	r3, #32
 80018a8:	781a      	ldrb	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <serialize_partial>:
void serialize_partial(const partial_slave_t *data_slave, uint8_t *buffer_send) {
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]

	buffer_send[0] = (data_slave->temperatura1 >> 8) & 0xFF;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018cc:	121b      	asrs	r3, r3, #8
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	701a      	strb	r2, [r3, #0]
	buffer_send[1] = data_slave->temperatura1 & 0xFF;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	701a      	strb	r2, [r3, #0]

    buffer_send[2] = (data_slave->led1 >> 8) & 0xFF;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	885b      	ldrh	r3, [r3, #2]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	3302      	adds	r3, #2
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	701a      	strb	r2, [r3, #0]
    buffer_send[3] = data_slave->led1 & 0xFF;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	885a      	ldrh	r2, [r3, #2]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	3303      	adds	r3, #3
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	701a      	strb	r2, [r3, #0]
    buffer_send[4] = (data_slave->led2 >> 8) & 0xFF;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	889b      	ldrh	r3, [r3, #4]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	b29a      	uxth	r2, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	3304      	adds	r3, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	701a      	strb	r2, [r3, #0]
    buffer_send[5] = data_slave->led2 & 0xFF;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	889a      	ldrh	r2, [r3, #4]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	3305      	adds	r3, #5
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	701a      	strb	r2, [r3, #0]

    buffer_send[6] = (data_slave->encoder1 >> 8) & 0xFF;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	88db      	ldrh	r3, [r3, #6]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	b29a      	uxth	r2, r3
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	3306      	adds	r3, #6
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	701a      	strb	r2, [r3, #0]
    buffer_send[7] = data_slave->encoder1 & 0xFF;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	88da      	ldrh	r2, [r3, #6]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	3307      	adds	r3, #7
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	701a      	strb	r2, [r3, #0]
    buffer_send[8] = (data_slave->encoder2 >> 8) & 0xFF;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	891b      	ldrh	r3, [r3, #8]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	b29a      	uxth	r2, r3
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	3308      	adds	r3, #8
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	701a      	strb	r2, [r3, #0]
    buffer_send[9] = data_slave->encoder2 & 0xFF;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	891a      	ldrh	r2, [r3, #8]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	3309      	adds	r3, #9
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	701a      	strb	r2, [r3, #0]
    buffer_send[10] = (data_slave->encoder3 >> 8) & 0xFF;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	895b      	ldrh	r3, [r3, #10]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	b29a      	uxth	r2, r3
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	330a      	adds	r3, #10
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	701a      	strb	r2, [r3, #0]
    buffer_send[11] = data_slave->encoder3 & 0xFF;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	895a      	ldrh	r2, [r3, #10]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	330b      	adds	r3, #11
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	701a      	strb	r2, [r3, #0]
    buffer_send[12] = (data_slave->encoder4 >> 8) & 0xFF;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	899b      	ldrh	r3, [r3, #12]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	b29a      	uxth	r2, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	330c      	adds	r3, #12
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	701a      	strb	r2, [r3, #0]
    buffer_send[13] = data_slave->encoder4 & 0xFF;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	899a      	ldrh	r2, [r3, #12]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	330d      	adds	r3, #13
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	701a      	strb	r2, [r3, #0]

    buffer_send[14]=data_slave->B1_state;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	330e      	adds	r3, #14
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	7b92      	ldrb	r2, [r2, #14]
 8001994:	701a      	strb	r2, [r3, #0]
    buffer_send[15]=data_slave->B1_decision;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	330f      	adds	r3, #15
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	7bd2      	ldrb	r2, [r2, #15]
 800199e:	701a      	strb	r2, [r3, #0]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <compute>:
 *    - Se nessuna delle condizioni precedenti è verificata, viene chiamata la funzione per calcolare
 *      la velocità delle ruote e la rotazione, utilizzando i dati ricevuti (`bx` e `ay`).
 */


wheel_speeds_t compute(controller_t *controller_data, uint16_t sonar1, uint16_t sonar2, uint16_t sonar3){
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b089      	sub	sp, #36	@ 0x24
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	4611      	mov	r1, r2
 80019b8:	461a      	mov	r2, r3
 80019ba:	460b      	mov	r3, r1
 80019bc:	80fb      	strh	r3, [r7, #6]
 80019be:	4613      	mov	r3, r2
 80019c0:	80bb      	strh	r3, [r7, #4]
	wheel_speeds_t speeds;

    if (are_values_zero(controller_data->ax, controller_data->ay, controller_data->bx, controller_data->by) ||
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	885b      	ldrh	r3, [r3, #2]
 80019cc:	4619      	mov	r1, r3
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	88db      	ldrh	r3, [r3, #6]
 80019d2:	461a      	mov	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	891b      	ldrh	r3, [r3, #8]
 80019d8:	f000 f8fe 	bl	8001bd8 <are_values_zero>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d12b      	bne.n	8001a3a <compute+0x8e>
    		is_invalid_value(controller_data->ax, 0, 511) ||
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f8d9 	bl	8001ba4 <is_invalid_value>
 80019f2:	4603      	mov	r3, r0
    if (are_values_zero(controller_data->ax, controller_data->ay, controller_data->bx, controller_data->by) ||
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d120      	bne.n	8001a3a <compute+0x8e>
			is_invalid_value(controller_data->ay, 0, 511) ||
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	885b      	ldrh	r3, [r3, #2]
 80019fc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 f8ce 	bl	8001ba4 <is_invalid_value>
 8001a08:	4603      	mov	r3, r0
    		is_invalid_value(controller_data->ax, 0, 511) ||
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d115      	bne.n	8001a3a <compute+0x8e>
			is_invalid_value(controller_data->bx, 0, 511) ||
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	88db      	ldrh	r3, [r3, #6]
 8001a12:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 f8c3 	bl	8001ba4 <is_invalid_value>
 8001a1e:	4603      	mov	r3, r0
			is_invalid_value(controller_data->ay, 0, 511) ||
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10a      	bne.n	8001a3a <compute+0x8e>
			is_invalid_value(controller_data->by, 0, 511)){
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	891b      	ldrh	r3, [r3, #8]
 8001a28:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f8b8 	bl	8001ba4 <is_invalid_value>
 8001a34:	4603      	mov	r3, r0
			is_invalid_value(controller_data->bx, 0, 511) ||
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d004      	beq.n	8001a44 <compute+0x98>

		  speeds.left_speed=0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
		  speeds.right_speed=0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	e019      	b.n	8001a78 <compute+0xcc>
    }
    else{
        if(controller_data->btn1 == 0){
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	7adb      	ldrb	r3, [r3, #11]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d111      	bne.n	8001a70 <compute+0xc4>
        	speeds = calculate_wheel_speeds(controller_data->bx,controller_data->ay, sonar1, sonar2, sonar3);
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	88db      	ldrh	r3, [r3, #6]
 8001a50:	4619      	mov	r1, r3
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	885b      	ldrh	r3, [r3, #2]
 8001a56:	461c      	mov	r4, r3
 8001a58:	f107 0010 	add.w	r0, r7, #16
 8001a5c:	88fa      	ldrh	r2, [r7, #6]
 8001a5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001a60:	9301      	str	r3, [sp, #4]
 8001a62:	88bb      	ldrh	r3, [r7, #4]
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	4613      	mov	r3, r2
 8001a68:	4622      	mov	r2, r4
 8001a6a:	f000 f811 	bl	8001a90 <calculate_wheel_speeds>
 8001a6e:	e003      	b.n	8001a78 <compute+0xcc>
        }
        else{
        	speeds.left_speed=0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	613b      	str	r3, [r7, #16]
        	speeds.right_speed=0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
        }
    }

    return speeds;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a84:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	371c      	adds	r7, #28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd90      	pop	{r4, r7, pc}

08001a90 <calculate_wheel_speeds>:
 * 3. Restituzione delle velocità:
 *    - La funzione restituisce una struttura `wheel_speeds_t` contenente le velocità calcolate
 *      per la ruota sinistra (`left_speed`) e la ruota destra (`right_speed`).
 */

wheel_speeds_t calculate_wheel_speeds(int PAD2_x_value, int PAD1_y_value, uint16_t sonar1, uint16_t sonar2, uint16_t sonar3) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	807b      	strh	r3, [r7, #2]

    wheel_speeds_t speeds;
    float ratio = (float)(PAD1_y_value - PAD1_y_value_min_su) / (PAD1_y_value_max_su - PAD1_y_value_min_su);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8001aa4:	ee07 3a90 	vmov	s15, r3
 8001aa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aac:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8001b9c <calculate_wheel_speeds+0x10c>
 8001ab0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab4:	edc7 7a07 	vstr	s15, [r7, #28]
    int setpoint = ratio * 160.0;
 8001ab8:	69f8      	ldr	r0, [r7, #28]
 8001aba:	f7fe fd15 	bl	80004e8 <__aeabi_f2d>
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	4b37      	ldr	r3, [pc, #220]	@ (8001ba0 <calculate_wheel_speeds+0x110>)
 8001ac4:	f7fe fd68 	bl	8000598 <__aeabi_dmul>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f7fe fffc 	bl	8000acc <__aeabi_d2iz>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	61bb      	str	r3, [r7, #24]

    //Verifico se l'analogico è fermo y del movimento avanti o indietro è fermo
    if(PAD1_y_value >= PAD1_y_value_max_giu && PAD1_y_value <= PAD1_y_value_min_su){
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b63      	cmp	r3, #99	@ 0x63
 8001adc:	dd2a      	ble.n	8001b34 <calculate_wheel_speeds+0xa4>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8001ae4:	dc26      	bgt.n	8001b34 <calculate_wheel_speeds+0xa4>

    	if (PAD2_x_value >= 350 && PAD2_x_value <= 511) { //fermo gira verso sinitra
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8001aec:	db09      	blt.n	8001b02 <calculate_wheel_speeds+0x72>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001af4:	da05      	bge.n	8001b02 <calculate_wheel_speeds+0x72>
        	speeds.left_speed=20;
 8001af6:	2314      	movs	r3, #20
 8001af8:	613b      	str	r3, [r7, #16]
        	speeds.right_speed=-20;
 8001afa:	f06f 0313 	mvn.w	r3, #19
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	e017      	b.n	8001b32 <calculate_wheel_speeds+0xa2>
        }
        else if(PAD2_x_value >= 0 && PAD2_x_value <= 150){ //fermo gira verso destra
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	db08      	blt.n	8001b1a <calculate_wheel_speeds+0x8a>
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	2b96      	cmp	r3, #150	@ 0x96
 8001b0c:	dc05      	bgt.n	8001b1a <calculate_wheel_speeds+0x8a>
        	speeds.left_speed=-20;
 8001b0e:	f06f 0313 	mvn.w	r3, #19
 8001b12:	613b      	str	r3, [r7, #16]
          	speeds.right_speed=20;
 8001b14:	2314      	movs	r3, #20
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	e00b      	b.n	8001b32 <calculate_wheel_speeds+0xa2>
        }
        else if(PAD2_x_value>150 && PAD2_x_value<350){//fermo sia nalogico pad1_y e fermo analogico pad2_x allora il rover sta fermo
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2b96      	cmp	r3, #150	@ 0x96
 8001b1e:	dd30      	ble.n	8001b82 <calculate_wheel_speeds+0xf2>
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8001b26:	da2c      	bge.n	8001b82 <calculate_wheel_speeds+0xf2>
        	speeds.left_speed=0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
        	speeds.right_speed=0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
    	if (PAD2_x_value >= 350 && PAD2_x_value <= 511) { //fermo gira verso sinitra
 8001b30:	e027      	b.n	8001b82 <calculate_wheel_speeds+0xf2>
 8001b32:	e026      	b.n	8001b82 <calculate_wheel_speeds+0xf2>
        }
    }
    else if(PAD1_y_value >= PAD1_y_value_min_giu && PAD1_y_value < PAD1_y_value_max_giu){//se tiro in dietro la leveta si gira su se stesso di 180 gradi
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	db08      	blt.n	8001b4c <calculate_wheel_speeds+0xbc>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b63      	cmp	r3, #99	@ 0x63
 8001b3e:	dc05      	bgt.n	8001b4c <calculate_wheel_speeds+0xbc>
    	speeds.left_speed=20;
 8001b40:	2314      	movs	r3, #20
 8001b42:	613b      	str	r3, [r7, #16]
    	speeds.right_speed=-20;
 8001b44:	f06f 0313 	mvn.w	r3, #19
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	e01b      	b.n	8001b84 <calculate_wheel_speeds+0xf4>
    }
    else if(PAD1_y_value > PAD1_y_value_min_su && PAD1_y_value <= PAD1_y_value_max_su){//se trio in avanti la levetta va in avanti
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8001b52:	dd17      	ble.n	8001b84 <calculate_wheel_speeds+0xf4>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b5a:	da13      	bge.n	8001b84 <calculate_wheel_speeds+0xf4>


    	if(sonar2 < 70 || sonar1 < 23 || sonar3 < 23){
 8001b5c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b5e:	2b45      	cmp	r3, #69	@ 0x45
 8001b60:	d905      	bls.n	8001b6e <calculate_wheel_speeds+0xde>
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	2b16      	cmp	r3, #22
 8001b66:	d902      	bls.n	8001b6e <calculate_wheel_speeds+0xde>
 8001b68:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001b6a:	2b16      	cmp	r3, #22
 8001b6c:	d804      	bhi.n	8001b78 <calculate_wheel_speeds+0xe8>

    	    	speeds.left_speed=0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
    	    	speeds.right_speed=0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	e005      	b.n	8001b84 <calculate_wheel_speeds+0xf4>

    	}else{
			speeds.left_speed=setpoint;
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	613b      	str	r3, [r7, #16]
			speeds.right_speed=setpoint;
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e000      	b.n	8001b84 <calculate_wheel_speeds+0xf4>
    	if (PAD2_x_value >= 350 && PAD2_x_value <= 511) { //fermo gira verso sinitra
 8001b82:	bf00      	nop
    	}
    }

    return speeds;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	461a      	mov	r2, r3
 8001b88:	f107 0310 	add.w	r3, r7, #16
 8001b8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b90:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	3720      	adds	r7, #32
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	43710000 	.word	0x43710000
 8001ba0:	40640000 	.word	0x40640000

08001ba4 <is_invalid_value>:
 *
 * Ritorna:
 * - true se il valore è al di fuori dell'intervallo [min, max].
 * - false altrimenti.
 */
bool is_invalid_value(int x, int min, int max) {
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
    return (x < min || x > max);
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	db03      	blt.n	8001bc0 <is_invalid_value+0x1c>
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dd01      	ble.n	8001bc4 <is_invalid_value+0x20>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <is_invalid_value+0x22>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	b2db      	uxtb	r3, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <are_values_zero>:
 *
 * Ritorna:
 * - true se tutti i valori sono zero.
 * - false se almeno uno dei valori non è zero.
 */
bool are_values_zero(int x1, int y1, int x2, int y2) {
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
    return (x1 == 0 && y1 == 0 && x2 == 0 && y2 == 0);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10a      	bne.n	8001c02 <are_values_zero+0x2a>
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d107      	bne.n	8001c02 <are_values_zero+0x2a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d104      	bne.n	8001c02 <are_values_zero+0x2a>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <are_values_zero+0x2a>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <are_values_zero+0x2c>
 8001c02:	2300      	movs	r3, #0
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	b2db      	uxtb	r3, r3
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	@ 0x28
 8001c1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2e:	4b35      	ldr	r3, [pc, #212]	@ (8001d04 <MX_GPIO_Init+0xec>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c32:	4a34      	ldr	r2, [pc, #208]	@ (8001d04 <MX_GPIO_Init+0xec>)
 8001c34:	f043 0304 	orr.w	r3, r3, #4
 8001c38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c3a:	4b32      	ldr	r3, [pc, #200]	@ (8001d04 <MX_GPIO_Init+0xec>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c46:	4b2f      	ldr	r3, [pc, #188]	@ (8001d04 <MX_GPIO_Init+0xec>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4a:	4a2e      	ldr	r2, [pc, #184]	@ (8001d04 <MX_GPIO_Init+0xec>)
 8001c4c:	f043 0320 	orr.w	r3, r3, #32
 8001c50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c52:	4b2c      	ldr	r3, [pc, #176]	@ (8001d04 <MX_GPIO_Init+0xec>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	4b29      	ldr	r3, [pc, #164]	@ (8001d04 <MX_GPIO_Init+0xec>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c62:	4a28      	ldr	r2, [pc, #160]	@ (8001d04 <MX_GPIO_Init+0xec>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c6a:	4b26      	ldr	r3, [pc, #152]	@ (8001d04 <MX_GPIO_Init+0xec>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c76:	4b23      	ldr	r3, [pc, #140]	@ (8001d04 <MX_GPIO_Init+0xec>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7a:	4a22      	ldr	r2, [pc, #136]	@ (8001d04 <MX_GPIO_Init+0xec>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c82:	4b20      	ldr	r3, [pc, #128]	@ (8001d04 <MX_GPIO_Init+0xec>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_R_Pin|LED2_W_Pin|LED1_R_Pin|LED1_W_Pin, GPIO_PIN_RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8001c94:	481c      	ldr	r0, [pc, #112]	@ (8001d08 <MX_GPIO_Init+0xf0>)
 8001c96:	f003 f8a1 	bl	8004ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, B1_pin_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001ca0:	481a      	ldr	r0, [pc, #104]	@ (8001d0c <MX_GPIO_Init+0xf4>)
 8001ca2:	f003 f89b 	bl	8004ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_R_Pin LED2_W_Pin LED1_R_Pin LED1_W_Pin */
  GPIO_InitStruct.Pin = LED2_R_Pin|LED2_W_Pin|LED1_R_Pin|LED1_W_Pin;
 8001ca6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cac:	2301      	movs	r3, #1
 8001cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4812      	ldr	r0, [pc, #72]	@ (8001d08 <MX_GPIO_Init+0xf0>)
 8001cc0:	f002 fef2 	bl	8004aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_pin_Pin */
  GPIO_InitStruct.Pin = B2_pin_Pin;
 8001cc4:	2310      	movs	r3, #16
 8001cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_pin_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480d      	ldr	r0, [pc, #52]	@ (8001d0c <MX_GPIO_Init+0xf4>)
 8001cd8:	f002 fee6 	bl	8004aa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_pin_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = B1_pin_Pin|BUZZER_Pin;
 8001cdc:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4805      	ldr	r0, [pc, #20]	@ (8001d0c <MX_GPIO_Init+0xf4>)
 8001cf6:	f002 fed7 	bl	8004aa8 <HAL_GPIO_Init>

}
 8001cfa:	bf00      	nop
 8001cfc:	3728      	adds	r7, #40	@ 0x28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	48000800 	.word	0x48000800
 8001d0c:	48000400 	.word	0x48000400

08001d10 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d14:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <MX_I2C2_Init+0x74>)
 8001d16:	4a1c      	ldr	r2, [pc, #112]	@ (8001d88 <MX_I2C2_Init+0x78>)
 8001d18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40B285C2;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <MX_I2C2_Init+0x74>)
 8001d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d8c <MX_I2C2_Init+0x7c>)
 8001d1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d20:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <MX_I2C2_Init+0x74>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d26:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <MX_I2C2_Init+0x74>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d2c:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <MX_I2C2_Init+0x74>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d32:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <MX_I2C2_Init+0x74>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d38:	4b12      	ldr	r3, [pc, #72]	@ (8001d84 <MX_I2C2_Init+0x74>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <MX_I2C2_Init+0x74>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <MX_I2C2_Init+0x74>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d4a:	480e      	ldr	r0, [pc, #56]	@ (8001d84 <MX_I2C2_Init+0x74>)
 8001d4c:	f003 f85e 	bl	8004e0c <HAL_I2C_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d56:	f000 f90d 	bl	8001f74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4809      	ldr	r0, [pc, #36]	@ (8001d84 <MX_I2C2_Init+0x74>)
 8001d5e:	f003 f8f0 	bl	8004f42 <HAL_I2CEx_ConfigAnalogFilter>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001d68:	f000 f904 	bl	8001f74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <MX_I2C2_Init+0x74>)
 8001d70:	f003 f932 	bl	8004fd8 <HAL_I2CEx_ConfigDigitalFilter>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001d7a:	f000 f8fb 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000244 	.word	0x20000244
 8001d88:	40005800 	.word	0x40005800
 8001d8c:	40b285c2 	.word	0x40b285c2

08001d90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b09e      	sub	sp, #120	@ 0x78
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	2254      	movs	r2, #84	@ 0x54
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f009 fad1 	bl	800b358 <memset>
  if(i2cHandle->Instance==I2C2)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1f      	ldr	r2, [pc, #124]	@ (8001e38 <HAL_I2C_MspInit+0xa8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d137      	bne.n	8001e30 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001dc0:	2380      	movs	r3, #128	@ 0x80
 8001dc2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 ff63 	bl	8005c98 <HAL_RCCEx_PeriphCLKConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001dd8:	f000 f8cc 	bl	8001f74 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <HAL_I2C_MspInit+0xac>)
 8001dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de0:	4a16      	ldr	r2, [pc, #88]	@ (8001e3c <HAL_I2C_MspInit+0xac>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <HAL_I2C_MspInit+0xac>)
 8001dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001df4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001df8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dfa:	2312      	movs	r3, #18
 8001dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e06:	2304      	movs	r3, #4
 8001e08:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e14:	f002 fe48 	bl	8004aa8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e18:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <HAL_I2C_MspInit+0xac>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1c:	4a07      	ldr	r2, [pc, #28]	@ (8001e3c <HAL_I2C_MspInit+0xac>)
 8001e1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e22:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e24:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_I2C_MspInit+0xac>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001e30:	bf00      	nop
 8001e32:	3778      	adds	r7, #120	@ 0x78
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40005800 	.word	0x40005800
 8001e3c:	40021000 	.word	0x40021000

08001e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e44:	f001 f935 	bl	80030b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e48:	f000 f836 	bl	8001eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e4c:	f7ff fee4 	bl	8001c18 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001e50:	f7ff f84c 	bl	8000eec <MX_ADC1_Init>
  MX_TIM2_Init();
 8001e54:	f000 fcdc 	bl	8002810 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e58:	f000 fd2e 	bl	80028b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001e5c:	f000 fd82 	bl	8002964 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001e60:	f000 fdd6 	bl	8002a10 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001e64:	f000 ff3a 	bl	8002cdc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001e68:	f000 ffd0 	bl	8002e0c <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8001e6c:	f7ff ff50 	bl	8001d10 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001e70:	f000 fb3e 	bl	80024f0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001e74:	f000 ff7e 	bl	8002d74 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Avvia il timer per encoder
 8001e78:	213c      	movs	r1, #60	@ 0x3c
 8001e7a:	480b      	ldr	r0, [pc, #44]	@ (8001ea8 <main+0x68>)
 8001e7c:	f005 fa0e 	bl	800729c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Avvia il timer per encoder
 8001e80:	213c      	movs	r1, #60	@ 0x3c
 8001e82:	480a      	ldr	r0, [pc, #40]	@ (8001eac <main+0x6c>)
 8001e84:	f005 fa0a 	bl	800729c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Avvia il timer per encoder
 8001e88:	213c      	movs	r1, #60	@ 0x3c
 8001e8a:	4809      	ldr	r0, [pc, #36]	@ (8001eb0 <main+0x70>)
 8001e8c:	f005 fa06 	bl	800729c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // Avvia il timer per encoder
 8001e90:	213c      	movs	r1, #60	@ 0x3c
 8001e92:	4808      	ldr	r0, [pc, #32]	@ (8001eb4 <main+0x74>)
 8001e94:	f005 fa02 	bl	800729c <HAL_TIM_Encoder_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001e98:	f006 fcfc 	bl	8008894 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001e9c:	f7ff f8d0 	bl	8001040 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001ea0:	f006 fd1c 	bl	80088dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <main+0x64>
 8001ea8:	20000348 	.word	0x20000348
 8001eac:	20000394 	.word	0x20000394
 8001eb0:	200003e0 	.word	0x200003e0
 8001eb4:	2000042c 	.word	0x2000042c

08001eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b094      	sub	sp, #80	@ 0x50
 8001ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ebe:	f107 0318 	add.w	r3, r7, #24
 8001ec2:	2238      	movs	r2, #56	@ 0x38
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f009 fa46 	bl	800b358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001eda:	2000      	movs	r0, #0
 8001edc:	f003 f8c8 	bl	8005070 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ee4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eea:	2340      	movs	r3, #64	@ 0x40
 8001eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001efa:	2355      	movs	r3, #85	@ 0x55
 8001efc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001efe:	2302      	movs	r3, #2
 8001f00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f02:	2302      	movs	r3, #2
 8001f04:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f06:	2302      	movs	r3, #2
 8001f08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f0a:	f107 0318 	add.w	r3, r7, #24
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 f962 	bl	80051d8 <HAL_RCC_OscConfig>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001f1a:	f000 f82b 	bl	8001f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f1e:	230f      	movs	r3, #15
 8001f20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f22:	2303      	movs	r3, #3
 8001f24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2104      	movs	r1, #4
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 fc60 	bl	80057fc <HAL_RCC_ClockConfig>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001f42:	f000 f817 	bl	8001f74 <Error_Handler>
  }
}
 8001f46:	bf00      	nop
 8001f48:	3750      	adds	r7, #80	@ 0x50
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a04      	ldr	r2, [pc, #16]	@ (8001f70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f62:	f001 f8bf 	bl	80030e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40001000 	.word	0x40001000

08001f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f78:	b672      	cpsid	i
}
 8001f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <Error_Handler+0x8>

08001f80 <PID_Init>:
 * - kp: guadagno proporzionale.
 * - ki: guadagno integrale.
 * - kd: guadagno derivativo.
 * Output: Nessuno.
 */
void PID_Init(PID_Controller *pid, double kp, double ki, double kd) {
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	@ 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	61f8      	str	r0, [r7, #28]
 8001f88:	ed87 0b04 	vstr	d0, [r7, #16]
 8001f8c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001f90:	ed87 2b00 	vstr	d2, [r7]
    pid->kp = kp;               // Imposta il guadagno proporzionale
 8001f94:	69f9      	ldr	r1, [r7, #28]
 8001f96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f9a:	e9c1 2300 	strd	r2, r3, [r1]
    pid->ki = ki;               // Imposta il guadagno integrale
 8001f9e:	69f9      	ldr	r1, [r7, #28]
 8001fa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fa4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid->kd = kd;               // Imposta il guadagno derivativo
 8001fa8:	69f9      	ldr	r1, [r7, #28]
 8001faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fae:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid->ITerm = 0.0;           // Resetta il termine integrale
 8001fb2:	69f9      	ldr	r1, [r7, #28]
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid->lastInput = 0.0;      // Resetta l'ultimo input
 8001fc0:	69f9      	ldr	r1, [r7, #28]
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	e9c1 2308 	strd	r2, r3, [r1, #32]
    pid->lastTick = 0;          // Resetta il tick temporale
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->lastAngle = 0.0;      // Resetta l'ultimo angolo
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001fdc:	bf00      	nop
 8001fde:	3724      	adds	r7, #36	@ 0x24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <PID_Compute>:
 * - resolution: risoluzione del sensore (gradi per tick).
 * - motore: identificatore del motore su cui applicare il comando.
 * Output:
 * - uint8_t: valore di uscita calcolato dal PID, limitato entro valori massimi e minimi.
 */
uint8_t PID_Compute(PID_Controller *pid, int32_t counterValue, uint32_t ticks, float setpoint, float resolution, int motore) {
 8001fe8:	b5b0      	push	{r4, r5, r7, lr}
 8001fea:	b0a4      	sub	sp, #144	@ 0x90
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6178      	str	r0, [r7, #20]
 8001ff0:	6139      	str	r1, [r7, #16]
 8001ff2:	60fa      	str	r2, [r7, #12]
 8001ff4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ff8:	edc7 0a01 	vstr	s1, [r7, #4]
 8001ffc:	603b      	str	r3, [r7, #0]
    double output = 0.0;
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88

    // Calcola l'angolo corrente in base al valore del contatore e alla risoluzione del sensore
    float angle = (360.0 / resolution) * counterValue;
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fa6c 	bl	80004e8 <__aeabi_f2d>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	f04f 0000 	mov.w	r0, #0
 8002018:	49a5      	ldr	r1, [pc, #660]	@ (80022b0 <PID_Compute+0x2c8>)
 800201a:	f7fe fbe7 	bl	80007ec <__aeabi_ddiv>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4614      	mov	r4, r2
 8002024:	461d      	mov	r5, r3
 8002026:	6938      	ldr	r0, [r7, #16]
 8002028:	f7fe fa4c 	bl	80004c4 <__aeabi_i2d>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4620      	mov	r0, r4
 8002032:	4629      	mov	r1, r5
 8002034:	f7fe fab0 	bl	8000598 <__aeabi_dmul>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4610      	mov	r0, r2
 800203e:	4619      	mov	r1, r3
 8002040:	f7fe fd8c 	bl	8000b5c <__aeabi_d2f>
 8002044:	4603      	mov	r3, r0
 8002046:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    // Calcolo del tempo trascorso in secondi
    float deltaTime = (ticks - pid->lastTick) / 1000.0;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa26 	bl	80004a4 <__aeabi_ui2d>
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	4b95      	ldr	r3, [pc, #596]	@ (80022b4 <PID_Compute+0x2cc>)
 800205e:	f7fe fbc5 	bl	80007ec <__aeabi_ddiv>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4610      	mov	r0, r2
 8002068:	4619      	mov	r1, r3
 800206a:	f7fe fd77 	bl	8000b5c <__aeabi_d2f>
 800206e:	4603      	mov	r3, r0
 8002070:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // Calcola la velocità angolare se il tempo trascorso è positivo
    float angularSpeed = 0;
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (deltaTime > 0) {
 800207a:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800207e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002086:	dd27      	ble.n	80020d8 <PID_Compute+0xf0>
        angularSpeed = 60 * (angle - pid->lastAngle) / (deltaTime * 360.0);
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800208e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002096:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 80022b8 <PID_Compute+0x2d0>
 800209a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800209e:	ee17 0a90 	vmov	r0, s15
 80020a2:	f7fe fa21 	bl	80004e8 <__aeabi_f2d>
 80020a6:	4604      	mov	r4, r0
 80020a8:	460d      	mov	r5, r1
 80020aa:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80020ac:	f7fe fa1c 	bl	80004e8 <__aeabi_f2d>
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	4b7e      	ldr	r3, [pc, #504]	@ (80022b0 <PID_Compute+0x2c8>)
 80020b6:	f7fe fa6f 	bl	8000598 <__aeabi_dmul>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4620      	mov	r0, r4
 80020c0:	4629      	mov	r1, r5
 80020c2:	f7fe fb93 	bl	80007ec <__aeabi_ddiv>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	f7fe fd45 	bl	8000b5c <__aeabi_d2f>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    }

    // Caso PID con setpoint negativo
    if (setpoint < 0.0) {
 80020d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80020dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e4:	f140 809b 	bpl.w	800221e <PID_Compute+0x236>
        double powMin = 63.0, powMax = 1.0; // Limiti di potenza minimi e massimi
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	4b73      	ldr	r3, [pc, #460]	@ (80022bc <PID_Compute+0x2d4>)
 80020ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	4b72      	ldr	r3, [pc, #456]	@ (80022c0 <PID_Compute+0x2d8>)
 80020f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        double error = setpoint - angularSpeed;
 80020fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8002100:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8002104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002108:	ee17 0a90 	vmov	r0, s15
 800210c:	f7fe f9ec 	bl	80004e8 <__aeabi_f2d>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	e9c7 2308 	strd	r2, r3, [r7, #32]

        // Aggiorna il termine integrale con il guadagno integrale
        pid->ITerm += (pid->ki * error);
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002124:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002128:	f7fe fa36 	bl	8000598 <__aeabi_dmul>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4620      	mov	r0, r4
 8002132:	4629      	mov	r1, r5
 8002134:	f7fe f87a 	bl	800022c <__adddf3>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	6979      	ldr	r1, [r7, #20]
 800213e:	e9c1 2306 	strd	r2, r3, [r1, #24]

        // Limita il valore del termine integrale
        if (pid->ITerm > powMin) pid->ITerm = powMin;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002148:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800214c:	f7fe fc96 	bl	8000a7c <__aeabi_dcmplt>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <PID_Compute+0x17a>
 8002156:	6979      	ldr	r1, [r7, #20]
 8002158:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800215c:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8002160:	e00e      	b.n	8002180 <PID_Compute+0x198>
        else if (pid->ITerm < powMax) pid->ITerm = powMax;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002168:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800216c:	f7fe fca4 	bl	8000ab8 <__aeabi_dcmpgt>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d004      	beq.n	8002180 <PID_Compute+0x198>
 8002176:	6979      	ldr	r1, [r7, #20]
 8002178:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800217c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        // Calcola il termine derivativo
        double dInput = angularSpeed - pid->lastInput;
 8002180:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002184:	f7fe f9b0 	bl	80004e8 <__aeabi_f2d>
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800218e:	f7fe f84b 	bl	8000228 <__aeabi_dsub>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	e9c7 2306 	strd	r2, r3, [r7, #24]

        // Calcola l'output PID
        output = pid->kp * error + pid->ITerm - pid->kd * dInput;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021a4:	f7fe f9f8 	bl	8000598 <__aeabi_dmul>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021b6:	f7fe f839 	bl	800022c <__adddf3>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4614      	mov	r4, r2
 80021c0:	461d      	mov	r5, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80021c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021cc:	f7fe f9e4 	bl	8000598 <__aeabi_dmul>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4620      	mov	r0, r4
 80021d6:	4629      	mov	r1, r5
 80021d8:	f7fe f826 	bl	8000228 <__aeabi_dsub>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88

        // Limita l'output
        if (output > powMin) output = powMin;
 80021e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80021e8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80021ec:	f7fe fc64 	bl	8000ab8 <__aeabi_dcmpgt>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <PID_Compute+0x218>
 80021f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80021fa:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 80021fe:	e15a      	b.n	80024b6 <PID_Compute+0x4ce>
        else if (output < powMax) output = powMax;
 8002200:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002204:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002208:	f7fe fc38 	bl	8000a7c <__aeabi_dcmplt>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 8151 	beq.w	80024b6 <PID_Compute+0x4ce>
 8002214:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002218:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 800221c:	e14b      	b.n	80024b6 <PID_Compute+0x4ce>
    }
    // Caso PID con setpoint positivo
    else if (setpoint > 0.0) {
 800221e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002222:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222a:	f340 80ab 	ble.w	8002384 <PID_Compute+0x39c>
        double powMin = 64.0, powMax = 127.0; // Limiti di potenza minimi e massimi
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	4b24      	ldr	r3, [pc, #144]	@ (80022c4 <PID_Compute+0x2dc>)
 8002234:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8002238:	a31b      	add	r3, pc, #108	@ (adr r3, 80022a8 <PID_Compute+0x2c0>)
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        double error = setpoint - angularSpeed;
 8002242:	ed97 7a02 	vldr	s14, [r7, #8]
 8002246:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800224a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800224e:	ee17 0a90 	vmov	r0, s15
 8002252:	f7fe f949 	bl	80004e8 <__aeabi_f2d>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

        // Aggiorna il termine integrale con il guadagno integrale
        pid->ITerm += (pid->ki * error);
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800226a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800226e:	f7fe f993 	bl	8000598 <__aeabi_dmul>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4620      	mov	r0, r4
 8002278:	4629      	mov	r1, r5
 800227a:	f7fd ffd7 	bl	800022c <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	6979      	ldr	r1, [r7, #20]
 8002284:	e9c1 2306 	strd	r2, r3, [r1, #24]

        // Limita il valore del termine integrale
        if (pid->ITerm > powMax) pid->ITerm = powMax;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800228e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002292:	f7fe fbf3 	bl	8000a7c <__aeabi_dcmplt>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <PID_Compute+0x2e0>
 800229c:	6979      	ldr	r1, [r7, #20]
 800229e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80022a2:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80022a6:	e01e      	b.n	80022e6 <PID_Compute+0x2fe>
 80022a8:	00000000 	.word	0x00000000
 80022ac:	405fc000 	.word	0x405fc000
 80022b0:	40768000 	.word	0x40768000
 80022b4:	408f4000 	.word	0x408f4000
 80022b8:	42700000 	.word	0x42700000
 80022bc:	404f8000 	.word	0x404f8000
 80022c0:	3ff00000 	.word	0x3ff00000
 80022c4:	40500000 	.word	0x40500000
        else if (pid->ITerm < powMin) pid->ITerm = powMin;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80022d2:	f7fe fbf1 	bl	8000ab8 <__aeabi_dcmpgt>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d004      	beq.n	80022e6 <PID_Compute+0x2fe>
 80022dc:	6979      	ldr	r1, [r7, #20]
 80022de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80022e2:	e9c1 2306 	strd	r2, r3, [r1, #24]

        // Calcola il termine derivativo
        double dInput = angularSpeed - pid->lastInput;
 80022e6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80022ea:	f7fe f8fd 	bl	80004e8 <__aeabi_f2d>
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80022f4:	f7fd ff98 	bl	8000228 <__aeabi_dsub>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

        // Calcola l'output PID
        output = pid->kp * error + pid->ITerm - pid->kd * dInput;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002306:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800230a:	f7fe f945 	bl	8000598 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800231c:	f7fd ff86 	bl	800022c <__adddf3>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4614      	mov	r4, r2
 8002326:	461d      	mov	r5, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800232e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002332:	f7fe f931 	bl	8000598 <__aeabi_dmul>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4620      	mov	r0, r4
 800233c:	4629      	mov	r1, r5
 800233e:	f7fd ff73 	bl	8000228 <__aeabi_dsub>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88

        // Limita l'output
        if (output > powMax) output = powMax;
 800234a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800234e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002352:	f7fe fbb1 	bl	8000ab8 <__aeabi_dcmpgt>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d004      	beq.n	8002366 <PID_Compute+0x37e>
 800235c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002360:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 8002364:	e0a7      	b.n	80024b6 <PID_Compute+0x4ce>
        else if (output < powMin) output = powMin;
 8002366:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800236a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800236e:	f7fe fb85 	bl	8000a7c <__aeabi_dcmplt>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 809e 	beq.w	80024b6 <PID_Compute+0x4ce>
 800237a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800237e:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 8002382:	e098      	b.n	80024b6 <PID_Compute+0x4ce>
    }
    // Caso con setpoint vicino a zero
    else {
        double powMin = 64.0, powMax = 64;
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	4b58      	ldr	r3, [pc, #352]	@ (80024ec <PID_Compute+0x504>)
 800238a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	4b56      	ldr	r3, [pc, #344]	@ (80024ec <PID_Compute+0x504>)
 8002394:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
        double error = setpoint - angularSpeed;
 8002398:	ed97 7a02 	vldr	s14, [r7, #8]
 800239c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80023a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023a4:	ee17 0a90 	vmov	r0, s15
 80023a8:	f7fe f89e 	bl	80004e8 <__aeabi_f2d>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

        pid->ITerm += (pid->ki * error);
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80023c0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80023c4:	f7fe f8e8 	bl	8000598 <__aeabi_dmul>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4620      	mov	r0, r4
 80023ce:	4629      	mov	r1, r5
 80023d0:	f7fd ff2c 	bl	800022c <__adddf3>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	6979      	ldr	r1, [r7, #20]
 80023da:	e9c1 2306 	strd	r2, r3, [r1, #24]
        if (pid->ITerm > powMax) pid->ITerm = powMax;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80023e8:	f7fe fb48 	bl	8000a7c <__aeabi_dcmplt>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <PID_Compute+0x416>
 80023f2:	6979      	ldr	r1, [r7, #20]
 80023f4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80023f8:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80023fc:	e00e      	b.n	800241c <PID_Compute+0x434>
        else if (pid->ITerm < powMin) pid->ITerm = powMin;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002404:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002408:	f7fe fb56 	bl	8000ab8 <__aeabi_dcmpgt>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d004      	beq.n	800241c <PID_Compute+0x434>
 8002412:	6979      	ldr	r1, [r7, #20]
 8002414:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002418:	e9c1 2306 	strd	r2, r3, [r1, #24]

        double dInput = angularSpeed - pid->lastInput;
 800241c:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002420:	f7fe f862 	bl	80004e8 <__aeabi_f2d>
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800242a:	f7fd fefd 	bl	8000228 <__aeabi_dsub>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

        output = pid->kp * error + pid->ITerm - pid->kd * dInput;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	e9d3 0100 	ldrd	r0, r1, [r3]
 800243c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002440:	f7fe f8aa 	bl	8000598 <__aeabi_dmul>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4610      	mov	r0, r2
 800244a:	4619      	mov	r1, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002452:	f7fd feeb 	bl	800022c <__adddf3>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4614      	mov	r4, r2
 800245c:	461d      	mov	r5, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002464:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002468:	f7fe f896 	bl	8000598 <__aeabi_dmul>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4620      	mov	r0, r4
 8002472:	4629      	mov	r1, r5
 8002474:	f7fd fed8 	bl	8000228 <__aeabi_dsub>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88

        if (output > powMax) output = powMax;
 8002480:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002484:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002488:	f7fe fb16 	bl	8000ab8 <__aeabi_dcmpgt>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d004      	beq.n	800249c <PID_Compute+0x4b4>
 8002492:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002496:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 800249a:	e00c      	b.n	80024b6 <PID_Compute+0x4ce>
        else if (output < powMin) output = powMin;
 800249c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80024a0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80024a4:	f7fe faea 	bl	8000a7c <__aeabi_dcmplt>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <PID_Compute+0x4ce>
 80024ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80024b2:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    }

    // Aggiorna i valori precedenti per il prossimo ciclo
    pid->lastTick = ticks;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->lastAngle = angle;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80024c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    pid->lastInput = angularSpeed;
 80024c4:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80024c8:	f7fe f80e 	bl	80004e8 <__aeabi_f2d>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	6979      	ldr	r1, [r7, #20]
 80024d2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // Invio delle informazioni di debug tramite USART
    /*snprintf(usart_buffer, sizeof(usart_buffer), "MOTOR %d - Setpoint: %.2f, Angular Speed: %.2f gir/min, Power: %d\r\n", motore, setpoint, angularSpeed, (uint8_t)output);
    HAL_UART_Transmit(&huart2, (uint8_t *)usart_buffer, strlen(usart_buffer), HAL_MAX_DELAY);*/

    return (uint8_t)output; // Restituisce l'output limitato calcolato
 80024d6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80024da:	f7fe fb1f 	bl	8000b1c <__aeabi_d2uiz>
 80024de:	4603      	mov	r3, r0
 80024e0:	b2db      	uxtb	r3, r3
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3790      	adds	r7, #144	@ 0x90
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bdb0      	pop	{r4, r5, r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40500000 	.word	0x40500000

080024f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80024f4:	4b19      	ldr	r3, [pc, #100]	@ (800255c <MX_SPI1_Init+0x6c>)
 80024f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002560 <MX_SPI1_Init+0x70>)
 80024f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80024fa:	4b18      	ldr	r3, [pc, #96]	@ (800255c <MX_SPI1_Init+0x6c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002500:	4b16      	ldr	r3, [pc, #88]	@ (800255c <MX_SPI1_Init+0x6c>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002506:	4b15      	ldr	r3, [pc, #84]	@ (800255c <MX_SPI1_Init+0x6c>)
 8002508:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800250c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800250e:	4b13      	ldr	r3, [pc, #76]	@ (800255c <MX_SPI1_Init+0x6c>)
 8002510:	2200      	movs	r2, #0
 8002512:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002514:	4b11      	ldr	r3, [pc, #68]	@ (800255c <MX_SPI1_Init+0x6c>)
 8002516:	2200      	movs	r2, #0
 8002518:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800251a:	4b10      	ldr	r3, [pc, #64]	@ (800255c <MX_SPI1_Init+0x6c>)
 800251c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002520:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002522:	4b0e      	ldr	r3, [pc, #56]	@ (800255c <MX_SPI1_Init+0x6c>)
 8002524:	2200      	movs	r2, #0
 8002526:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <MX_SPI1_Init+0x6c>)
 800252a:	2200      	movs	r2, #0
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800252e:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <MX_SPI1_Init+0x6c>)
 8002530:	2200      	movs	r2, #0
 8002532:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002534:	4b09      	ldr	r3, [pc, #36]	@ (800255c <MX_SPI1_Init+0x6c>)
 8002536:	2207      	movs	r2, #7
 8002538:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800253a:	4b08      	ldr	r3, [pc, #32]	@ (800255c <MX_SPI1_Init+0x6c>)
 800253c:	2200      	movs	r2, #0
 800253e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <MX_SPI1_Init+0x6c>)
 8002542:	2200      	movs	r2, #0
 8002544:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002546:	4805      	ldr	r0, [pc, #20]	@ (800255c <MX_SPI1_Init+0x6c>)
 8002548:	f003 fdf4 	bl	8006134 <HAL_SPI_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8002552:	f7ff fd0f 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000298 	.word	0x20000298
 8002560:	40013000 	.word	0x40013000

08002564 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	@ 0x28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a17      	ldr	r2, [pc, #92]	@ (80025e0 <HAL_SPI_MspInit+0x7c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d128      	bne.n	80025d8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002586:	4b17      	ldr	r3, [pc, #92]	@ (80025e4 <HAL_SPI_MspInit+0x80>)
 8002588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800258a:	4a16      	ldr	r2, [pc, #88]	@ (80025e4 <HAL_SPI_MspInit+0x80>)
 800258c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002590:	6613      	str	r3, [r2, #96]	@ 0x60
 8002592:	4b14      	ldr	r3, [pc, #80]	@ (80025e4 <HAL_SPI_MspInit+0x80>)
 8002594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002596:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259e:	4b11      	ldr	r3, [pc, #68]	@ (80025e4 <HAL_SPI_MspInit+0x80>)
 80025a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a2:	4a10      	ldr	r2, [pc, #64]	@ (80025e4 <HAL_SPI_MspInit+0x80>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025aa:	4b0e      	ldr	r3, [pc, #56]	@ (80025e4 <HAL_SPI_MspInit+0x80>)
 80025ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025b6:	23e0      	movs	r3, #224	@ 0xe0
 80025b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c2:	2300      	movs	r3, #0
 80025c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025c6:	2305      	movs	r3, #5
 80025c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025d4:	f002 fa68 	bl	8004aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80025d8:	bf00      	nop
 80025da:	3728      	adds	r7, #40	@ 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40013000 	.word	0x40013000
 80025e4:	40021000 	.word	0x40021000

080025e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <HAL_MspInit+0x50>)
 80025f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f2:	4a11      	ldr	r2, [pc, #68]	@ (8002638 <HAL_MspInit+0x50>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80025fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002638 <HAL_MspInit+0x50>)
 80025fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	607b      	str	r3, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <HAL_MspInit+0x50>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260a:	4a0b      	ldr	r2, [pc, #44]	@ (8002638 <HAL_MspInit+0x50>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002610:	6593      	str	r3, [r2, #88]	@ 0x58
 8002612:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_MspInit+0x50>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	210f      	movs	r1, #15
 8002622:	f06f 0001 	mvn.w	r0, #1
 8002626:	f002 fa17 	bl	8004a58 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800262a:	f002 fdc5 	bl	80051b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000

0800263c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08c      	sub	sp, #48	@ 0x30
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800264c:	4b2c      	ldr	r3, [pc, #176]	@ (8002700 <HAL_InitTick+0xc4>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002650:	4a2b      	ldr	r2, [pc, #172]	@ (8002700 <HAL_InitTick+0xc4>)
 8002652:	f043 0310 	orr.w	r3, r3, #16
 8002656:	6593      	str	r3, [r2, #88]	@ 0x58
 8002658:	4b29      	ldr	r3, [pc, #164]	@ (8002700 <HAL_InitTick+0xc4>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002664:	f107 020c 	add.w	r2, r7, #12
 8002668:	f107 0310 	add.w	r3, r7, #16
 800266c:	4611      	mov	r1, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f003 fa9a 	bl	8005ba8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002674:	f003 fa6c 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8002678:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800267a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267c:	4a21      	ldr	r2, [pc, #132]	@ (8002704 <HAL_InitTick+0xc8>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0c9b      	lsrs	r3, r3, #18
 8002684:	3b01      	subs	r3, #1
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002688:	4b1f      	ldr	r3, [pc, #124]	@ (8002708 <HAL_InitTick+0xcc>)
 800268a:	4a20      	ldr	r2, [pc, #128]	@ (800270c <HAL_InitTick+0xd0>)
 800268c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800268e:	4b1e      	ldr	r3, [pc, #120]	@ (8002708 <HAL_InitTick+0xcc>)
 8002690:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002694:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002696:	4a1c      	ldr	r2, [pc, #112]	@ (8002708 <HAL_InitTick+0xcc>)
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800269c:	4b1a      	ldr	r3, [pc, #104]	@ (8002708 <HAL_InitTick+0xcc>)
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a2:	4b19      	ldr	r3, [pc, #100]	@ (8002708 <HAL_InitTick+0xcc>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80026a8:	4817      	ldr	r0, [pc, #92]	@ (8002708 <HAL_InitTick+0xcc>)
 80026aa:	f004 fc77 	bl	8006f9c <HAL_TIM_Base_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80026b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d11b      	bne.n	80026f4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80026bc:	4812      	ldr	r0, [pc, #72]	@ (8002708 <HAL_InitTick+0xcc>)
 80026be:	f004 fccf 	bl	8007060 <HAL_TIM_Base_Start_IT>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80026c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d111      	bne.n	80026f4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026d0:	2036      	movs	r0, #54	@ 0x36
 80026d2:	f002 f9db 	bl	8004a8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b0f      	cmp	r3, #15
 80026da:	d808      	bhi.n	80026ee <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80026dc:	2200      	movs	r2, #0
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	2036      	movs	r0, #54	@ 0x36
 80026e2:	f002 f9b9 	bl	8004a58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002710 <HAL_InitTick+0xd4>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	e002      	b.n	80026f4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80026f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3730      	adds	r7, #48	@ 0x30
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000
 8002704:	431bde83 	.word	0x431bde83
 8002708:	200002fc 	.word	0x200002fc
 800270c:	40001000 	.word	0x40001000
 8002710:	20000008 	.word	0x20000008

08002714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <NMI_Handler+0x4>

0800271c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002720:	bf00      	nop
 8002722:	e7fd      	b.n	8002720 <HardFault_Handler+0x4>

08002724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002728:	bf00      	nop
 800272a:	e7fd      	b.n	8002728 <MemManage_Handler+0x4>

0800272c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <BusFault_Handler+0x4>

08002734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002738:	bf00      	nop
 800273a:	e7fd      	b.n	8002738 <UsageFault_Handler+0x4>

0800273c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002750:	4802      	ldr	r0, [pc, #8]	@ (800275c <TIM6_DAC_IRQHandler+0x10>)
 8002752:	f004 fe31 	bl	80073b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200002fc 	.word	0x200002fc

08002760 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002764:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <SystemInit+0x20>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276a:	4a05      	ldr	r2, [pc, #20]	@ (8002780 <SystemInit+0x20>)
 800276c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002770:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <TemperatureSensor_Read>:
        printf("ADC Calibrato\r\n");
    }
}

// Funzione per leggere la temperatura in °C
int16_t TemperatureSensor_Read(void) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
    uint16_t rawValue;
    uint16_t temperature;
    uint16_t cal1 = *(uint16_t*)TEMPSENSOR_CAL1_ADDR;
 800278a:	4b1d      	ldr	r3, [pc, #116]	@ (8002800 <TemperatureSensor_Read+0x7c>)
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	81fb      	strh	r3, [r7, #14]
    uint16_t cal2 = *(uint16_t*)TEMPSENSOR_CAL2_ADDR;
 8002790:	4b1c      	ldr	r3, [pc, #112]	@ (8002804 <TemperatureSensor_Read+0x80>)
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	81bb      	strh	r3, [r7, #12]

    // Avvio della lettura ADC
    HAL_ADC_Start(&hadc1);
 8002796:	481c      	ldr	r0, [pc, #112]	@ (8002808 <TemperatureSensor_Read+0x84>)
 8002798:	f001 f8aa 	bl	80038f0 <HAL_ADC_Start>

    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800279c:	f04f 31ff 	mov.w	r1, #4294967295
 80027a0:	4819      	ldr	r0, [pc, #100]	@ (8002808 <TemperatureSensor_Read+0x84>)
 80027a2:	f001 f989 	bl	8003ab8 <HAL_ADC_PollForConversion>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d122      	bne.n	80027f2 <TemperatureSensor_Read+0x6e>
        rawValue = HAL_ADC_GetValue(&hadc1);
 80027ac:	4816      	ldr	r0, [pc, #88]	@ (8002808 <TemperatureSensor_Read+0x84>)
 80027ae:	f001 fa89 	bl	8003cc4 <HAL_ADC_GetValue>
 80027b2:	4603      	mov	r3, r0
 80027b4:	817b      	strh	r3, [r7, #10]

        // Calcolo della tensione sul sensore di temperatura
        uint16_t ts_voltage = rawValue * (VREFINT_CAL_VREF / *VREFINT_CAL_ADDR);
 80027b6:	4b15      	ldr	r3, [pc, #84]	@ (800280c <TemperatureSensor_Read+0x88>)
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80027be:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	897a      	ldrh	r2, [r7, #10]
 80027c6:	fb12 f303 	smulbb	r3, r2, r3
 80027ca:	813b      	strh	r3, [r7, #8]

        // Calcolo della temperatura in base ai valori di calibrazione
        temperature = ((TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP) / (cal2 - cal1)) * (ts_voltage - cal1) + TEMPSENSOR_CAL1_TEMP;
 80027cc:	89ba      	ldrh	r2, [r7, #12]
 80027ce:	89fb      	ldrh	r3, [r7, #14]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2250      	movs	r2, #80	@ 0x50
 80027d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80027d8:	b29a      	uxth	r2, r3
 80027da:	8939      	ldrh	r1, [r7, #8]
 80027dc:	89fb      	ldrh	r3, [r7, #14]
 80027de:	1acb      	subs	r3, r1, r3
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	fb12 f303 	smulbb	r3, r2, r3
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	331e      	adds	r3, #30
 80027ea:	80fb      	strh	r3, [r7, #6]

        return temperature;
 80027ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027f0:	e001      	b.n	80027f6 <TemperatureSensor_Read+0x72>
    }

    return -1; // Se la lettura non va a buon fine, restituisce un valore di errore
 80027f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	1fff75a8 	.word	0x1fff75a8
 8002804:	1fff75ca 	.word	0x1fff75ca
 8002808:	20000084 	.word	0x20000084
 800280c:	1fff75aa 	.word	0x1fff75aa

08002810 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08c      	sub	sp, #48	@ 0x30
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002816:	f107 030c 	add.w	r3, r7, #12
 800281a:	2224      	movs	r2, #36	@ 0x24
 800281c:	2100      	movs	r1, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f008 fd9a 	bl	800b358 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002824:	463b      	mov	r3, r7
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800282e:	4b21      	ldr	r3, [pc, #132]	@ (80028b4 <MX_TIM2_Init+0xa4>)
 8002830:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002834:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002836:	4b1f      	ldr	r3, [pc, #124]	@ (80028b4 <MX_TIM2_Init+0xa4>)
 8002838:	2200      	movs	r2, #0
 800283a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283c:	4b1d      	ldr	r3, [pc, #116]	@ (80028b4 <MX_TIM2_Init+0xa4>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002842:	4b1c      	ldr	r3, [pc, #112]	@ (80028b4 <MX_TIM2_Init+0xa4>)
 8002844:	f04f 32ff 	mov.w	r2, #4294967295
 8002848:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800284a:	4b1a      	ldr	r3, [pc, #104]	@ (80028b4 <MX_TIM2_Init+0xa4>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002850:	4b18      	ldr	r3, [pc, #96]	@ (80028b4 <MX_TIM2_Init+0xa4>)
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002856:	2303      	movs	r3, #3
 8002858:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800285e:	2301      	movs	r3, #1
 8002860:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800286a:	2300      	movs	r3, #0
 800286c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800286e:	2301      	movs	r3, #1
 8002870:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002872:	2300      	movs	r3, #0
 8002874:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800287a:	f107 030c 	add.w	r3, r7, #12
 800287e:	4619      	mov	r1, r3
 8002880:	480c      	ldr	r0, [pc, #48]	@ (80028b4 <MX_TIM2_Init+0xa4>)
 8002882:	f004 fc65 	bl	8007150 <HAL_TIM_Encoder_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800288c:	f7ff fb72 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002890:	2300      	movs	r3, #0
 8002892:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002898:	463b      	mov	r3, r7
 800289a:	4619      	mov	r1, r3
 800289c:	4805      	ldr	r0, [pc, #20]	@ (80028b4 <MX_TIM2_Init+0xa4>)
 800289e:	f004 ffdd 	bl	800785c <HAL_TIMEx_MasterConfigSynchronization>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80028a8:	f7ff fb64 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028ac:	bf00      	nop
 80028ae:	3730      	adds	r7, #48	@ 0x30
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20000348 	.word	0x20000348

080028b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08c      	sub	sp, #48	@ 0x30
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028be:	f107 030c 	add.w	r3, r7, #12
 80028c2:	2224      	movs	r2, #36	@ 0x24
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f008 fd46 	bl	800b358 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028cc:	463b      	mov	r3, r7
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028d6:	4b21      	ldr	r3, [pc, #132]	@ (800295c <MX_TIM3_Init+0xa4>)
 80028d8:	4a21      	ldr	r2, [pc, #132]	@ (8002960 <MX_TIM3_Init+0xa8>)
 80028da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80028dc:	4b1f      	ldr	r3, [pc, #124]	@ (800295c <MX_TIM3_Init+0xa4>)
 80028de:	2200      	movs	r2, #0
 80028e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e2:	4b1e      	ldr	r3, [pc, #120]	@ (800295c <MX_TIM3_Init+0xa4>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80028e8:	4b1c      	ldr	r3, [pc, #112]	@ (800295c <MX_TIM3_Init+0xa4>)
 80028ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f0:	4b1a      	ldr	r3, [pc, #104]	@ (800295c <MX_TIM3_Init+0xa4>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f6:	4b19      	ldr	r3, [pc, #100]	@ (800295c <MX_TIM3_Init+0xa4>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80028fc:	2301      	movs	r3, #1
 80028fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002900:	2300      	movs	r3, #0
 8002902:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002904:	2301      	movs	r3, #1
 8002906:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002908:	2300      	movs	r3, #0
 800290a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002914:	2301      	movs	r3, #1
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002918:	2300      	movs	r3, #0
 800291a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	4619      	mov	r1, r3
 8002926:	480d      	ldr	r0, [pc, #52]	@ (800295c <MX_TIM3_Init+0xa4>)
 8002928:	f004 fc12 	bl	8007150 <HAL_TIM_Encoder_Init>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002932:	f7ff fb1f 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002936:	2300      	movs	r3, #0
 8002938:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800293e:	463b      	mov	r3, r7
 8002940:	4619      	mov	r1, r3
 8002942:	4806      	ldr	r0, [pc, #24]	@ (800295c <MX_TIM3_Init+0xa4>)
 8002944:	f004 ff8a 	bl	800785c <HAL_TIMEx_MasterConfigSynchronization>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800294e:	f7ff fb11 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002952:	bf00      	nop
 8002954:	3730      	adds	r7, #48	@ 0x30
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000394 	.word	0x20000394
 8002960:	40000400 	.word	0x40000400

08002964 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08c      	sub	sp, #48	@ 0x30
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800296a:	f107 030c 	add.w	r3, r7, #12
 800296e:	2224      	movs	r2, #36	@ 0x24
 8002970:	2100      	movs	r1, #0
 8002972:	4618      	mov	r0, r3
 8002974:	f008 fcf0 	bl	800b358 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002978:	463b      	mov	r3, r7
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002982:	4b21      	ldr	r3, [pc, #132]	@ (8002a08 <MX_TIM4_Init+0xa4>)
 8002984:	4a21      	ldr	r2, [pc, #132]	@ (8002a0c <MX_TIM4_Init+0xa8>)
 8002986:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002988:	4b1f      	ldr	r3, [pc, #124]	@ (8002a08 <MX_TIM4_Init+0xa4>)
 800298a:	2200      	movs	r2, #0
 800298c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800298e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a08 <MX_TIM4_Init+0xa4>)
 8002990:	2200      	movs	r2, #0
 8002992:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002994:	4b1c      	ldr	r3, [pc, #112]	@ (8002a08 <MX_TIM4_Init+0xa4>)
 8002996:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800299a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800299c:	4b1a      	ldr	r3, [pc, #104]	@ (8002a08 <MX_TIM4_Init+0xa4>)
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a2:	4b19      	ldr	r3, [pc, #100]	@ (8002a08 <MX_TIM4_Init+0xa4>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029a8:	2303      	movs	r3, #3
 80029aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029b0:	2301      	movs	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029bc:	2300      	movs	r3, #0
 80029be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029c0:	2301      	movs	r3, #1
 80029c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029c4:	2300      	movs	r3, #0
 80029c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	4619      	mov	r1, r3
 80029d2:	480d      	ldr	r0, [pc, #52]	@ (8002a08 <MX_TIM4_Init+0xa4>)
 80029d4:	f004 fbbc 	bl	8007150 <HAL_TIM_Encoder_Init>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80029de:	f7ff fac9 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e2:	2300      	movs	r3, #0
 80029e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029ea:	463b      	mov	r3, r7
 80029ec:	4619      	mov	r1, r3
 80029ee:	4806      	ldr	r0, [pc, #24]	@ (8002a08 <MX_TIM4_Init+0xa4>)
 80029f0:	f004 ff34 	bl	800785c <HAL_TIMEx_MasterConfigSynchronization>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80029fa:	f7ff fabb 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80029fe:	bf00      	nop
 8002a00:	3730      	adds	r7, #48	@ 0x30
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	200003e0 	.word	0x200003e0
 8002a0c:	40000800 	.word	0x40000800

08002a10 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08c      	sub	sp, #48	@ 0x30
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a16:	f107 030c 	add.w	r3, r7, #12
 8002a1a:	2224      	movs	r2, #36	@ 0x24
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f008 fc9a 	bl	800b358 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a24:	463b      	mov	r3, r7
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a2e:	4b21      	ldr	r3, [pc, #132]	@ (8002ab4 <MX_TIM5_Init+0xa4>)
 8002a30:	4a21      	ldr	r2, [pc, #132]	@ (8002ab8 <MX_TIM5_Init+0xa8>)
 8002a32:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002a34:	4b1f      	ldr	r3, [pc, #124]	@ (8002ab4 <MX_TIM5_Init+0xa4>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab4 <MX_TIM5_Init+0xa4>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002a40:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab4 <MX_TIM5_Init+0xa4>)
 8002a42:	f04f 32ff 	mov.w	r2, #4294967295
 8002a46:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a48:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <MX_TIM5_Init+0xa4>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4e:	4b19      	ldr	r3, [pc, #100]	@ (8002ab4 <MX_TIM5_Init+0xa4>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a54:	2303      	movs	r3, #3
 8002a56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	480d      	ldr	r0, [pc, #52]	@ (8002ab4 <MX_TIM5_Init+0xa4>)
 8002a80:	f004 fb66 	bl	8007150 <HAL_TIM_Encoder_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8002a8a:	f7ff fa73 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a96:	463b      	mov	r3, r7
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4806      	ldr	r0, [pc, #24]	@ (8002ab4 <MX_TIM5_Init+0xa4>)
 8002a9c:	f004 fede 	bl	800785c <HAL_TIMEx_MasterConfigSynchronization>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002aa6:	f7ff fa65 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002aaa:	bf00      	nop
 8002aac:	3730      	adds	r7, #48	@ 0x30
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	2000042c 	.word	0x2000042c
 8002ab8:	40000c00 	.word	0x40000c00

08002abc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b092      	sub	sp, #72	@ 0x48
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002adc:	d129      	bne.n	8002b32 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ade:	4b79      	ldr	r3, [pc, #484]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae2:	4a78      	ldr	r2, [pc, #480]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aea:	4b76      	ldr	r3, [pc, #472]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	4b73      	ldr	r3, [pc, #460]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afa:	4a72      	ldr	r2, [pc, #456]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b02:	4b70      	ldr	r3, [pc, #448]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	2302      	movs	r3, #2
 8002b14:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b22:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b26:	4619      	mov	r1, r3
 8002b28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b2c:	f001 ffbc 	bl	8004aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002b30:	e0c4      	b.n	8002cbc <HAL_TIM_Encoder_MspInit+0x200>
  else if(tim_encoderHandle->Instance==TIM3)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a64      	ldr	r2, [pc, #400]	@ (8002cc8 <HAL_TIM_Encoder_MspInit+0x20c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d145      	bne.n	8002bc8 <HAL_TIM_Encoder_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b3c:	4b61      	ldr	r3, [pc, #388]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b40:	4a60      	ldr	r2, [pc, #384]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002b42:	f043 0302 	orr.w	r3, r3, #2
 8002b46:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b48:	4b5e      	ldr	r3, [pc, #376]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b54:	4b5b      	ldr	r3, [pc, #364]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b58:	4a5a      	ldr	r2, [pc, #360]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b60:	4b58      	ldr	r3, [pc, #352]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6c:	4b55      	ldr	r3, [pc, #340]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b70:	4a54      	ldr	r2, [pc, #336]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002b72:	f043 0304 	orr.w	r3, r3, #4
 8002b76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b78:	4b52      	ldr	r3, [pc, #328]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	623b      	str	r3, [r7, #32]
 8002b82:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b84:	2310      	movs	r3, #16
 8002b86:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b90:	2300      	movs	r3, #0
 8002b92:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b94:	2302      	movs	r3, #2
 8002b96:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b98:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ba2:	f001 ff81 	bl	8004aa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ba6:	2340      	movs	r3, #64	@ 0x40
 8002ba8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	2302      	movs	r3, #2
 8002bac:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4842      	ldr	r0, [pc, #264]	@ (8002ccc <HAL_TIM_Encoder_MspInit+0x210>)
 8002bc2:	f001 ff71 	bl	8004aa8 <HAL_GPIO_Init>
}
 8002bc6:	e079      	b.n	8002cbc <HAL_TIM_Encoder_MspInit+0x200>
  else if(tim_encoderHandle->Instance==TIM4)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a40      	ldr	r2, [pc, #256]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x214>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d12a      	bne.n	8002c28 <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bd2:	4b3c      	ldr	r3, [pc, #240]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd6:	4a3b      	ldr	r2, [pc, #236]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bde:	4b39      	ldr	r3, [pc, #228]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bea:	4b36      	ldr	r3, [pc, #216]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bee:	4a35      	ldr	r2, [pc, #212]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bf6:	4b33      	ldr	r3, [pc, #204]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c02:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002c06:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c10:	2300      	movs	r3, #0
 8002c12:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002c14:	230a      	movs	r3, #10
 8002c16:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c18:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c22:	f001 ff41 	bl	8004aa8 <HAL_GPIO_Init>
}
 8002c26:	e049      	b.n	8002cbc <HAL_TIM_Encoder_MspInit+0x200>
  else if(tim_encoderHandle->Instance==TIM5)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a29      	ldr	r2, [pc, #164]	@ (8002cd4 <HAL_TIM_Encoder_MspInit+0x218>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d144      	bne.n	8002cbc <HAL_TIM_Encoder_MspInit+0x200>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c32:	4b24      	ldr	r3, [pc, #144]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c36:	4a23      	ldr	r2, [pc, #140]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002c38:	f043 0308 	orr.w	r3, r3, #8
 8002c3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c3e:	4b21      	ldr	r3, [pc, #132]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002c50:	f043 0302 	orr.w	r3, r3, #2
 8002c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c56:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c62:	4b18      	ldr	r3, [pc, #96]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c66:	4a17      	ldr	r2, [pc, #92]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002c68:	f043 0304 	orr.w	r3, r3, #4
 8002c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c6e:	4b15      	ldr	r3, [pc, #84]	@ (8002cc4 <HAL_TIM_Encoder_MspInit+0x208>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c86:	2300      	movs	r3, #0
 8002c88:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002c92:	4619      	mov	r1, r3
 8002c94:	4810      	ldr	r0, [pc, #64]	@ (8002cd8 <HAL_TIM_Encoder_MspInit+0x21c>)
 8002c96:	f001 ff07 	bl	8004aa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c9e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8002cac:	2301      	movs	r3, #1
 8002cae:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4805      	ldr	r0, [pc, #20]	@ (8002ccc <HAL_TIM_Encoder_MspInit+0x210>)
 8002cb8:	f001 fef6 	bl	8004aa8 <HAL_GPIO_Init>
}
 8002cbc:	bf00      	nop
 8002cbe:	3748      	adds	r7, #72	@ 0x48
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	48000800 	.word	0x48000800
 8002cd0:	40000800 	.word	0x40000800
 8002cd4:	40000c00 	.word	0x40000c00
 8002cd8:	48000400 	.word	0x48000400

08002cdc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ce0:	4b22      	ldr	r3, [pc, #136]	@ (8002d6c <MX_USART1_UART_Init+0x90>)
 8002ce2:	4a23      	ldr	r2, [pc, #140]	@ (8002d70 <MX_USART1_UART_Init+0x94>)
 8002ce4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002ce6:	4b21      	ldr	r3, [pc, #132]	@ (8002d6c <MX_USART1_UART_Init+0x90>)
 8002ce8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002cec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cee:	4b1f      	ldr	r3, [pc, #124]	@ (8002d6c <MX_USART1_UART_Init+0x90>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d6c <MX_USART1_UART_Init+0x90>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8002d6c <MX_USART1_UART_Init+0x90>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d00:	4b1a      	ldr	r3, [pc, #104]	@ (8002d6c <MX_USART1_UART_Init+0x90>)
 8002d02:	220c      	movs	r2, #12
 8002d04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d06:	4b19      	ldr	r3, [pc, #100]	@ (8002d6c <MX_USART1_UART_Init+0x90>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d0c:	4b17      	ldr	r3, [pc, #92]	@ (8002d6c <MX_USART1_UART_Init+0x90>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d12:	4b16      	ldr	r3, [pc, #88]	@ (8002d6c <MX_USART1_UART_Init+0x90>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d18:	4b14      	ldr	r3, [pc, #80]	@ (8002d6c <MX_USART1_UART_Init+0x90>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d1e:	4b13      	ldr	r3, [pc, #76]	@ (8002d6c <MX_USART1_UART_Init+0x90>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d24:	4811      	ldr	r0, [pc, #68]	@ (8002d6c <MX_USART1_UART_Init+0x90>)
 8002d26:	f004 fe75 	bl	8007a14 <HAL_UART_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d30:	f7ff f920 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d34:	2100      	movs	r1, #0
 8002d36:	480d      	ldr	r0, [pc, #52]	@ (8002d6c <MX_USART1_UART_Init+0x90>)
 8002d38:	f005 fc9e 	bl	8008678 <HAL_UARTEx_SetTxFifoThreshold>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d42:	f7ff f917 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d46:	2100      	movs	r1, #0
 8002d48:	4808      	ldr	r0, [pc, #32]	@ (8002d6c <MX_USART1_UART_Init+0x90>)
 8002d4a:	f005 fcd3 	bl	80086f4 <HAL_UARTEx_SetRxFifoThreshold>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d54:	f7ff f90e 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d58:	4804      	ldr	r0, [pc, #16]	@ (8002d6c <MX_USART1_UART_Init+0x90>)
 8002d5a:	f005 fc54 	bl	8008606 <HAL_UARTEx_DisableFifoMode>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d64:	f7ff f906 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d68:	bf00      	nop
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20000478 	.word	0x20000478
 8002d70:	40013800 	.word	0x40013800

08002d74 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d78:	4b22      	ldr	r3, [pc, #136]	@ (8002e04 <MX_USART2_UART_Init+0x90>)
 8002d7a:	4a23      	ldr	r2, [pc, #140]	@ (8002e08 <MX_USART2_UART_Init+0x94>)
 8002d7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002d7e:	4b21      	ldr	r3, [pc, #132]	@ (8002e04 <MX_USART2_UART_Init+0x90>)
 8002d80:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002d84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d86:	4b1f      	ldr	r3, [pc, #124]	@ (8002e04 <MX_USART2_UART_Init+0x90>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e04 <MX_USART2_UART_Init+0x90>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d92:	4b1c      	ldr	r3, [pc, #112]	@ (8002e04 <MX_USART2_UART_Init+0x90>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d98:	4b1a      	ldr	r3, [pc, #104]	@ (8002e04 <MX_USART2_UART_Init+0x90>)
 8002d9a:	220c      	movs	r2, #12
 8002d9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d9e:	4b19      	ldr	r3, [pc, #100]	@ (8002e04 <MX_USART2_UART_Init+0x90>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da4:	4b17      	ldr	r3, [pc, #92]	@ (8002e04 <MX_USART2_UART_Init+0x90>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002daa:	4b16      	ldr	r3, [pc, #88]	@ (8002e04 <MX_USART2_UART_Init+0x90>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002db0:	4b14      	ldr	r3, [pc, #80]	@ (8002e04 <MX_USART2_UART_Init+0x90>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002db6:	4b13      	ldr	r3, [pc, #76]	@ (8002e04 <MX_USART2_UART_Init+0x90>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dbc:	4811      	ldr	r0, [pc, #68]	@ (8002e04 <MX_USART2_UART_Init+0x90>)
 8002dbe:	f004 fe29 	bl	8007a14 <HAL_UART_Init>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002dc8:	f7ff f8d4 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dcc:	2100      	movs	r1, #0
 8002dce:	480d      	ldr	r0, [pc, #52]	@ (8002e04 <MX_USART2_UART_Init+0x90>)
 8002dd0:	f005 fc52 	bl	8008678 <HAL_UARTEx_SetTxFifoThreshold>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002dda:	f7ff f8cb 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dde:	2100      	movs	r1, #0
 8002de0:	4808      	ldr	r0, [pc, #32]	@ (8002e04 <MX_USART2_UART_Init+0x90>)
 8002de2:	f005 fc87 	bl	80086f4 <HAL_UARTEx_SetRxFifoThreshold>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002dec:	f7ff f8c2 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002df0:	4804      	ldr	r0, [pc, #16]	@ (8002e04 <MX_USART2_UART_Init+0x90>)
 8002df2:	f005 fc08 	bl	8008606 <HAL_UARTEx_DisableFifoMode>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002dfc:	f7ff f8ba 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	2000050c 	.word	0x2000050c
 8002e08:	40004400 	.word	0x40004400

08002e0c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e10:	4b22      	ldr	r3, [pc, #136]	@ (8002e9c <MX_USART3_UART_Init+0x90>)
 8002e12:	4a23      	ldr	r2, [pc, #140]	@ (8002ea0 <MX_USART3_UART_Init+0x94>)
 8002e14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002e16:	4b21      	ldr	r3, [pc, #132]	@ (8002e9c <MX_USART3_UART_Init+0x90>)
 8002e18:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002e1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002e9c <MX_USART3_UART_Init+0x90>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e24:	4b1d      	ldr	r3, [pc, #116]	@ (8002e9c <MX_USART3_UART_Init+0x90>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e9c <MX_USART3_UART_Init+0x90>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e30:	4b1a      	ldr	r3, [pc, #104]	@ (8002e9c <MX_USART3_UART_Init+0x90>)
 8002e32:	220c      	movs	r2, #12
 8002e34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e36:	4b19      	ldr	r3, [pc, #100]	@ (8002e9c <MX_USART3_UART_Init+0x90>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e3c:	4b17      	ldr	r3, [pc, #92]	@ (8002e9c <MX_USART3_UART_Init+0x90>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e42:	4b16      	ldr	r3, [pc, #88]	@ (8002e9c <MX_USART3_UART_Init+0x90>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e48:	4b14      	ldr	r3, [pc, #80]	@ (8002e9c <MX_USART3_UART_Init+0x90>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e4e:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <MX_USART3_UART_Init+0x90>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e54:	4811      	ldr	r0, [pc, #68]	@ (8002e9c <MX_USART3_UART_Init+0x90>)
 8002e56:	f004 fddd 	bl	8007a14 <HAL_UART_Init>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e60:	f7ff f888 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e64:	2100      	movs	r1, #0
 8002e66:	480d      	ldr	r0, [pc, #52]	@ (8002e9c <MX_USART3_UART_Init+0x90>)
 8002e68:	f005 fc06 	bl	8008678 <HAL_UARTEx_SetTxFifoThreshold>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e72:	f7ff f87f 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e76:	2100      	movs	r1, #0
 8002e78:	4808      	ldr	r0, [pc, #32]	@ (8002e9c <MX_USART3_UART_Init+0x90>)
 8002e7a:	f005 fc3b 	bl	80086f4 <HAL_UARTEx_SetRxFifoThreshold>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002e84:	f7ff f876 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e88:	4804      	ldr	r0, [pc, #16]	@ (8002e9c <MX_USART3_UART_Init+0x90>)
 8002e8a:	f005 fbbc 	bl	8008606 <HAL_UARTEx_DisableFifoMode>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002e94:	f7ff f86e 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e98:	bf00      	nop
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	200005a0 	.word	0x200005a0
 8002ea0:	40004800 	.word	0x40004800

08002ea4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b0a2      	sub	sp, #136	@ 0x88
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eac:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ebc:	f107 0320 	add.w	r3, r7, #32
 8002ec0:	2254      	movs	r2, #84	@ 0x54
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f008 fa47 	bl	800b358 <memset>
  if(uartHandle->Instance==USART1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a5e      	ldr	r2, [pc, #376]	@ (8003048 <HAL_UART_MspInit+0x1a4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d138      	bne.n	8002f46 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002edc:	f107 0320 	add.w	r3, r7, #32
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f002 fed9 	bl	8005c98 <HAL_RCCEx_PeriphCLKConfig>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002eec:	f7ff f842 	bl	8001f74 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ef0:	4b56      	ldr	r3, [pc, #344]	@ (800304c <HAL_UART_MspInit+0x1a8>)
 8002ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ef4:	4a55      	ldr	r2, [pc, #340]	@ (800304c <HAL_UART_MspInit+0x1a8>)
 8002ef6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002efa:	6613      	str	r3, [r2, #96]	@ 0x60
 8002efc:	4b53      	ldr	r3, [pc, #332]	@ (800304c <HAL_UART_MspInit+0x1a8>)
 8002efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f08:	4b50      	ldr	r3, [pc, #320]	@ (800304c <HAL_UART_MspInit+0x1a8>)
 8002f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f0c:	4a4f      	ldr	r2, [pc, #316]	@ (800304c <HAL_UART_MspInit+0x1a8>)
 8002f0e:	f043 0304 	orr.w	r3, r3, #4
 8002f12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f14:	4b4d      	ldr	r3, [pc, #308]	@ (800304c <HAL_UART_MspInit+0x1a8>)
 8002f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002f20:	2330      	movs	r3, #48	@ 0x30
 8002f22:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f32:	2307      	movs	r3, #7
 8002f34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f38:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4844      	ldr	r0, [pc, #272]	@ (8003050 <HAL_UART_MspInit+0x1ac>)
 8002f40:	f001 fdb2 	bl	8004aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002f44:	e07c      	b.n	8003040 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART2)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a42      	ldr	r2, [pc, #264]	@ (8003054 <HAL_UART_MspInit+0x1b0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d139      	bne.n	8002fc4 <HAL_UART_MspInit+0x120>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f50:	2302      	movs	r3, #2
 8002f52:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f54:	2300      	movs	r3, #0
 8002f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f58:	f107 0320 	add.w	r3, r7, #32
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f002 fe9b 	bl	8005c98 <HAL_RCCEx_PeriphCLKConfig>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8002f68:	f7ff f804 	bl	8001f74 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f6c:	4b37      	ldr	r3, [pc, #220]	@ (800304c <HAL_UART_MspInit+0x1a8>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f70:	4a36      	ldr	r2, [pc, #216]	@ (800304c <HAL_UART_MspInit+0x1a8>)
 8002f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f76:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f78:	4b34      	ldr	r3, [pc, #208]	@ (800304c <HAL_UART_MspInit+0x1a8>)
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f84:	4b31      	ldr	r3, [pc, #196]	@ (800304c <HAL_UART_MspInit+0x1a8>)
 8002f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f88:	4a30      	ldr	r2, [pc, #192]	@ (800304c <HAL_UART_MspInit+0x1a8>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f90:	4b2e      	ldr	r3, [pc, #184]	@ (800304c <HAL_UART_MspInit+0x1a8>)
 8002f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f9c:	230c      	movs	r3, #12
 8002f9e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fae:	2307      	movs	r3, #7
 8002fb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fbe:	f001 fd73 	bl	8004aa8 <HAL_GPIO_Init>
}
 8002fc2:	e03d      	b.n	8003040 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART3)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a23      	ldr	r2, [pc, #140]	@ (8003058 <HAL_UART_MspInit+0x1b4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d138      	bne.n	8003040 <HAL_UART_MspInit+0x19c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002fce:	2304      	movs	r3, #4
 8002fd0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fd6:	f107 0320 	add.w	r3, r7, #32
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f002 fe5c 	bl	8005c98 <HAL_RCCEx_PeriphCLKConfig>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_UART_MspInit+0x146>
      Error_Handler();
 8002fe6:	f7fe ffc5 	bl	8001f74 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fea:	4b18      	ldr	r3, [pc, #96]	@ (800304c <HAL_UART_MspInit+0x1a8>)
 8002fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fee:	4a17      	ldr	r2, [pc, #92]	@ (800304c <HAL_UART_MspInit+0x1a8>)
 8002ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ff6:	4b15      	ldr	r3, [pc, #84]	@ (800304c <HAL_UART_MspInit+0x1a8>)
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003002:	4b12      	ldr	r3, [pc, #72]	@ (800304c <HAL_UART_MspInit+0x1a8>)
 8003004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003006:	4a11      	ldr	r2, [pc, #68]	@ (800304c <HAL_UART_MspInit+0x1a8>)
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800300e:	4b0f      	ldr	r3, [pc, #60]	@ (800304c <HAL_UART_MspInit+0x1a8>)
 8003010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800301a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800301e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003020:	2302      	movs	r3, #2
 8003022:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	2300      	movs	r3, #0
 8003026:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003028:	2300      	movs	r3, #0
 800302a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800302e:	2307      	movs	r3, #7
 8003030:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003034:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003038:	4619      	mov	r1, r3
 800303a:	4808      	ldr	r0, [pc, #32]	@ (800305c <HAL_UART_MspInit+0x1b8>)
 800303c:	f001 fd34 	bl	8004aa8 <HAL_GPIO_Init>
}
 8003040:	bf00      	nop
 8003042:	3788      	adds	r7, #136	@ 0x88
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40013800 	.word	0x40013800
 800304c:	40021000 	.word	0x40021000
 8003050:	48000800 	.word	0x48000800
 8003054:	40004400 	.word	0x40004400
 8003058:	40004800 	.word	0x40004800
 800305c:	48000400 	.word	0x48000400

08003060 <Reset_Handler>:
 8003060:	480d      	ldr	r0, [pc, #52]	@ (8003098 <LoopForever+0x2>)
 8003062:	4685      	mov	sp, r0
 8003064:	f7ff fb7c 	bl	8002760 <SystemInit>
 8003068:	480c      	ldr	r0, [pc, #48]	@ (800309c <LoopForever+0x6>)
 800306a:	490d      	ldr	r1, [pc, #52]	@ (80030a0 <LoopForever+0xa>)
 800306c:	4a0d      	ldr	r2, [pc, #52]	@ (80030a4 <LoopForever+0xe>)
 800306e:	2300      	movs	r3, #0
 8003070:	e002      	b.n	8003078 <LoopCopyDataInit>

08003072 <CopyDataInit>:
 8003072:	58d4      	ldr	r4, [r2, r3]
 8003074:	50c4      	str	r4, [r0, r3]
 8003076:	3304      	adds	r3, #4

08003078 <LoopCopyDataInit>:
 8003078:	18c4      	adds	r4, r0, r3
 800307a:	428c      	cmp	r4, r1
 800307c:	d3f9      	bcc.n	8003072 <CopyDataInit>
 800307e:	4a0a      	ldr	r2, [pc, #40]	@ (80030a8 <LoopForever+0x12>)
 8003080:	4c0a      	ldr	r4, [pc, #40]	@ (80030ac <LoopForever+0x16>)
 8003082:	2300      	movs	r3, #0
 8003084:	e001      	b.n	800308a <LoopFillZerobss>

08003086 <FillZerobss>:
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	3204      	adds	r2, #4

0800308a <LoopFillZerobss>:
 800308a:	42a2      	cmp	r2, r4
 800308c:	d3fb      	bcc.n	8003086 <FillZerobss>
 800308e:	f008 f9c1 	bl	800b414 <__libc_init_array>
 8003092:	f7fe fed5 	bl	8001e40 <main>

08003096 <LoopForever>:
 8003096:	e7fe      	b.n	8003096 <LoopForever>
 8003098:	20020000 	.word	0x20020000
 800309c:	20000000 	.word	0x20000000
 80030a0:	20000064 	.word	0x20000064
 80030a4:	0800b674 	.word	0x0800b674
 80030a8:	20000068 	.word	0x20000068
 80030ac:	20002160 	.word	0x20002160

080030b0 <ADC1_2_IRQHandler>:
 80030b0:	e7fe      	b.n	80030b0 <ADC1_2_IRQHandler>

080030b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030bc:	2003      	movs	r0, #3
 80030be:	f001 fcc0 	bl	8004a42 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030c2:	200f      	movs	r0, #15
 80030c4:	f7ff faba 	bl	800263c <HAL_InitTick>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	71fb      	strb	r3, [r7, #7]
 80030d2:	e001      	b.n	80030d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030d4:	f7ff fa88 	bl	80025e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030d8:	79fb      	ldrb	r3, [r7, #7]

}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030e8:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <HAL_IncTick+0x1c>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <HAL_IncTick+0x20>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4413      	add	r3, r2
 80030f2:	4a03      	ldr	r2, [pc, #12]	@ (8003100 <HAL_IncTick+0x1c>)
 80030f4:	6013      	str	r3, [r2, #0]
}
 80030f6:	bf00      	nop
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	20000634 	.word	0x20000634
 8003104:	2000000c 	.word	0x2000000c

08003108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return uwTick;
 800310c:	4b03      	ldr	r3, [pc, #12]	@ (800311c <HAL_GetTick+0x14>)
 800310e:	681b      	ldr	r3, [r3, #0]
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000634 	.word	0x20000634

08003120 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	609a      	str	r2, [r3, #8]
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	609a      	str	r2, [r3, #8]
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3360      	adds	r3, #96	@ 0x60
 800319a:	461a      	mov	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b08      	ldr	r3, [pc, #32]	@ (80031cc <LL_ADC_SetOffset+0x44>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80031c0:	bf00      	nop
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	03fff000 	.word	0x03fff000

080031d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3360      	adds	r3, #96	@ 0x60
 80031de:	461a      	mov	r2, r3
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3360      	adds	r3, #96	@ 0x60
 800320c:	461a      	mov	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	431a      	orrs	r2, r3
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003232:	b480      	push	{r7}
 8003234:	b087      	sub	sp, #28
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3360      	adds	r3, #96	@ 0x60
 8003242:	461a      	mov	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	431a      	orrs	r2, r3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800325c:	bf00      	nop
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3360      	adds	r3, #96	@ 0x60
 8003278:	461a      	mov	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	431a      	orrs	r2, r3
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	615a      	str	r2, [r3, #20]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b087      	sub	sp, #28
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3330      	adds	r3, #48	@ 0x30
 80032fa:	461a      	mov	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	4413      	add	r3, r2
 8003308:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	211f      	movs	r1, #31
 8003316:	fa01 f303 	lsl.w	r3, r1, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	401a      	ands	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	0e9b      	lsrs	r3, r3, #26
 8003322:	f003 011f 	and.w	r1, r3, #31
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	431a      	orrs	r2, r3
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003336:	bf00      	nop
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003342:	b480      	push	{r7}
 8003344:	b087      	sub	sp, #28
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	3314      	adds	r3, #20
 8003352:	461a      	mov	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	0e5b      	lsrs	r3, r3, #25
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	4413      	add	r3, r2
 8003360:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	0d1b      	lsrs	r3, r3, #20
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	2107      	movs	r1, #7
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	401a      	ands	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	0d1b      	lsrs	r3, r3, #20
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	fa01 f303 	lsl.w	r3, r1, r3
 8003386:	431a      	orrs	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800338c:	bf00      	nop
 800338e:	371c      	adds	r7, #28
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b0:	43db      	mvns	r3, r3
 80033b2:	401a      	ands	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f003 0318 	and.w	r3, r3, #24
 80033ba:	4908      	ldr	r1, [pc, #32]	@ (80033dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80033bc:	40d9      	lsrs	r1, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	400b      	ands	r3, r1
 80033c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c6:	431a      	orrs	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80033ce:	bf00      	nop
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	0007ffff 	.word	0x0007ffff

080033e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 031f 	and.w	r3, r3, #31
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003428:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6093      	str	r3, [r2, #8]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800344c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003450:	d101      	bne.n	8003456 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003474:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003478:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034a0:	d101      	bne.n	80034a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034c8:	f043 0201 	orr.w	r2, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <LL_ADC_IsEnabled+0x18>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <LL_ADC_IsEnabled+0x1a>
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003512:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003516:	f043 0204 	orr.w	r2, r3, #4
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b04      	cmp	r3, #4
 800353c:	d101      	bne.n	8003542 <LL_ADC_REG_IsConversionOngoing+0x18>
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b08      	cmp	r3, #8
 8003562:	d101      	bne.n	8003568 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b089      	sub	sp, #36	@ 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e1a9      	b.n	80038e6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7fd fd1b 	bl	8000fdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff3f 	bl	800343c <LL_ADC_IsDeepPowerDownEnabled>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff25 	bl	8003418 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff ff5a 	bl	800348c <LL_ADC_IsInternalRegulatorEnabled>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d115      	bne.n	800360a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff ff3e 	bl	8003464 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035e8:	4b9c      	ldr	r3, [pc, #624]	@ (800385c <HAL_ADC_Init+0x2e4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	099b      	lsrs	r3, r3, #6
 80035ee:	4a9c      	ldr	r2, [pc, #624]	@ (8003860 <HAL_ADC_Init+0x2e8>)
 80035f0:	fba2 2303 	umull	r2, r3, r2, r3
 80035f4:	099b      	lsrs	r3, r3, #6
 80035f6:	3301      	adds	r3, #1
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80035fc:	e002      	b.n	8003604 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3b01      	subs	r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f9      	bne.n	80035fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff ff3c 	bl	800348c <LL_ADC_IsInternalRegulatorEnabled>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10d      	bne.n	8003636 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361e:	f043 0210 	orr.w	r2, r3, #16
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362a:	f043 0201 	orr.w	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff ff75 	bl	800352a <LL_ADC_REG_IsConversionOngoing>
 8003640:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	2b00      	cmp	r3, #0
 800364c:	f040 8142 	bne.w	80038d4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2b00      	cmp	r3, #0
 8003654:	f040 813e 	bne.w	80038d4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003660:	f043 0202 	orr.w	r2, r3, #2
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ff35 	bl	80034dc <LL_ADC_IsEnabled>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d141      	bne.n	80036fc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003680:	d004      	beq.n	800368c <HAL_ADC_Init+0x114>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a77      	ldr	r2, [pc, #476]	@ (8003864 <HAL_ADC_Init+0x2ec>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d10f      	bne.n	80036ac <HAL_ADC_Init+0x134>
 800368c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003690:	f7ff ff24 	bl	80034dc <LL_ADC_IsEnabled>
 8003694:	4604      	mov	r4, r0
 8003696:	4873      	ldr	r0, [pc, #460]	@ (8003864 <HAL_ADC_Init+0x2ec>)
 8003698:	f7ff ff20 	bl	80034dc <LL_ADC_IsEnabled>
 800369c:	4603      	mov	r3, r0
 800369e:	4323      	orrs	r3, r4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	e012      	b.n	80036d2 <HAL_ADC_Init+0x15a>
 80036ac:	486e      	ldr	r0, [pc, #440]	@ (8003868 <HAL_ADC_Init+0x2f0>)
 80036ae:	f7ff ff15 	bl	80034dc <LL_ADC_IsEnabled>
 80036b2:	4604      	mov	r4, r0
 80036b4:	486d      	ldr	r0, [pc, #436]	@ (800386c <HAL_ADC_Init+0x2f4>)
 80036b6:	f7ff ff11 	bl	80034dc <LL_ADC_IsEnabled>
 80036ba:	4603      	mov	r3, r0
 80036bc:	431c      	orrs	r4, r3
 80036be:	486c      	ldr	r0, [pc, #432]	@ (8003870 <HAL_ADC_Init+0x2f8>)
 80036c0:	f7ff ff0c 	bl	80034dc <LL_ADC_IsEnabled>
 80036c4:	4603      	mov	r3, r0
 80036c6:	4323      	orrs	r3, r4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf0c      	ite	eq
 80036cc:	2301      	moveq	r3, #1
 80036ce:	2300      	movne	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d012      	beq.n	80036fc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036de:	d004      	beq.n	80036ea <HAL_ADC_Init+0x172>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a5f      	ldr	r2, [pc, #380]	@ (8003864 <HAL_ADC_Init+0x2ec>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d101      	bne.n	80036ee <HAL_ADC_Init+0x176>
 80036ea:	4a62      	ldr	r2, [pc, #392]	@ (8003874 <HAL_ADC_Init+0x2fc>)
 80036ec:	e000      	b.n	80036f0 <HAL_ADC_Init+0x178>
 80036ee:	4a62      	ldr	r2, [pc, #392]	@ (8003878 <HAL_ADC_Init+0x300>)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4619      	mov	r1, r3
 80036f6:	4610      	mov	r0, r2
 80036f8:	f7ff fd12 	bl	8003120 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	7f5b      	ldrb	r3, [r3, #29]
 8003700:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003706:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800370c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003712:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800371a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800371c:	4313      	orrs	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003726:	2b01      	cmp	r3, #1
 8003728:	d106      	bne.n	8003738 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372e:	3b01      	subs	r3, #1
 8003730:	045b      	lsls	r3, r3, #17
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373c:	2b00      	cmp	r3, #0
 800373e:	d009      	beq.n	8003754 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	4b48      	ldr	r3, [pc, #288]	@ (800387c <HAL_ADC_Init+0x304>)
 800375c:	4013      	ands	r3, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	69b9      	ldr	r1, [r7, #24]
 8003764:	430b      	orrs	r3, r1
 8003766:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fee4 	bl	8003550 <LL_ADC_INJ_IsConversionOngoing>
 8003788:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d17f      	bne.n	8003890 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d17c      	bne.n	8003890 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800379a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80037a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80037a4:	4313      	orrs	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037b2:	f023 0302 	bic.w	r3, r3, #2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	69b9      	ldr	r1, [r7, #24]
 80037bc:	430b      	orrs	r3, r1
 80037be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d017      	beq.n	80037f8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80037d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80037e0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80037e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6911      	ldr	r1, [r2, #16]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	430b      	orrs	r3, r1
 80037f2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80037f6:	e013      	b.n	8003820 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003806:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003818:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800381c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003826:	2b01      	cmp	r3, #1
 8003828:	d12a      	bne.n	8003880 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003834:	f023 0304 	bic.w	r3, r3, #4
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003840:	4311      	orrs	r1, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003846:	4311      	orrs	r1, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800384c:	430a      	orrs	r2, r1
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	611a      	str	r2, [r3, #16]
 800385a:	e019      	b.n	8003890 <HAL_ADC_Init+0x318>
 800385c:	20000004 	.word	0x20000004
 8003860:	053e2d63 	.word	0x053e2d63
 8003864:	50000100 	.word	0x50000100
 8003868:	50000400 	.word	0x50000400
 800386c:	50000500 	.word	0x50000500
 8003870:	50000600 	.word	0x50000600
 8003874:	50000300 	.word	0x50000300
 8003878:	50000700 	.word	0x50000700
 800387c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0201 	bic.w	r2, r2, #1
 800388e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d10c      	bne.n	80038b2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	f023 010f 	bic.w	r1, r3, #15
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	1e5a      	subs	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80038b0:	e007      	b.n	80038c2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 020f 	bic.w	r2, r2, #15
 80038c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c6:	f023 0303 	bic.w	r3, r3, #3
 80038ca:	f043 0201 	orr.w	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038d2:	e007      	b.n	80038e4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d8:	f043 0210 	orr.w	r2, r3, #16
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80038e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3724      	adds	r7, #36	@ 0x24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd90      	pop	{r4, r7, pc}
 80038ee:	bf00      	nop

080038f0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003900:	d004      	beq.n	800390c <HAL_ADC_Start+0x1c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a67      	ldr	r2, [pc, #412]	@ (8003aa4 <HAL_ADC_Start+0x1b4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d101      	bne.n	8003910 <HAL_ADC_Start+0x20>
 800390c:	4b66      	ldr	r3, [pc, #408]	@ (8003aa8 <HAL_ADC_Start+0x1b8>)
 800390e:	e000      	b.n	8003912 <HAL_ADC_Start+0x22>
 8003910:	4b66      	ldr	r3, [pc, #408]	@ (8003aac <HAL_ADC_Start+0x1bc>)
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff fd64 	bl	80033e0 <LL_ADC_GetMultimode>
 8003918:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fe03 	bl	800352a <LL_ADC_REG_IsConversionOngoing>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	f040 80b4 	bne.w	8003a94 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_ADC_Start+0x4a>
 8003936:	2302      	movs	r3, #2
 8003938:	e0af      	b.n	8003a9a <HAL_ADC_Start+0x1aa>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fe0c 	bl	8004560 <ADC_Enable>
 8003948:	4603      	mov	r3, r0
 800394a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b00      	cmp	r3, #0
 8003950:	f040 809b 	bne.w	8003a8a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003958:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a4d      	ldr	r2, [pc, #308]	@ (8003aa4 <HAL_ADC_Start+0x1b4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d009      	beq.n	8003986 <HAL_ADC_Start+0x96>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a4e      	ldr	r2, [pc, #312]	@ (8003ab0 <HAL_ADC_Start+0x1c0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d002      	beq.n	8003982 <HAL_ADC_Start+0x92>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	e003      	b.n	800398a <HAL_ADC_Start+0x9a>
 8003982:	4b4c      	ldr	r3, [pc, #304]	@ (8003ab4 <HAL_ADC_Start+0x1c4>)
 8003984:	e001      	b.n	800398a <HAL_ADC_Start+0x9a>
 8003986:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	4293      	cmp	r3, r2
 8003990:	d002      	beq.n	8003998 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d105      	bne.n	80039a4 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039b0:	d106      	bne.n	80039c0 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b6:	f023 0206 	bic.w	r2, r3, #6
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80039be:	e002      	b.n	80039c6 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	221c      	movs	r2, #28
 80039cc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a32      	ldr	r2, [pc, #200]	@ (8003aa4 <HAL_ADC_Start+0x1b4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d009      	beq.n	80039f4 <HAL_ADC_Start+0x104>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a32      	ldr	r2, [pc, #200]	@ (8003ab0 <HAL_ADC_Start+0x1c0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d002      	beq.n	80039f0 <HAL_ADC_Start+0x100>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	e003      	b.n	80039f8 <HAL_ADC_Start+0x108>
 80039f0:	4b30      	ldr	r3, [pc, #192]	@ (8003ab4 <HAL_ADC_Start+0x1c4>)
 80039f2:	e001      	b.n	80039f8 <HAL_ADC_Start+0x108>
 80039f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d008      	beq.n	8003a12 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b05      	cmp	r3, #5
 8003a0a:	d002      	beq.n	8003a12 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b09      	cmp	r3, #9
 8003a10:	d114      	bne.n	8003a3c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d007      	beq.n	8003a30 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a24:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a28:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff fd64 	bl	8003502 <LL_ADC_REG_StartConversion>
 8003a3a:	e02d      	b.n	8003a98 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a40:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a15      	ldr	r2, [pc, #84]	@ (8003aa4 <HAL_ADC_Start+0x1b4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d009      	beq.n	8003a66 <HAL_ADC_Start+0x176>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a16      	ldr	r2, [pc, #88]	@ (8003ab0 <HAL_ADC_Start+0x1c0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d002      	beq.n	8003a62 <HAL_ADC_Start+0x172>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	e003      	b.n	8003a6a <HAL_ADC_Start+0x17a>
 8003a62:	4b14      	ldr	r3, [pc, #80]	@ (8003ab4 <HAL_ADC_Start+0x1c4>)
 8003a64:	e001      	b.n	8003a6a <HAL_ADC_Start+0x17a>
 8003a66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a6a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00f      	beq.n	8003a98 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a80:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a88:	e006      	b.n	8003a98 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003a92:	e001      	b.n	8003a98 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a94:	2302      	movs	r3, #2
 8003a96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	50000100 	.word	0x50000100
 8003aa8:	50000300 	.word	0x50000300
 8003aac:	50000700 	.word	0x50000700
 8003ab0:	50000500 	.word	0x50000500
 8003ab4:	50000400 	.word	0x50000400

08003ab8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aca:	d004      	beq.n	8003ad6 <HAL_ADC_PollForConversion+0x1e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a77      	ldr	r2, [pc, #476]	@ (8003cb0 <HAL_ADC_PollForConversion+0x1f8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d101      	bne.n	8003ada <HAL_ADC_PollForConversion+0x22>
 8003ad6:	4b77      	ldr	r3, [pc, #476]	@ (8003cb4 <HAL_ADC_PollForConversion+0x1fc>)
 8003ad8:	e000      	b.n	8003adc <HAL_ADC_PollForConversion+0x24>
 8003ada:	4b77      	ldr	r3, [pc, #476]	@ (8003cb8 <HAL_ADC_PollForConversion+0x200>)
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff fc7f 	bl	80033e0 <LL_ADC_GetMultimode>
 8003ae2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d102      	bne.n	8003af2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003aec:	2308      	movs	r3, #8
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	e037      	b.n	8003b62 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2b05      	cmp	r3, #5
 8003afc:	d002      	beq.n	8003b04 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b09      	cmp	r3, #9
 8003b02:	d111      	bne.n	8003b28 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b16:	f043 0220 	orr.w	r2, r3, #32
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e0c1      	b.n	8003ca6 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003b22:	2304      	movs	r3, #4
 8003b24:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003b26:	e01c      	b.n	8003b62 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b30:	d004      	beq.n	8003b3c <HAL_ADC_PollForConversion+0x84>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a5e      	ldr	r2, [pc, #376]	@ (8003cb0 <HAL_ADC_PollForConversion+0x1f8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d101      	bne.n	8003b40 <HAL_ADC_PollForConversion+0x88>
 8003b3c:	4b5d      	ldr	r3, [pc, #372]	@ (8003cb4 <HAL_ADC_PollForConversion+0x1fc>)
 8003b3e:	e000      	b.n	8003b42 <HAL_ADC_PollForConversion+0x8a>
 8003b40:	4b5d      	ldr	r3, [pc, #372]	@ (8003cb8 <HAL_ADC_PollForConversion+0x200>)
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff fc5a 	bl	80033fc <LL_ADC_GetMultiDMATransfer>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b52:	f043 0220 	orr.w	r2, r3, #32
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e0a3      	b.n	8003ca6 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003b5e:	2304      	movs	r3, #4
 8003b60:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003b62:	f7ff fad1 	bl	8003108 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003b68:	e021      	b.n	8003bae <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d01d      	beq.n	8003bae <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003b72:	f7ff fac9 	bl	8003108 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d302      	bcc.n	8003b88 <HAL_ADC_PollForConversion+0xd0>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d112      	bne.n	8003bae <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10b      	bne.n	8003bae <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9a:	f043 0204 	orr.w	r2, r3, #4
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e07b      	b.n	8003ca6 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0d6      	beq.n	8003b6a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff fb79 	bl	80032c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01c      	beq.n	8003c12 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	7f5b      	ldrb	r3, [r3, #29]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d118      	bne.n	8003c12 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d111      	bne.n	8003c12 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d105      	bne.n	8003c12 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c0a:	f043 0201 	orr.w	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a26      	ldr	r2, [pc, #152]	@ (8003cb0 <HAL_ADC_PollForConversion+0x1f8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d009      	beq.n	8003c30 <HAL_ADC_PollForConversion+0x178>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a26      	ldr	r2, [pc, #152]	@ (8003cbc <HAL_ADC_PollForConversion+0x204>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d002      	beq.n	8003c2c <HAL_ADC_PollForConversion+0x174>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	e003      	b.n	8003c34 <HAL_ADC_PollForConversion+0x17c>
 8003c2c:	4b24      	ldr	r3, [pc, #144]	@ (8003cc0 <HAL_ADC_PollForConversion+0x208>)
 8003c2e:	e001      	b.n	8003c34 <HAL_ADC_PollForConversion+0x17c>
 8003c30:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d008      	beq.n	8003c4e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b05      	cmp	r3, #5
 8003c46:	d002      	beq.n	8003c4e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2b09      	cmp	r3, #9
 8003c4c:	d104      	bne.n	8003c58 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	e014      	b.n	8003c82 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a14      	ldr	r2, [pc, #80]	@ (8003cb0 <HAL_ADC_PollForConversion+0x1f8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d009      	beq.n	8003c76 <HAL_ADC_PollForConversion+0x1be>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a15      	ldr	r2, [pc, #84]	@ (8003cbc <HAL_ADC_PollForConversion+0x204>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d002      	beq.n	8003c72 <HAL_ADC_PollForConversion+0x1ba>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	e003      	b.n	8003c7a <HAL_ADC_PollForConversion+0x1c2>
 8003c72:	4b13      	ldr	r3, [pc, #76]	@ (8003cc0 <HAL_ADC_PollForConversion+0x208>)
 8003c74:	e001      	b.n	8003c7a <HAL_ADC_PollForConversion+0x1c2>
 8003c76:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c7a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d104      	bne.n	8003c92 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	e008      	b.n	8003ca4 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d103      	bne.n	8003ca4 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	220c      	movs	r2, #12
 8003ca2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	50000100 	.word	0x50000100
 8003cb4:	50000300 	.word	0x50000300
 8003cb8:	50000700 	.word	0x50000700
 8003cbc:	50000500 	.word	0x50000500
 8003cc0:	50000400 	.word	0x50000400

08003cc4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b0b6      	sub	sp, #216	@ 0xd8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d102      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x24>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	f000 bc13 	b.w	800452a <HAL_ADC_ConfigChannel+0x84a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fc0a 	bl	800352a <LL_ADC_REG_IsConversionOngoing>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f040 83f3 	bne.w	8004504 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6859      	ldr	r1, [r3, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f7ff fadd 	bl	80032ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fbf8 	bl	800352a <LL_ADC_REG_IsConversionOngoing>
 8003d3a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fc04 	bl	8003550 <LL_ADC_INJ_IsConversionOngoing>
 8003d48:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f040 81d9 	bne.w	8004108 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f040 81d4 	bne.w	8004108 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d68:	d10f      	bne.n	8003d8a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2200      	movs	r2, #0
 8003d74:	4619      	mov	r1, r3
 8003d76:	f7ff fae4 	bl	8003342 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff fa8b 	bl	800329e <LL_ADC_SetSamplingTimeCommonConfig>
 8003d88:	e00e      	b.n	8003da8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6819      	ldr	r1, [r3, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	461a      	mov	r2, r3
 8003d98:	f7ff fad3 	bl	8003342 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff fa7b 	bl	800329e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	08db      	lsrs	r3, r3, #3
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d022      	beq.n	8003e10 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6919      	ldr	r1, [r3, #16]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003dda:	f7ff f9d5 	bl	8003188 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6919      	ldr	r1, [r3, #16]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	461a      	mov	r2, r3
 8003dec:	f7ff fa21 	bl	8003232 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d102      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x126>
 8003e00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e04:	e000      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x128>
 8003e06:	2300      	movs	r3, #0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f7ff fa2d 	bl	8003268 <LL_ADC_SetOffsetSaturation>
 8003e0e:	e17b      	b.n	8004108 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2100      	movs	r1, #0
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff f9da 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x15c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff f9cf 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8003e32:	4603      	mov	r3, r0
 8003e34:	0e9b      	lsrs	r3, r3, #26
 8003e36:	f003 021f 	and.w	r2, r3, #31
 8003e3a:	e01e      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x19a>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff f9c4 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e52:	fa93 f3a3 	rbit	r3, r3
 8003e56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003e6a:	2320      	movs	r3, #32
 8003e6c:	e004      	b.n	8003e78 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003e6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e72:	fab3 f383 	clz	r3, r3
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d105      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x1b2>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	0e9b      	lsrs	r3, r3, #26
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	e018      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x1e4>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003e9e:	fa93 f3a3 	rbit	r3, r3
 8003ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003ea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003eae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003eb6:	2320      	movs	r3, #32
 8003eb8:	e004      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003eba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ebe:	fab3 f383 	clz	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d106      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff f993 	bl	80031fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2101      	movs	r1, #1
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff f977 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x222>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff f96c 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	0e9b      	lsrs	r3, r3, #26
 8003efc:	f003 021f 	and.w	r2, r3, #31
 8003f00:	e01e      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x260>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2101      	movs	r1, #1
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff f961 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f18:	fa93 f3a3 	rbit	r3, r3
 8003f1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003f20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003f28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003f30:	2320      	movs	r3, #32
 8003f32:	e004      	b.n	8003f3e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003f34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f38:	fab3 f383 	clz	r3, r3
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x278>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	0e9b      	lsrs	r3, r3, #26
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	e018      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x2aa>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f64:	fa93 f3a3 	rbit	r3, r3
 8003f68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003f6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003f74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003f7c:	2320      	movs	r3, #32
 8003f7e:	e004      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003f80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f84:	fab3 f383 	clz	r3, r3
 8003f88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d106      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2200      	movs	r2, #0
 8003f94:	2101      	movs	r1, #1
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff f930 	bl	80031fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff f914 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x2e8>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2102      	movs	r1, #2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff f909 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	0e9b      	lsrs	r3, r3, #26
 8003fc2:	f003 021f 	and.w	r2, r3, #31
 8003fc6:	e01e      	b.n	8004006 <HAL_ADC_ConfigChannel+0x326>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2102      	movs	r1, #2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff f8fe 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003fe6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003fee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	e004      	b.n	8004004 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003ffa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ffe:	fab3 f383 	clz	r3, r3
 8004002:	b2db      	uxtb	r3, r3
 8004004:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800400e:	2b00      	cmp	r3, #0
 8004010:	d105      	bne.n	800401e <HAL_ADC_ConfigChannel+0x33e>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	0e9b      	lsrs	r3, r3, #26
 8004018:	f003 031f 	and.w	r3, r3, #31
 800401c:	e016      	b.n	800404c <HAL_ADC_ConfigChannel+0x36c>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004026:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800402a:	fa93 f3a3 	rbit	r3, r3
 800402e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004030:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004032:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004036:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800403e:	2320      	movs	r3, #32
 8004040:	e004      	b.n	800404c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004042:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004046:	fab3 f383 	clz	r3, r3
 800404a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800404c:	429a      	cmp	r2, r3
 800404e:	d106      	bne.n	800405e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2200      	movs	r2, #0
 8004056:	2102      	movs	r1, #2
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff f8cf 	bl	80031fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2103      	movs	r1, #3
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff f8b3 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 800406a:	4603      	mov	r3, r0
 800406c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <HAL_ADC_ConfigChannel+0x3aa>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2103      	movs	r1, #3
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff f8a8 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8004080:	4603      	mov	r3, r0
 8004082:	0e9b      	lsrs	r3, r3, #26
 8004084:	f003 021f 	and.w	r2, r3, #31
 8004088:	e017      	b.n	80040ba <HAL_ADC_ConfigChannel+0x3da>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2103      	movs	r1, #3
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff f89d 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8004096:	4603      	mov	r3, r0
 8004098:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800409c:	fa93 f3a3 	rbit	r3, r3
 80040a0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80040a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040a4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80040a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80040ac:	2320      	movs	r3, #32
 80040ae:	e003      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80040b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040b2:	fab3 f383 	clz	r3, r3
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d105      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x3f2>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	0e9b      	lsrs	r3, r3, #26
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	e011      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x416>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80040e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80040e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80040ea:	2320      	movs	r3, #32
 80040ec:	e003      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80040ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040f0:	fab3 f383 	clz	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d106      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2200      	movs	r2, #0
 8004100:	2103      	movs	r1, #3
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff f87a 	bl	80031fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff f9e5 	bl	80034dc <LL_ADC_IsEnabled>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	f040 813d 	bne.w	8004394 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6819      	ldr	r1, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	461a      	mov	r2, r3
 8004128:	f7ff f936 	bl	8003398 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4aa2      	ldr	r2, [pc, #648]	@ (80043bc <HAL_ADC_ConfigChannel+0x6dc>)
 8004132:	4293      	cmp	r3, r2
 8004134:	f040 812e 	bne.w	8004394 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10b      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x480>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	0e9b      	lsrs	r3, r3, #26
 800414e:	3301      	adds	r3, #1
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	2b09      	cmp	r3, #9
 8004156:	bf94      	ite	ls
 8004158:	2301      	movls	r3, #1
 800415a:	2300      	movhi	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e019      	b.n	8004194 <HAL_ADC_ConfigChannel+0x4b4>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004166:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004168:	fa93 f3a3 	rbit	r3, r3
 800416c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800416e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004170:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004172:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004178:	2320      	movs	r3, #32
 800417a:	e003      	b.n	8004184 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800417c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800417e:	fab3 f383 	clz	r3, r3
 8004182:	b2db      	uxtb	r3, r3
 8004184:	3301      	adds	r3, #1
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	2b09      	cmp	r3, #9
 800418c:	bf94      	ite	ls
 800418e:	2301      	movls	r3, #1
 8004190:	2300      	movhi	r3, #0
 8004192:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004194:	2b00      	cmp	r3, #0
 8004196:	d079      	beq.n	800428c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d107      	bne.n	80041b4 <HAL_ADC_ConfigChannel+0x4d4>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	0e9b      	lsrs	r3, r3, #26
 80041aa:	3301      	adds	r3, #1
 80041ac:	069b      	lsls	r3, r3, #26
 80041ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041b2:	e015      	b.n	80041e0 <HAL_ADC_ConfigChannel+0x500>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041bc:	fa93 f3a3 	rbit	r3, r3
 80041c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80041c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80041c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80041cc:	2320      	movs	r3, #32
 80041ce:	e003      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80041d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d2:	fab3 f383 	clz	r3, r3
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	3301      	adds	r3, #1
 80041da:	069b      	lsls	r3, r3, #26
 80041dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d109      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x520>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	0e9b      	lsrs	r3, r3, #26
 80041f2:	3301      	adds	r3, #1
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	2101      	movs	r1, #1
 80041fa:	fa01 f303 	lsl.w	r3, r1, r3
 80041fe:	e017      	b.n	8004230 <HAL_ADC_ConfigChannel+0x550>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004208:	fa93 f3a3 	rbit	r3, r3
 800420c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800420e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004210:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004218:	2320      	movs	r3, #32
 800421a:	e003      	b.n	8004224 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800421c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800421e:	fab3 f383 	clz	r3, r3
 8004222:	b2db      	uxtb	r3, r3
 8004224:	3301      	adds	r3, #1
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	2101      	movs	r1, #1
 800422c:	fa01 f303 	lsl.w	r3, r1, r3
 8004230:	ea42 0103 	orr.w	r1, r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x576>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	0e9b      	lsrs	r3, r3, #26
 8004246:	3301      	adds	r3, #1
 8004248:	f003 021f 	and.w	r2, r3, #31
 800424c:	4613      	mov	r3, r2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	4413      	add	r3, r2
 8004252:	051b      	lsls	r3, r3, #20
 8004254:	e018      	b.n	8004288 <HAL_ADC_ConfigChannel+0x5a8>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425e:	fa93 f3a3 	rbit	r3, r3
 8004262:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004266:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800426e:	2320      	movs	r3, #32
 8004270:	e003      	b.n	800427a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004274:	fab3 f383 	clz	r3, r3
 8004278:	b2db      	uxtb	r3, r3
 800427a:	3301      	adds	r3, #1
 800427c:	f003 021f 	and.w	r2, r3, #31
 8004280:	4613      	mov	r3, r2
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	4413      	add	r3, r2
 8004286:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004288:	430b      	orrs	r3, r1
 800428a:	e07e      	b.n	800438a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004294:	2b00      	cmp	r3, #0
 8004296:	d107      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x5c8>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	0e9b      	lsrs	r3, r3, #26
 800429e:	3301      	adds	r3, #1
 80042a0:	069b      	lsls	r3, r3, #26
 80042a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042a6:	e015      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x5f4>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b0:	fa93 f3a3 	rbit	r3, r3
 80042b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80042b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80042ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80042c0:	2320      	movs	r3, #32
 80042c2:	e003      	b.n	80042cc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80042c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	3301      	adds	r3, #1
 80042ce:	069b      	lsls	r3, r3, #26
 80042d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x614>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	0e9b      	lsrs	r3, r3, #26
 80042e6:	3301      	adds	r3, #1
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	2101      	movs	r1, #1
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	e017      	b.n	8004324 <HAL_ADC_ConfigChannel+0x644>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	61fb      	str	r3, [r7, #28]
  return result;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800430c:	2320      	movs	r3, #32
 800430e:	e003      	b.n	8004318 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	3301      	adds	r3, #1
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	2101      	movs	r1, #1
 8004320:	fa01 f303 	lsl.w	r3, r1, r3
 8004324:	ea42 0103 	orr.w	r1, r2, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10d      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x670>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	0e9b      	lsrs	r3, r3, #26
 800433a:	3301      	adds	r3, #1
 800433c:	f003 021f 	and.w	r2, r3, #31
 8004340:	4613      	mov	r3, r2
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4413      	add	r3, r2
 8004346:	3b1e      	subs	r3, #30
 8004348:	051b      	lsls	r3, r3, #20
 800434a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800434e:	e01b      	b.n	8004388 <HAL_ADC_ConfigChannel+0x6a8>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	fa93 f3a3 	rbit	r3, r3
 800435c:	613b      	str	r3, [r7, #16]
  return result;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004368:	2320      	movs	r3, #32
 800436a:	e003      	b.n	8004374 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	fab3 f383 	clz	r3, r3
 8004372:	b2db      	uxtb	r3, r3
 8004374:	3301      	adds	r3, #1
 8004376:	f003 021f 	and.w	r2, r3, #31
 800437a:	4613      	mov	r3, r2
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4413      	add	r3, r2
 8004380:	3b1e      	subs	r3, #30
 8004382:	051b      	lsls	r3, r3, #20
 8004384:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004388:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800438e:	4619      	mov	r1, r3
 8004390:	f7fe ffd7 	bl	8003342 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b09      	ldr	r3, [pc, #36]	@ (80043c0 <HAL_ADC_ConfigChannel+0x6e0>)
 800439a:	4013      	ands	r3, r2
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 80be 	beq.w	800451e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043aa:	d004      	beq.n	80043b6 <HAL_ADC_ConfigChannel+0x6d6>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a04      	ldr	r2, [pc, #16]	@ (80043c4 <HAL_ADC_ConfigChannel+0x6e4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d10a      	bne.n	80043cc <HAL_ADC_ConfigChannel+0x6ec>
 80043b6:	4b04      	ldr	r3, [pc, #16]	@ (80043c8 <HAL_ADC_ConfigChannel+0x6e8>)
 80043b8:	e009      	b.n	80043ce <HAL_ADC_ConfigChannel+0x6ee>
 80043ba:	bf00      	nop
 80043bc:	407f0000 	.word	0x407f0000
 80043c0:	80080000 	.word	0x80080000
 80043c4:	50000100 	.word	0x50000100
 80043c8:	50000300 	.word	0x50000300
 80043cc:	4b59      	ldr	r3, [pc, #356]	@ (8004534 <HAL_ADC_ConfigChannel+0x854>)
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fecc 	bl	800316c <LL_ADC_GetCommonPathInternalCh>
 80043d4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a56      	ldr	r2, [pc, #344]	@ (8004538 <HAL_ADC_ConfigChannel+0x858>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <HAL_ADC_ConfigChannel+0x70c>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a55      	ldr	r2, [pc, #340]	@ (800453c <HAL_ADC_ConfigChannel+0x85c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d13a      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d134      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004400:	d005      	beq.n	800440e <HAL_ADC_ConfigChannel+0x72e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a4e      	ldr	r2, [pc, #312]	@ (8004540 <HAL_ADC_ConfigChannel+0x860>)
 8004408:	4293      	cmp	r3, r2
 800440a:	f040 8085 	bne.w	8004518 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004416:	d004      	beq.n	8004422 <HAL_ADC_ConfigChannel+0x742>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a49      	ldr	r2, [pc, #292]	@ (8004544 <HAL_ADC_ConfigChannel+0x864>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d101      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x746>
 8004422:	4a49      	ldr	r2, [pc, #292]	@ (8004548 <HAL_ADC_ConfigChannel+0x868>)
 8004424:	e000      	b.n	8004428 <HAL_ADC_ConfigChannel+0x748>
 8004426:	4a43      	ldr	r2, [pc, #268]	@ (8004534 <HAL_ADC_ConfigChannel+0x854>)
 8004428:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800442c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f7fe fe87 	bl	8003146 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004438:	4b44      	ldr	r3, [pc, #272]	@ (800454c <HAL_ADC_ConfigChannel+0x86c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	099b      	lsrs	r3, r3, #6
 800443e:	4a44      	ldr	r2, [pc, #272]	@ (8004550 <HAL_ADC_ConfigChannel+0x870>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	099b      	lsrs	r3, r3, #6
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	4613      	mov	r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004452:	e002      	b.n	800445a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3b01      	subs	r3, #1
 8004458:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f9      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004460:	e05a      	b.n	8004518 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a3b      	ldr	r2, [pc, #236]	@ (8004554 <HAL_ADC_ConfigChannel+0x874>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d125      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800446c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004470:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d11f      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a31      	ldr	r2, [pc, #196]	@ (8004544 <HAL_ADC_ConfigChannel+0x864>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d104      	bne.n	800448c <HAL_ADC_ConfigChannel+0x7ac>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a34      	ldr	r2, [pc, #208]	@ (8004558 <HAL_ADC_ConfigChannel+0x878>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d047      	beq.n	800451c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004494:	d004      	beq.n	80044a0 <HAL_ADC_ConfigChannel+0x7c0>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a2a      	ldr	r2, [pc, #168]	@ (8004544 <HAL_ADC_ConfigChannel+0x864>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d101      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x7c4>
 80044a0:	4a29      	ldr	r2, [pc, #164]	@ (8004548 <HAL_ADC_ConfigChannel+0x868>)
 80044a2:	e000      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x7c6>
 80044a4:	4a23      	ldr	r2, [pc, #140]	@ (8004534 <HAL_ADC_ConfigChannel+0x854>)
 80044a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044ae:	4619      	mov	r1, r3
 80044b0:	4610      	mov	r0, r2
 80044b2:	f7fe fe48 	bl	8003146 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044b6:	e031      	b.n	800451c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a27      	ldr	r2, [pc, #156]	@ (800455c <HAL_ADC_ConfigChannel+0x87c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d12d      	bne.n	800451e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d127      	bne.n	800451e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004544 <HAL_ADC_ConfigChannel+0x864>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d022      	beq.n	800451e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044e0:	d004      	beq.n	80044ec <HAL_ADC_ConfigChannel+0x80c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a17      	ldr	r2, [pc, #92]	@ (8004544 <HAL_ADC_ConfigChannel+0x864>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x810>
 80044ec:	4a16      	ldr	r2, [pc, #88]	@ (8004548 <HAL_ADC_ConfigChannel+0x868>)
 80044ee:	e000      	b.n	80044f2 <HAL_ADC_ConfigChannel+0x812>
 80044f0:	4a10      	ldr	r2, [pc, #64]	@ (8004534 <HAL_ADC_ConfigChannel+0x854>)
 80044f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044fa:	4619      	mov	r1, r3
 80044fc:	4610      	mov	r0, r2
 80044fe:	f7fe fe22 	bl	8003146 <LL_ADC_SetCommonPathInternalCh>
 8004502:	e00c      	b.n	800451e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004508:	f043 0220 	orr.w	r2, r3, #32
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004516:	e002      	b.n	800451e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004518:	bf00      	nop
 800451a:	e000      	b.n	800451e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800451c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004526:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800452a:	4618      	mov	r0, r3
 800452c:	37d8      	adds	r7, #216	@ 0xd8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	50000700 	.word	0x50000700
 8004538:	c3210000 	.word	0xc3210000
 800453c:	90c00010 	.word	0x90c00010
 8004540:	50000600 	.word	0x50000600
 8004544:	50000100 	.word	0x50000100
 8004548:	50000300 	.word	0x50000300
 800454c:	20000004 	.word	0x20000004
 8004550:	053e2d63 	.word	0x053e2d63
 8004554:	c7520000 	.word	0xc7520000
 8004558:	50000500 	.word	0x50000500
 800455c:	cb840000 	.word	0xcb840000

08004560 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004568:	2300      	movs	r3, #0
 800456a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe ffb3 	bl	80034dc <LL_ADC_IsEnabled>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d176      	bne.n	800466a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	4b3c      	ldr	r3, [pc, #240]	@ (8004674 <ADC_Enable+0x114>)
 8004584:	4013      	ands	r3, r2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00d      	beq.n	80045a6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800458e:	f043 0210 	orr.w	r2, r3, #16
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800459a:	f043 0201 	orr.w	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e062      	b.n	800466c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fe ff82 	bl	80034b4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045b8:	d004      	beq.n	80045c4 <ADC_Enable+0x64>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a2e      	ldr	r2, [pc, #184]	@ (8004678 <ADC_Enable+0x118>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d101      	bne.n	80045c8 <ADC_Enable+0x68>
 80045c4:	4b2d      	ldr	r3, [pc, #180]	@ (800467c <ADC_Enable+0x11c>)
 80045c6:	e000      	b.n	80045ca <ADC_Enable+0x6a>
 80045c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004680 <ADC_Enable+0x120>)
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe fdce 	bl	800316c <LL_ADC_GetCommonPathInternalCh>
 80045d0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80045d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d013      	beq.n	8004602 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045da:	4b2a      	ldr	r3, [pc, #168]	@ (8004684 <ADC_Enable+0x124>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	099b      	lsrs	r3, r3, #6
 80045e0:	4a29      	ldr	r2, [pc, #164]	@ (8004688 <ADC_Enable+0x128>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	099b      	lsrs	r3, r3, #6
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	4613      	mov	r3, r2
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80045f4:	e002      	b.n	80045fc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f9      	bne.n	80045f6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004602:	f7fe fd81 	bl	8003108 <HAL_GetTick>
 8004606:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004608:	e028      	b.n	800465c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe ff64 	bl	80034dc <LL_ADC_IsEnabled>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe ff48 	bl	80034b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004624:	f7fe fd70 	bl	8003108 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d914      	bls.n	800465c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	d00d      	beq.n	800465c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004644:	f043 0210 	orr.w	r2, r3, #16
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004650:	f043 0201 	orr.w	r2, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e007      	b.n	800466c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b01      	cmp	r3, #1
 8004668:	d1cf      	bne.n	800460a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	8000003f 	.word	0x8000003f
 8004678:	50000100 	.word	0x50000100
 800467c:	50000300 	.word	0x50000300
 8004680:	50000700 	.word	0x50000700
 8004684:	20000004 	.word	0x20000004
 8004688:	053e2d63 	.word	0x053e2d63

0800468c <LL_ADC_IsEnabled>:
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <LL_ADC_IsEnabled+0x18>
 80046a0:	2301      	movs	r3, #1
 80046a2:	e000      	b.n	80046a6 <LL_ADC_IsEnabled+0x1a>
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d101      	bne.n	80046ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80046d8:	b590      	push	{r4, r7, lr}
 80046da:	b0a1      	sub	sp, #132	@ 0x84
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e0e7      	b.n	80048c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80046fe:	2300      	movs	r3, #0
 8004700:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004702:	2300      	movs	r3, #0
 8004704:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800470e:	d102      	bne.n	8004716 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004710:	4b6f      	ldr	r3, [pc, #444]	@ (80048d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004712:	60bb      	str	r3, [r7, #8]
 8004714:	e009      	b.n	800472a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a6e      	ldr	r2, [pc, #440]	@ (80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d102      	bne.n	8004726 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004720:	4b6d      	ldr	r3, [pc, #436]	@ (80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	e001      	b.n	800472a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004726:	2300      	movs	r3, #0
 8004728:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10b      	bne.n	8004748 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004734:	f043 0220 	orr.w	r2, r3, #32
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0be      	b.n	80048c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff ffb1 	bl	80046b2 <LL_ADC_REG_IsConversionOngoing>
 8004750:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff ffab 	bl	80046b2 <LL_ADC_REG_IsConversionOngoing>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	f040 80a0 	bne.w	80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004764:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 809c 	bne.w	80048a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004774:	d004      	beq.n	8004780 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a55      	ldr	r2, [pc, #340]	@ (80048d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d101      	bne.n	8004784 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004780:	4b56      	ldr	r3, [pc, #344]	@ (80048dc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004782:	e000      	b.n	8004786 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004784:	4b56      	ldr	r3, [pc, #344]	@ (80048e0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004786:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d04b      	beq.n	8004828 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004790:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	6859      	ldr	r1, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80047a2:	035b      	lsls	r3, r3, #13
 80047a4:	430b      	orrs	r3, r1
 80047a6:	431a      	orrs	r2, r3
 80047a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047b4:	d004      	beq.n	80047c0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a45      	ldr	r2, [pc, #276]	@ (80048d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d10f      	bne.n	80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80047c0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80047c4:	f7ff ff62 	bl	800468c <LL_ADC_IsEnabled>
 80047c8:	4604      	mov	r4, r0
 80047ca:	4841      	ldr	r0, [pc, #260]	@ (80048d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047cc:	f7ff ff5e 	bl	800468c <LL_ADC_IsEnabled>
 80047d0:	4603      	mov	r3, r0
 80047d2:	4323      	orrs	r3, r4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	e012      	b.n	8004806 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80047e0:	483c      	ldr	r0, [pc, #240]	@ (80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80047e2:	f7ff ff53 	bl	800468c <LL_ADC_IsEnabled>
 80047e6:	4604      	mov	r4, r0
 80047e8:	483b      	ldr	r0, [pc, #236]	@ (80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80047ea:	f7ff ff4f 	bl	800468c <LL_ADC_IsEnabled>
 80047ee:	4603      	mov	r3, r0
 80047f0:	431c      	orrs	r4, r3
 80047f2:	483c      	ldr	r0, [pc, #240]	@ (80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80047f4:	f7ff ff4a 	bl	800468c <LL_ADC_IsEnabled>
 80047f8:	4603      	mov	r3, r0
 80047fa:	4323      	orrs	r3, r4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d056      	beq.n	80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800480a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004812:	f023 030f 	bic.w	r3, r3, #15
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	6811      	ldr	r1, [r2, #0]
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	6892      	ldr	r2, [r2, #8]
 800481e:	430a      	orrs	r2, r1
 8004820:	431a      	orrs	r2, r3
 8004822:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004824:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004826:	e047      	b.n	80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004828:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004830:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004832:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800483c:	d004      	beq.n	8004848 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a23      	ldr	r2, [pc, #140]	@ (80048d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d10f      	bne.n	8004868 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004848:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800484c:	f7ff ff1e 	bl	800468c <LL_ADC_IsEnabled>
 8004850:	4604      	mov	r4, r0
 8004852:	481f      	ldr	r0, [pc, #124]	@ (80048d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004854:	f7ff ff1a 	bl	800468c <LL_ADC_IsEnabled>
 8004858:	4603      	mov	r3, r0
 800485a:	4323      	orrs	r3, r4
 800485c:	2b00      	cmp	r3, #0
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	e012      	b.n	800488e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004868:	481a      	ldr	r0, [pc, #104]	@ (80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800486a:	f7ff ff0f 	bl	800468c <LL_ADC_IsEnabled>
 800486e:	4604      	mov	r4, r0
 8004870:	4819      	ldr	r0, [pc, #100]	@ (80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004872:	f7ff ff0b 	bl	800468c <LL_ADC_IsEnabled>
 8004876:	4603      	mov	r3, r0
 8004878:	431c      	orrs	r4, r3
 800487a:	481a      	ldr	r0, [pc, #104]	@ (80048e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800487c:	f7ff ff06 	bl	800468c <LL_ADC_IsEnabled>
 8004880:	4603      	mov	r3, r0
 8004882:	4323      	orrs	r3, r4
 8004884:	2b00      	cmp	r3, #0
 8004886:	bf0c      	ite	eq
 8004888:	2301      	moveq	r3, #1
 800488a:	2300      	movne	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d012      	beq.n	80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004892:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800489a:	f023 030f 	bic.w	r3, r3, #15
 800489e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80048a0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048a2:	e009      	b.n	80048b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a8:	f043 0220 	orr.w	r2, r3, #32
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80048b6:	e000      	b.n	80048ba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80048b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80048c2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3784      	adds	r7, #132	@ 0x84
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd90      	pop	{r4, r7, pc}
 80048ce:	bf00      	nop
 80048d0:	50000100 	.word	0x50000100
 80048d4:	50000400 	.word	0x50000400
 80048d8:	50000500 	.word	0x50000500
 80048dc:	50000300 	.word	0x50000300
 80048e0:	50000700 	.word	0x50000700
 80048e4:	50000600 	.word	0x50000600

080048e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048f8:	4b0c      	ldr	r3, [pc, #48]	@ (800492c <__NVIC_SetPriorityGrouping+0x44>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004904:	4013      	ands	r3, r2
 8004906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004910:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800491a:	4a04      	ldr	r2, [pc, #16]	@ (800492c <__NVIC_SetPriorityGrouping+0x44>)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	60d3      	str	r3, [r2, #12]
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	e000ed00 	.word	0xe000ed00

08004930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004934:	4b04      	ldr	r3, [pc, #16]	@ (8004948 <__NVIC_GetPriorityGrouping+0x18>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	0a1b      	lsrs	r3, r3, #8
 800493a:	f003 0307 	and.w	r3, r3, #7
}
 800493e:	4618      	mov	r0, r3
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	e000ed00 	.word	0xe000ed00

0800494c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495a:	2b00      	cmp	r3, #0
 800495c:	db0b      	blt.n	8004976 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	f003 021f 	and.w	r2, r3, #31
 8004964:	4907      	ldr	r1, [pc, #28]	@ (8004984 <__NVIC_EnableIRQ+0x38>)
 8004966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	2001      	movs	r0, #1
 800496e:	fa00 f202 	lsl.w	r2, r0, r2
 8004972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	e000e100 	.word	0xe000e100

08004988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	6039      	str	r1, [r7, #0]
 8004992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004998:	2b00      	cmp	r3, #0
 800499a:	db0a      	blt.n	80049b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	490c      	ldr	r1, [pc, #48]	@ (80049d4 <__NVIC_SetPriority+0x4c>)
 80049a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a6:	0112      	lsls	r2, r2, #4
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	440b      	add	r3, r1
 80049ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049b0:	e00a      	b.n	80049c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	4908      	ldr	r1, [pc, #32]	@ (80049d8 <__NVIC_SetPriority+0x50>)
 80049b8:	79fb      	ldrb	r3, [r7, #7]
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	3b04      	subs	r3, #4
 80049c0:	0112      	lsls	r2, r2, #4
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	440b      	add	r3, r1
 80049c6:	761a      	strb	r2, [r3, #24]
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	e000e100 	.word	0xe000e100
 80049d8:	e000ed00 	.word	0xe000ed00

080049dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049dc:	b480      	push	{r7}
 80049de:	b089      	sub	sp, #36	@ 0x24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f1c3 0307 	rsb	r3, r3, #7
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	bf28      	it	cs
 80049fa:	2304      	movcs	r3, #4
 80049fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	3304      	adds	r3, #4
 8004a02:	2b06      	cmp	r3, #6
 8004a04:	d902      	bls.n	8004a0c <NVIC_EncodePriority+0x30>
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	3b03      	subs	r3, #3
 8004a0a:	e000      	b.n	8004a0e <NVIC_EncodePriority+0x32>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a10:	f04f 32ff 	mov.w	r2, #4294967295
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	43da      	mvns	r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	401a      	ands	r2, r3
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a24:	f04f 31ff 	mov.w	r1, #4294967295
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2e:	43d9      	mvns	r1, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a34:	4313      	orrs	r3, r2
         );
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3724      	adds	r7, #36	@ 0x24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff ff4c 	bl	80048e8 <__NVIC_SetPriorityGrouping>
}
 8004a50:	bf00      	nop
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a66:	f7ff ff63 	bl	8004930 <__NVIC_GetPriorityGrouping>
 8004a6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	6978      	ldr	r0, [r7, #20]
 8004a72:	f7ff ffb3 	bl	80049dc <NVIC_EncodePriority>
 8004a76:	4602      	mov	r2, r0
 8004a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff ff82 	bl	8004988 <__NVIC_SetPriority>
}
 8004a84:	bf00      	nop
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff ff56 	bl	800494c <__NVIC_EnableIRQ>
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004ab6:	e15a      	b.n	8004d6e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	2101      	movs	r1, #1
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 814c 	beq.w	8004d68 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d005      	beq.n	8004ae8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d130      	bne.n	8004b4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	2203      	movs	r2, #3
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	43db      	mvns	r3, r3
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4013      	ands	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b1e:	2201      	movs	r2, #1
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	43db      	mvns	r3, r3
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	091b      	lsrs	r3, r3, #4
 8004b34:	f003 0201 	and.w	r2, r3, #1
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d017      	beq.n	8004b86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	2203      	movs	r2, #3
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	43db      	mvns	r3, r3
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f003 0303 	and.w	r3, r3, #3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d123      	bne.n	8004bda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	08da      	lsrs	r2, r3, #3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3208      	adds	r2, #8
 8004b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	220f      	movs	r2, #15
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	691a      	ldr	r2, [r3, #16]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	08da      	lsrs	r2, r3, #3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3208      	adds	r2, #8
 8004bd4:	6939      	ldr	r1, [r7, #16]
 8004bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	2203      	movs	r2, #3
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	43db      	mvns	r3, r3
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f003 0203 	and.w	r2, r3, #3
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 80a6 	beq.w	8004d68 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c1c:	4b5b      	ldr	r3, [pc, #364]	@ (8004d8c <HAL_GPIO_Init+0x2e4>)
 8004c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c20:	4a5a      	ldr	r2, [pc, #360]	@ (8004d8c <HAL_GPIO_Init+0x2e4>)
 8004c22:	f043 0301 	orr.w	r3, r3, #1
 8004c26:	6613      	str	r3, [r2, #96]	@ 0x60
 8004c28:	4b58      	ldr	r3, [pc, #352]	@ (8004d8c <HAL_GPIO_Init+0x2e4>)
 8004c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	60bb      	str	r3, [r7, #8]
 8004c32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c34:	4a56      	ldr	r2, [pc, #344]	@ (8004d90 <HAL_GPIO_Init+0x2e8>)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	089b      	lsrs	r3, r3, #2
 8004c3a:	3302      	adds	r3, #2
 8004c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f003 0303 	and.w	r3, r3, #3
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	220f      	movs	r2, #15
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4013      	ands	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c5e:	d01f      	beq.n	8004ca0 <HAL_GPIO_Init+0x1f8>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a4c      	ldr	r2, [pc, #304]	@ (8004d94 <HAL_GPIO_Init+0x2ec>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d019      	beq.n	8004c9c <HAL_GPIO_Init+0x1f4>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a4b      	ldr	r2, [pc, #300]	@ (8004d98 <HAL_GPIO_Init+0x2f0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <HAL_GPIO_Init+0x1f0>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a4a      	ldr	r2, [pc, #296]	@ (8004d9c <HAL_GPIO_Init+0x2f4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00d      	beq.n	8004c94 <HAL_GPIO_Init+0x1ec>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a49      	ldr	r2, [pc, #292]	@ (8004da0 <HAL_GPIO_Init+0x2f8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d007      	beq.n	8004c90 <HAL_GPIO_Init+0x1e8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a48      	ldr	r2, [pc, #288]	@ (8004da4 <HAL_GPIO_Init+0x2fc>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d101      	bne.n	8004c8c <HAL_GPIO_Init+0x1e4>
 8004c88:	2305      	movs	r3, #5
 8004c8a:	e00a      	b.n	8004ca2 <HAL_GPIO_Init+0x1fa>
 8004c8c:	2306      	movs	r3, #6
 8004c8e:	e008      	b.n	8004ca2 <HAL_GPIO_Init+0x1fa>
 8004c90:	2304      	movs	r3, #4
 8004c92:	e006      	b.n	8004ca2 <HAL_GPIO_Init+0x1fa>
 8004c94:	2303      	movs	r3, #3
 8004c96:	e004      	b.n	8004ca2 <HAL_GPIO_Init+0x1fa>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e002      	b.n	8004ca2 <HAL_GPIO_Init+0x1fa>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <HAL_GPIO_Init+0x1fa>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	f002 0203 	and.w	r2, r2, #3
 8004ca8:	0092      	lsls	r2, r2, #2
 8004caa:	4093      	lsls	r3, r2
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cb2:	4937      	ldr	r1, [pc, #220]	@ (8004d90 <HAL_GPIO_Init+0x2e8>)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	089b      	lsrs	r3, r3, #2
 8004cb8:	3302      	adds	r3, #2
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004cc0:	4b39      	ldr	r3, [pc, #228]	@ (8004da8 <HAL_GPIO_Init+0x300>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ce4:	4a30      	ldr	r2, [pc, #192]	@ (8004da8 <HAL_GPIO_Init+0x300>)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004cea:	4b2f      	ldr	r3, [pc, #188]	@ (8004da8 <HAL_GPIO_Init+0x300>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d0e:	4a26      	ldr	r2, [pc, #152]	@ (8004da8 <HAL_GPIO_Init+0x300>)
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004d14:	4b24      	ldr	r3, [pc, #144]	@ (8004da8 <HAL_GPIO_Init+0x300>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	4013      	ands	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d38:	4a1b      	ldr	r2, [pc, #108]	@ (8004da8 <HAL_GPIO_Init+0x300>)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004da8 <HAL_GPIO_Init+0x300>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	43db      	mvns	r3, r3
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d62:	4a11      	ldr	r2, [pc, #68]	@ (8004da8 <HAL_GPIO_Init+0x300>)
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	fa22 f303 	lsr.w	r3, r2, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f47f ae9d 	bne.w	8004ab8 <HAL_GPIO_Init+0x10>
  }
}
 8004d7e:	bf00      	nop
 8004d80:	bf00      	nop
 8004d82:	371c      	adds	r7, #28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	40010000 	.word	0x40010000
 8004d94:	48000400 	.word	0x48000400
 8004d98:	48000800 	.word	0x48000800
 8004d9c:	48000c00 	.word	0x48000c00
 8004da0:	48001000 	.word	0x48001000
 8004da4:	48001400 	.word	0x48001400
 8004da8:	40010400 	.word	0x40010400

08004dac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	887b      	ldrh	r3, [r7, #2]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	73fb      	strb	r3, [r7, #15]
 8004dc8:	e001      	b.n	8004dce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	807b      	strh	r3, [r7, #2]
 8004de8:	4613      	mov	r3, r2
 8004dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004dec:	787b      	ldrb	r3, [r7, #1]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004df2:	887a      	ldrh	r2, [r7, #2]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004df8:	e002      	b.n	8004e00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004dfa:	887a      	ldrh	r2, [r7, #2]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e08d      	b.n	8004f3a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d106      	bne.n	8004e38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fc ffac 	bl	8001d90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2224      	movs	r2, #36	@ 0x24
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0201 	bic.w	r2, r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d107      	bne.n	8004e86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e82:	609a      	str	r2, [r3, #8]
 8004e84:	e006      	b.n	8004e94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004e92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d108      	bne.n	8004eae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eaa:	605a      	str	r2, [r3, #4]
 8004eac:	e007      	b.n	8004ebe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ebc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6812      	ldr	r2, [r2, #0]
 8004ec8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ecc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ed0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ee0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691a      	ldr	r2, [r3, #16]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69d9      	ldr	r1, [r3, #28]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1a      	ldr	r2, [r3, #32]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d138      	bne.n	8004fca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e032      	b.n	8004fcc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2224      	movs	r2, #36	@ 0x24
 8004f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0201 	bic.w	r2, r2, #1
 8004f84:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f94:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6819      	ldr	r1, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0201 	orr.w	r2, r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e000      	b.n	8004fcc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fca:	2302      	movs	r3, #2
  }
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	d139      	bne.n	8005062 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e033      	b.n	8005064 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2224      	movs	r2, #36	@ 0x24
 8005008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0201 	bic.w	r2, r2, #1
 800501a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800502a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0201 	orr.w	r2, r2, #1
 800504c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	e000      	b.n	8005064 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005062:	2302      	movs	r3, #2
  }
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d141      	bne.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800507e:	4b4b      	ldr	r3, [pc, #300]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800508a:	d131      	bne.n	80050f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800508c:	4b47      	ldr	r3, [pc, #284]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005092:	4a46      	ldr	r2, [pc, #280]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005098:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800509c:	4b43      	ldr	r3, [pc, #268]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050a4:	4a41      	ldr	r2, [pc, #260]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050ac:	4b40      	ldr	r3, [pc, #256]	@ (80051b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2232      	movs	r2, #50	@ 0x32
 80050b2:	fb02 f303 	mul.w	r3, r2, r3
 80050b6:	4a3f      	ldr	r2, [pc, #252]	@ (80051b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050b8:	fba2 2303 	umull	r2, r3, r2, r3
 80050bc:	0c9b      	lsrs	r3, r3, #18
 80050be:	3301      	adds	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050c2:	e002      	b.n	80050ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050ca:	4b38      	ldr	r3, [pc, #224]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d6:	d102      	bne.n	80050de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f2      	bne.n	80050c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050de:	4b33      	ldr	r3, [pc, #204]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ea:	d158      	bne.n	800519e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e057      	b.n	80051a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050f0:	4b2e      	ldr	r3, [pc, #184]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050f6:	4a2d      	ldr	r2, [pc, #180]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005100:	e04d      	b.n	800519e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005108:	d141      	bne.n	800518e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800510a:	4b28      	ldr	r3, [pc, #160]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005116:	d131      	bne.n	800517c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005118:	4b24      	ldr	r3, [pc, #144]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800511e:	4a23      	ldr	r2, [pc, #140]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005124:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005128:	4b20      	ldr	r3, [pc, #128]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005130:	4a1e      	ldr	r2, [pc, #120]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005132:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005136:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005138:	4b1d      	ldr	r3, [pc, #116]	@ (80051b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2232      	movs	r2, #50	@ 0x32
 800513e:	fb02 f303 	mul.w	r3, r2, r3
 8005142:	4a1c      	ldr	r2, [pc, #112]	@ (80051b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005144:	fba2 2303 	umull	r2, r3, r2, r3
 8005148:	0c9b      	lsrs	r3, r3, #18
 800514a:	3301      	adds	r3, #1
 800514c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800514e:	e002      	b.n	8005156 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	3b01      	subs	r3, #1
 8005154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005156:	4b15      	ldr	r3, [pc, #84]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800515e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005162:	d102      	bne.n	800516a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f2      	bne.n	8005150 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800516a:	4b10      	ldr	r3, [pc, #64]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005176:	d112      	bne.n	800519e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e011      	b.n	80051a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800517c:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800517e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005182:	4a0a      	ldr	r2, [pc, #40]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005188:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800518c:	e007      	b.n	800519e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800518e:	4b07      	ldr	r3, [pc, #28]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005196:	4a05      	ldr	r2, [pc, #20]	@ (80051ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005198:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800519c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	40007000 	.word	0x40007000
 80051b0:	20000004 	.word	0x20000004
 80051b4:	431bde83 	.word	0x431bde83

080051b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80051bc:	4b05      	ldr	r3, [pc, #20]	@ (80051d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	4a04      	ldr	r2, [pc, #16]	@ (80051d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80051c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051c6:	6093      	str	r3, [r2, #8]
}
 80051c8:	bf00      	nop
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40007000 	.word	0x40007000

080051d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e2fe      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d075      	beq.n	80052e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051f6:	4b97      	ldr	r3, [pc, #604]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 030c 	and.w	r3, r3, #12
 80051fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005200:	4b94      	ldr	r3, [pc, #592]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2b0c      	cmp	r3, #12
 800520e:	d102      	bne.n	8005216 <HAL_RCC_OscConfig+0x3e>
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2b03      	cmp	r3, #3
 8005214:	d002      	beq.n	800521c <HAL_RCC_OscConfig+0x44>
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b08      	cmp	r3, #8
 800521a:	d10b      	bne.n	8005234 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800521c:	4b8d      	ldr	r3, [pc, #564]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d05b      	beq.n	80052e0 <HAL_RCC_OscConfig+0x108>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d157      	bne.n	80052e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e2d9      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800523c:	d106      	bne.n	800524c <HAL_RCC_OscConfig+0x74>
 800523e:	4b85      	ldr	r3, [pc, #532]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a84      	ldr	r2, [pc, #528]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	e01d      	b.n	8005288 <HAL_RCC_OscConfig+0xb0>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005254:	d10c      	bne.n	8005270 <HAL_RCC_OscConfig+0x98>
 8005256:	4b7f      	ldr	r3, [pc, #508]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a7e      	ldr	r2, [pc, #504]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 800525c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	4b7c      	ldr	r3, [pc, #496]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a7b      	ldr	r2, [pc, #492]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	e00b      	b.n	8005288 <HAL_RCC_OscConfig+0xb0>
 8005270:	4b78      	ldr	r3, [pc, #480]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a77      	ldr	r2, [pc, #476]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800527a:	6013      	str	r3, [r2, #0]
 800527c:	4b75      	ldr	r3, [pc, #468]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a74      	ldr	r2, [pc, #464]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d013      	beq.n	80052b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005290:	f7fd ff3a 	bl	8003108 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005298:	f7fd ff36 	bl	8003108 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b64      	cmp	r3, #100	@ 0x64
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e29e      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052aa:	4b6a      	ldr	r3, [pc, #424]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCC_OscConfig+0xc0>
 80052b6:	e014      	b.n	80052e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b8:	f7fd ff26 	bl	8003108 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052c0:	f7fd ff22 	bl	8003108 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b64      	cmp	r3, #100	@ 0x64
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e28a      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052d2:	4b60      	ldr	r3, [pc, #384]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0xe8>
 80052de:	e000      	b.n	80052e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d075      	beq.n	80053da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ee:	4b59      	ldr	r3, [pc, #356]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f003 030c 	and.w	r3, r3, #12
 80052f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052f8:	4b56      	ldr	r3, [pc, #344]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b0c      	cmp	r3, #12
 8005306:	d102      	bne.n	800530e <HAL_RCC_OscConfig+0x136>
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d002      	beq.n	8005314 <HAL_RCC_OscConfig+0x13c>
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d11f      	bne.n	8005354 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005314:	4b4f      	ldr	r3, [pc, #316]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <HAL_RCC_OscConfig+0x154>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e25d      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800532c:	4b49      	ldr	r3, [pc, #292]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	061b      	lsls	r3, r3, #24
 800533a:	4946      	ldr	r1, [pc, #280]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 800533c:	4313      	orrs	r3, r2
 800533e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005340:	4b45      	ldr	r3, [pc, #276]	@ (8005458 <HAL_RCC_OscConfig+0x280>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f7fd f979 	bl	800263c <HAL_InitTick>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d043      	beq.n	80053d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e249      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d023      	beq.n	80053a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800535c:	4b3d      	ldr	r3, [pc, #244]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a3c      	ldr	r2, [pc, #240]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005368:	f7fd fece 	bl	8003108 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005370:	f7fd feca 	bl	8003108 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e232      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005382:	4b34      	ldr	r3, [pc, #208]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800538e:	4b31      	ldr	r3, [pc, #196]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	061b      	lsls	r3, r3, #24
 800539c:	492d      	ldr	r1, [pc, #180]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	604b      	str	r3, [r1, #4]
 80053a2:	e01a      	b.n	80053da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a2a      	ldr	r2, [pc, #168]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 80053aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b0:	f7fd feaa 	bl	8003108 <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053b8:	f7fd fea6 	bl	8003108 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e20e      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053ca:	4b22      	ldr	r3, [pc, #136]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1f0      	bne.n	80053b8 <HAL_RCC_OscConfig+0x1e0>
 80053d6:	e000      	b.n	80053da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d041      	beq.n	800546a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d01c      	beq.n	8005428 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ee:	4b19      	ldr	r3, [pc, #100]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 80053f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053f4:	4a17      	ldr	r2, [pc, #92]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 80053f6:	f043 0301 	orr.w	r3, r3, #1
 80053fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fe:	f7fd fe83 	bl	8003108 <HAL_GetTick>
 8005402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005404:	e008      	b.n	8005418 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005406:	f7fd fe7f 	bl	8003108 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e1e7      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005418:	4b0e      	ldr	r3, [pc, #56]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 800541a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d0ef      	beq.n	8005406 <HAL_RCC_OscConfig+0x22e>
 8005426:	e020      	b.n	800546a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005428:	4b0a      	ldr	r3, [pc, #40]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 800542a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800542e:	4a09      	ldr	r2, [pc, #36]	@ (8005454 <HAL_RCC_OscConfig+0x27c>)
 8005430:	f023 0301 	bic.w	r3, r3, #1
 8005434:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005438:	f7fd fe66 	bl	8003108 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800543e:	e00d      	b.n	800545c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005440:	f7fd fe62 	bl	8003108 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d906      	bls.n	800545c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e1ca      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
 8005452:	bf00      	nop
 8005454:	40021000 	.word	0x40021000
 8005458:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800545c:	4b8c      	ldr	r3, [pc, #560]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 800545e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1ea      	bne.n	8005440 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 80a6 	beq.w	80055c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005478:	2300      	movs	r3, #0
 800547a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800547c:	4b84      	ldr	r3, [pc, #528]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 800547e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <HAL_RCC_OscConfig+0x2b4>
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <HAL_RCC_OscConfig+0x2b6>
 800548c:	2300      	movs	r3, #0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00d      	beq.n	80054ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005492:	4b7f      	ldr	r3, [pc, #508]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005496:	4a7e      	ldr	r2, [pc, #504]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800549c:	6593      	str	r3, [r2, #88]	@ 0x58
 800549e:	4b7c      	ldr	r3, [pc, #496]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 80054a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80054aa:	2301      	movs	r3, #1
 80054ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ae:	4b79      	ldr	r3, [pc, #484]	@ (8005694 <HAL_RCC_OscConfig+0x4bc>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d118      	bne.n	80054ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054ba:	4b76      	ldr	r3, [pc, #472]	@ (8005694 <HAL_RCC_OscConfig+0x4bc>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a75      	ldr	r2, [pc, #468]	@ (8005694 <HAL_RCC_OscConfig+0x4bc>)
 80054c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c6:	f7fd fe1f 	bl	8003108 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ce:	f7fd fe1b 	bl	8003108 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e183      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054e0:	4b6c      	ldr	r3, [pc, #432]	@ (8005694 <HAL_RCC_OscConfig+0x4bc>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d108      	bne.n	8005506 <HAL_RCC_OscConfig+0x32e>
 80054f4:	4b66      	ldr	r3, [pc, #408]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 80054f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054fa:	4a65      	ldr	r2, [pc, #404]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005504:	e024      	b.n	8005550 <HAL_RCC_OscConfig+0x378>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	2b05      	cmp	r3, #5
 800550c:	d110      	bne.n	8005530 <HAL_RCC_OscConfig+0x358>
 800550e:	4b60      	ldr	r3, [pc, #384]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005514:	4a5e      	ldr	r2, [pc, #376]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005516:	f043 0304 	orr.w	r3, r3, #4
 800551a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800551e:	4b5c      	ldr	r3, [pc, #368]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005524:	4a5a      	ldr	r2, [pc, #360]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005526:	f043 0301 	orr.w	r3, r3, #1
 800552a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800552e:	e00f      	b.n	8005550 <HAL_RCC_OscConfig+0x378>
 8005530:	4b57      	ldr	r3, [pc, #348]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005536:	4a56      	ldr	r2, [pc, #344]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005538:	f023 0301 	bic.w	r3, r3, #1
 800553c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005540:	4b53      	ldr	r3, [pc, #332]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005546:	4a52      	ldr	r2, [pc, #328]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005548:	f023 0304 	bic.w	r3, r3, #4
 800554c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d016      	beq.n	8005586 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005558:	f7fd fdd6 	bl	8003108 <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800555e:	e00a      	b.n	8005576 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005560:	f7fd fdd2 	bl	8003108 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e138      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005576:	4b46      	ldr	r3, [pc, #280]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0ed      	beq.n	8005560 <HAL_RCC_OscConfig+0x388>
 8005584:	e015      	b.n	80055b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005586:	f7fd fdbf 	bl	8003108 <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800558c:	e00a      	b.n	80055a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558e:	f7fd fdbb 	bl	8003108 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800559c:	4293      	cmp	r3, r2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e121      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055a4:	4b3a      	ldr	r3, [pc, #232]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1ed      	bne.n	800558e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055b2:	7ffb      	ldrb	r3, [r7, #31]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d105      	bne.n	80055c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b8:	4b35      	ldr	r3, [pc, #212]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 80055ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055bc:	4a34      	ldr	r2, [pc, #208]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 80055be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d03c      	beq.n	800564a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01c      	beq.n	8005612 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055d8:	4b2d      	ldr	r3, [pc, #180]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 80055da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055de:	4a2c      	ldr	r2, [pc, #176]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 80055e0:	f043 0301 	orr.w	r3, r3, #1
 80055e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e8:	f7fd fd8e 	bl	8003108 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055f0:	f7fd fd8a 	bl	8003108 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e0f2      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005602:	4b23      	ldr	r3, [pc, #140]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005604:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0ef      	beq.n	80055f0 <HAL_RCC_OscConfig+0x418>
 8005610:	e01b      	b.n	800564a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005612:	4b1f      	ldr	r3, [pc, #124]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005614:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005618:	4a1d      	ldr	r2, [pc, #116]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 800561a:	f023 0301 	bic.w	r3, r3, #1
 800561e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005622:	f7fd fd71 	bl	8003108 <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005628:	e008      	b.n	800563c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800562a:	f7fd fd6d 	bl	8003108 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e0d5      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800563c:	4b14      	ldr	r3, [pc, #80]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 800563e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1ef      	bne.n	800562a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 80c9 	beq.w	80057e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005654:	4b0e      	ldr	r3, [pc, #56]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 030c 	and.w	r3, r3, #12
 800565c:	2b0c      	cmp	r3, #12
 800565e:	f000 8083 	beq.w	8005768 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d15e      	bne.n	8005728 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800566a:	4b09      	ldr	r3, [pc, #36]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a08      	ldr	r2, [pc, #32]	@ (8005690 <HAL_RCC_OscConfig+0x4b8>)
 8005670:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005676:	f7fd fd47 	bl	8003108 <HAL_GetTick>
 800567a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800567c:	e00c      	b.n	8005698 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800567e:	f7fd fd43 	bl	8003108 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d905      	bls.n	8005698 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e0ab      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
 8005690:	40021000 	.word	0x40021000
 8005694:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005698:	4b55      	ldr	r3, [pc, #340]	@ (80057f0 <HAL_RCC_OscConfig+0x618>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1ec      	bne.n	800567e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056a4:	4b52      	ldr	r3, [pc, #328]	@ (80057f0 <HAL_RCC_OscConfig+0x618>)
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	4b52      	ldr	r3, [pc, #328]	@ (80057f4 <HAL_RCC_OscConfig+0x61c>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6a11      	ldr	r1, [r2, #32]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056b4:	3a01      	subs	r2, #1
 80056b6:	0112      	lsls	r2, r2, #4
 80056b8:	4311      	orrs	r1, r2
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80056be:	0212      	lsls	r2, r2, #8
 80056c0:	4311      	orrs	r1, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80056c6:	0852      	lsrs	r2, r2, #1
 80056c8:	3a01      	subs	r2, #1
 80056ca:	0552      	lsls	r2, r2, #21
 80056cc:	4311      	orrs	r1, r2
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80056d2:	0852      	lsrs	r2, r2, #1
 80056d4:	3a01      	subs	r2, #1
 80056d6:	0652      	lsls	r2, r2, #25
 80056d8:	4311      	orrs	r1, r2
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80056de:	06d2      	lsls	r2, r2, #27
 80056e0:	430a      	orrs	r2, r1
 80056e2:	4943      	ldr	r1, [pc, #268]	@ (80057f0 <HAL_RCC_OscConfig+0x618>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056e8:	4b41      	ldr	r3, [pc, #260]	@ (80057f0 <HAL_RCC_OscConfig+0x618>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a40      	ldr	r2, [pc, #256]	@ (80057f0 <HAL_RCC_OscConfig+0x618>)
 80056ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056f4:	4b3e      	ldr	r3, [pc, #248]	@ (80057f0 <HAL_RCC_OscConfig+0x618>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	4a3d      	ldr	r2, [pc, #244]	@ (80057f0 <HAL_RCC_OscConfig+0x618>)
 80056fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80056fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005700:	f7fd fd02 	bl	8003108 <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005708:	f7fd fcfe 	bl	8003108 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e066      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800571a:	4b35      	ldr	r3, [pc, #212]	@ (80057f0 <HAL_RCC_OscConfig+0x618>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0f0      	beq.n	8005708 <HAL_RCC_OscConfig+0x530>
 8005726:	e05e      	b.n	80057e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005728:	4b31      	ldr	r3, [pc, #196]	@ (80057f0 <HAL_RCC_OscConfig+0x618>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a30      	ldr	r2, [pc, #192]	@ (80057f0 <HAL_RCC_OscConfig+0x618>)
 800572e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005734:	f7fd fce8 	bl	8003108 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800573c:	f7fd fce4 	bl	8003108 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e04c      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800574e:	4b28      	ldr	r3, [pc, #160]	@ (80057f0 <HAL_RCC_OscConfig+0x618>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1f0      	bne.n	800573c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800575a:	4b25      	ldr	r3, [pc, #148]	@ (80057f0 <HAL_RCC_OscConfig+0x618>)
 800575c:	68da      	ldr	r2, [r3, #12]
 800575e:	4924      	ldr	r1, [pc, #144]	@ (80057f0 <HAL_RCC_OscConfig+0x618>)
 8005760:	4b25      	ldr	r3, [pc, #148]	@ (80057f8 <HAL_RCC_OscConfig+0x620>)
 8005762:	4013      	ands	r3, r2
 8005764:	60cb      	str	r3, [r1, #12]
 8005766:	e03e      	b.n	80057e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e039      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005774:	4b1e      	ldr	r3, [pc, #120]	@ (80057f0 <HAL_RCC_OscConfig+0x618>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f003 0203 	and.w	r2, r3, #3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	429a      	cmp	r2, r3
 8005786:	d12c      	bne.n	80057e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005792:	3b01      	subs	r3, #1
 8005794:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005796:	429a      	cmp	r2, r3
 8005798:	d123      	bne.n	80057e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d11b      	bne.n	80057e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d113      	bne.n	80057e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c4:	085b      	lsrs	r3, r3, #1
 80057c6:	3b01      	subs	r3, #1
 80057c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d109      	bne.n	80057e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057d8:	085b      	lsrs	r3, r3, #1
 80057da:	3b01      	subs	r3, #1
 80057dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057de:	429a      	cmp	r2, r3
 80057e0:	d001      	beq.n	80057e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40021000 	.word	0x40021000
 80057f4:	019f800c 	.word	0x019f800c
 80057f8:	feeefffc 	.word	0xfeeefffc

080057fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e11e      	b.n	8005a52 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005814:	4b91      	ldr	r3, [pc, #580]	@ (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 030f 	and.w	r3, r3, #15
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d910      	bls.n	8005844 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005822:	4b8e      	ldr	r3, [pc, #568]	@ (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f023 020f 	bic.w	r2, r3, #15
 800582a:	498c      	ldr	r1, [pc, #560]	@ (8005a5c <HAL_RCC_ClockConfig+0x260>)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	4313      	orrs	r3, r2
 8005830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005832:	4b8a      	ldr	r3, [pc, #552]	@ (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d001      	beq.n	8005844 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e106      	b.n	8005a52 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d073      	beq.n	8005938 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	2b03      	cmp	r3, #3
 8005856:	d129      	bne.n	80058ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005858:	4b81      	ldr	r3, [pc, #516]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e0f4      	b.n	8005a52 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005868:	f000 f9d0 	bl	8005c0c <RCC_GetSysClockFreqFromPLLSource>
 800586c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	4a7c      	ldr	r2, [pc, #496]	@ (8005a64 <HAL_RCC_ClockConfig+0x268>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d93f      	bls.n	80058f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005876:	4b7a      	ldr	r3, [pc, #488]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800588a:	2b00      	cmp	r3, #0
 800588c:	d033      	beq.n	80058f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005892:	2b00      	cmp	r3, #0
 8005894:	d12f      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005896:	4b72      	ldr	r3, [pc, #456]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800589e:	4a70      	ldr	r2, [pc, #448]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 80058a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80058a6:	2380      	movs	r3, #128	@ 0x80
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	e024      	b.n	80058f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d107      	bne.n	80058c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058b4:	4b6a      	ldr	r3, [pc, #424]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d109      	bne.n	80058d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0c6      	b.n	8005a52 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058c4:	4b66      	ldr	r3, [pc, #408]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0be      	b.n	8005a52 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80058d4:	f000 f8ce 	bl	8005a74 <HAL_RCC_GetSysClockFreq>
 80058d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	4a61      	ldr	r2, [pc, #388]	@ (8005a64 <HAL_RCC_ClockConfig+0x268>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d909      	bls.n	80058f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058e2:	4b5f      	ldr	r3, [pc, #380]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058ea:	4a5d      	ldr	r2, [pc, #372]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 80058ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80058f2:	2380      	movs	r3, #128	@ 0x80
 80058f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058f6:	4b5a      	ldr	r3, [pc, #360]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f023 0203 	bic.w	r2, r3, #3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	4957      	ldr	r1, [pc, #348]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 8005904:	4313      	orrs	r3, r2
 8005906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005908:	f7fd fbfe 	bl	8003108 <HAL_GetTick>
 800590c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800590e:	e00a      	b.n	8005926 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005910:	f7fd fbfa 	bl	8003108 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800591e:	4293      	cmp	r3, r2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e095      	b.n	8005a52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005926:	4b4e      	ldr	r3, [pc, #312]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 020c 	and.w	r2, r3, #12
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	429a      	cmp	r2, r3
 8005936:	d1eb      	bne.n	8005910 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d023      	beq.n	800598c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b00      	cmp	r3, #0
 800594e:	d005      	beq.n	800595c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005950:	4b43      	ldr	r3, [pc, #268]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	4a42      	ldr	r2, [pc, #264]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 8005956:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800595a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0308 	and.w	r3, r3, #8
 8005964:	2b00      	cmp	r3, #0
 8005966:	d007      	beq.n	8005978 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005968:	4b3d      	ldr	r3, [pc, #244]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005970:	4a3b      	ldr	r2, [pc, #236]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 8005972:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005976:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005978:	4b39      	ldr	r3, [pc, #228]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	4936      	ldr	r1, [pc, #216]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 8005986:	4313      	orrs	r3, r2
 8005988:	608b      	str	r3, [r1, #8]
 800598a:	e008      	b.n	800599e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2b80      	cmp	r3, #128	@ 0x80
 8005990:	d105      	bne.n	800599e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005992:	4b33      	ldr	r3, [pc, #204]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	4a32      	ldr	r2, [pc, #200]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 8005998:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800599c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800599e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a5c <HAL_RCC_ClockConfig+0x260>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d21d      	bcs.n	80059e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ac:	4b2b      	ldr	r3, [pc, #172]	@ (8005a5c <HAL_RCC_ClockConfig+0x260>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f023 020f 	bic.w	r2, r3, #15
 80059b4:	4929      	ldr	r1, [pc, #164]	@ (8005a5c <HAL_RCC_ClockConfig+0x260>)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80059bc:	f7fd fba4 	bl	8003108 <HAL_GetTick>
 80059c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059c2:	e00a      	b.n	80059da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c4:	f7fd fba0 	bl	8003108 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e03b      	b.n	8005a52 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059da:	4b20      	ldr	r3, [pc, #128]	@ (8005a5c <HAL_RCC_ClockConfig+0x260>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 030f 	and.w	r3, r3, #15
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d1ed      	bne.n	80059c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d008      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	4917      	ldr	r1, [pc, #92]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d009      	beq.n	8005a26 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a12:	4b13      	ldr	r3, [pc, #76]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	490f      	ldr	r1, [pc, #60]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a26:	f000 f825 	bl	8005a74 <HAL_RCC_GetSysClockFreq>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a60 <HAL_RCC_ClockConfig+0x264>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	091b      	lsrs	r3, r3, #4
 8005a32:	f003 030f 	and.w	r3, r3, #15
 8005a36:	490c      	ldr	r1, [pc, #48]	@ (8005a68 <HAL_RCC_ClockConfig+0x26c>)
 8005a38:	5ccb      	ldrb	r3, [r1, r3]
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a42:	4a0a      	ldr	r2, [pc, #40]	@ (8005a6c <HAL_RCC_ClockConfig+0x270>)
 8005a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005a46:	4b0a      	ldr	r3, [pc, #40]	@ (8005a70 <HAL_RCC_ClockConfig+0x274>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fc fdf6 	bl	800263c <HAL_InitTick>
 8005a50:	4603      	mov	r3, r0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40022000 	.word	0x40022000
 8005a60:	40021000 	.word	0x40021000
 8005a64:	04c4b400 	.word	0x04c4b400
 8005a68:	0800b624 	.word	0x0800b624
 8005a6c:	20000004 	.word	0x20000004
 8005a70:	20000008 	.word	0x20000008

08005a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 030c 	and.w	r3, r3, #12
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d102      	bne.n	8005a8c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a86:	4b2a      	ldr	r3, [pc, #168]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a88:	613b      	str	r3, [r7, #16]
 8005a8a:	e047      	b.n	8005b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a8c:	4b27      	ldr	r3, [pc, #156]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f003 030c 	and.w	r3, r3, #12
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d102      	bne.n	8005a9e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a98:	4b26      	ldr	r3, [pc, #152]	@ (8005b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a9a:	613b      	str	r3, [r7, #16]
 8005a9c:	e03e      	b.n	8005b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a9e:	4b23      	ldr	r3, [pc, #140]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 030c 	and.w	r3, r3, #12
 8005aa6:	2b0c      	cmp	r3, #12
 8005aa8:	d136      	bne.n	8005b18 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005aaa:	4b20      	ldr	r3, [pc, #128]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	091b      	lsrs	r3, r3, #4
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	3301      	adds	r3, #1
 8005ac0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d10c      	bne.n	8005ae2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8005b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad0:	4a16      	ldr	r2, [pc, #88]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ad2:	68d2      	ldr	r2, [r2, #12]
 8005ad4:	0a12      	lsrs	r2, r2, #8
 8005ad6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ada:	fb02 f303 	mul.w	r3, r2, r3
 8005ade:	617b      	str	r3, [r7, #20]
      break;
 8005ae0:	e00c      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ae2:	4a13      	ldr	r2, [pc, #76]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aea:	4a10      	ldr	r2, [pc, #64]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aec:	68d2      	ldr	r2, [r2, #12]
 8005aee:	0a12      	lsrs	r2, r2, #8
 8005af0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005af4:	fb02 f303 	mul.w	r3, r2, r3
 8005af8:	617b      	str	r3, [r7, #20]
      break;
 8005afa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005afc:	4b0b      	ldr	r3, [pc, #44]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	0e5b      	lsrs	r3, r3, #25
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	3301      	adds	r3, #1
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b14:	613b      	str	r3, [r7, #16]
 8005b16:	e001      	b.n	8005b1c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005b1c:	693b      	ldr	r3, [r7, #16]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	371c      	adds	r7, #28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	00f42400 	.word	0x00f42400
 8005b34:	016e3600 	.word	0x016e3600

08005b38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b3c:	4b03      	ldr	r3, [pc, #12]	@ (8005b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	20000004 	.word	0x20000004

08005b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b54:	f7ff fff0 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	4b06      	ldr	r3, [pc, #24]	@ (8005b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	0a1b      	lsrs	r3, r3, #8
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	4904      	ldr	r1, [pc, #16]	@ (8005b78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b66:	5ccb      	ldrb	r3, [r1, r3]
 8005b68:	f003 031f 	and.w	r3, r3, #31
 8005b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40021000 	.word	0x40021000
 8005b78:	0800b634 	.word	0x0800b634

08005b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b80:	f7ff ffda 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 8005b84:	4602      	mov	r2, r0
 8005b86:	4b06      	ldr	r3, [pc, #24]	@ (8005ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	0adb      	lsrs	r3, r3, #11
 8005b8c:	f003 0307 	and.w	r3, r3, #7
 8005b90:	4904      	ldr	r1, [pc, #16]	@ (8005ba4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b92:	5ccb      	ldrb	r3, [r1, r3]
 8005b94:	f003 031f 	and.w	r3, r3, #31
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	0800b634 	.word	0x0800b634

08005ba8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	220f      	movs	r2, #15
 8005bb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005bb8:	4b12      	ldr	r3, [pc, #72]	@ (8005c04 <HAL_RCC_GetClockConfig+0x5c>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f003 0203 	and.w	r2, r3, #3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005c04 <HAL_RCC_GetClockConfig+0x5c>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005c04 <HAL_RCC_GetClockConfig+0x5c>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005bdc:	4b09      	ldr	r3, [pc, #36]	@ (8005c04 <HAL_RCC_GetClockConfig+0x5c>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	08db      	lsrs	r3, r3, #3
 8005be2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005bea:	4b07      	ldr	r3, [pc, #28]	@ (8005c08 <HAL_RCC_GetClockConfig+0x60>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 020f 	and.w	r2, r3, #15
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	601a      	str	r2, [r3, #0]
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40021000 	.word	0x40021000
 8005c08:	40022000 	.word	0x40022000

08005c0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c12:	4b1e      	ldr	r3, [pc, #120]	@ (8005c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	091b      	lsrs	r3, r3, #4
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	3301      	adds	r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d10c      	bne.n	8005c4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c30:	4a17      	ldr	r2, [pc, #92]	@ (8005c90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c38:	4a14      	ldr	r2, [pc, #80]	@ (8005c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c3a:	68d2      	ldr	r2, [r2, #12]
 8005c3c:	0a12      	lsrs	r2, r2, #8
 8005c3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c42:	fb02 f303 	mul.w	r3, r2, r3
 8005c46:	617b      	str	r3, [r7, #20]
    break;
 8005c48:	e00c      	b.n	8005c64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c4a:	4a12      	ldr	r2, [pc, #72]	@ (8005c94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c52:	4a0e      	ldr	r2, [pc, #56]	@ (8005c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c54:	68d2      	ldr	r2, [r2, #12]
 8005c56:	0a12      	lsrs	r2, r2, #8
 8005c58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c5c:	fb02 f303 	mul.w	r3, r2, r3
 8005c60:	617b      	str	r3, [r7, #20]
    break;
 8005c62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c64:	4b09      	ldr	r3, [pc, #36]	@ (8005c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	0e5b      	lsrs	r3, r3, #25
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	3301      	adds	r3, #1
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005c7e:	687b      	ldr	r3, [r7, #4]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	016e3600 	.word	0x016e3600
 8005c94:	00f42400 	.word	0x00f42400

08005c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 8098 	beq.w	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cba:	4b43      	ldr	r3, [pc, #268]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10d      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cc6:	4b40      	ldr	r3, [pc, #256]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cca:	4a3f      	ldr	r2, [pc, #252]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cd2:	4b3d      	ldr	r3, [pc, #244]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cda:	60bb      	str	r3, [r7, #8]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ce2:	4b3a      	ldr	r3, [pc, #232]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a39      	ldr	r2, [pc, #228]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cee:	f7fd fa0b 	bl	8003108 <HAL_GetTick>
 8005cf2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cf4:	e009      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cf6:	f7fd fa07 	bl	8003108 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d902      	bls.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	74fb      	strb	r3, [r7, #19]
        break;
 8005d08:	e005      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d0a:	4b30      	ldr	r3, [pc, #192]	@ (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0ef      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005d16:	7cfb      	ldrb	r3, [r7, #19]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d159      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d01e      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d019      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d38:	4b23      	ldr	r3, [pc, #140]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d44:	4b20      	ldr	r3, [pc, #128]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d54:	4b1c      	ldr	r3, [pc, #112]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d64:	4a18      	ldr	r2, [pc, #96]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d016      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d76:	f7fd f9c7 	bl	8003108 <HAL_GetTick>
 8005d7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d7c:	e00b      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d7e:	f7fd f9c3 	bl	8003108 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d902      	bls.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	74fb      	strb	r3, [r7, #19]
            break;
 8005d94:	e006      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d96:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0ec      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005da4:	7cfb      	ldrb	r3, [r7, #19]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10b      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005daa:	4b07      	ldr	r3, [pc, #28]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005db0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db8:	4903      	ldr	r1, [pc, #12]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dc2:	7cfb      	ldrb	r3, [r7, #19]
 8005dc4:	74bb      	strb	r3, [r7, #18]
 8005dc6:	e005      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd0:	7cfb      	ldrb	r3, [r7, #19]
 8005dd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dd4:	7c7b      	ldrb	r3, [r7, #17]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d105      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dda:	4ba7      	ldr	r3, [pc, #668]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dde:	4aa6      	ldr	r2, [pc, #664]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005de4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005df2:	4ba1      	ldr	r3, [pc, #644]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df8:	f023 0203 	bic.w	r2, r3, #3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	499d      	ldr	r1, [pc, #628]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e14:	4b98      	ldr	r3, [pc, #608]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e1a:	f023 020c 	bic.w	r2, r3, #12
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	4995      	ldr	r1, [pc, #596]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0304 	and.w	r3, r3, #4
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e36:	4b90      	ldr	r3, [pc, #576]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	498c      	ldr	r1, [pc, #560]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e58:	4b87      	ldr	r3, [pc, #540]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	4984      	ldr	r1, [pc, #528]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0310 	and.w	r3, r3, #16
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e7a:	4b7f      	ldr	r3, [pc, #508]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	497b      	ldr	r1, [pc, #492]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00a      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e9c:	4b76      	ldr	r3, [pc, #472]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	4973      	ldr	r1, [pc, #460]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00a      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ebe:	4b6e      	ldr	r3, [pc, #440]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	496a      	ldr	r1, [pc, #424]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00a      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ee0:	4b65      	ldr	r3, [pc, #404]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	4962      	ldr	r1, [pc, #392]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f02:	4b5d      	ldr	r3, [pc, #372]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f10:	4959      	ldr	r1, [pc, #356]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f24:	4b54      	ldr	r3, [pc, #336]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f2a:	f023 0203 	bic.w	r2, r3, #3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f32:	4951      	ldr	r1, [pc, #324]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f46:	4b4c      	ldr	r3, [pc, #304]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f54:	4948      	ldr	r1, [pc, #288]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d015      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f68:	4b43      	ldr	r3, [pc, #268]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f76:	4940      	ldr	r1, [pc, #256]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f86:	d105      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f88:	4b3b      	ldr	r3, [pc, #236]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	4a3a      	ldr	r2, [pc, #232]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f92:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d015      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005fa0:	4b35      	ldr	r3, [pc, #212]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fae:	4932      	ldr	r1, [pc, #200]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fbe:	d105      	bne.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fca:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d015      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fd8:	4b27      	ldr	r3, [pc, #156]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fde:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe6:	4924      	ldr	r1, [pc, #144]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ff6:	d105      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ffe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006002:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d015      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006010:	4b19      	ldr	r3, [pc, #100]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006016:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800601e:	4916      	ldr	r1, [pc, #88]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800602a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800602e:	d105      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006030:	4b11      	ldr	r3, [pc, #68]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	4a10      	ldr	r2, [pc, #64]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006036:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800603a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d019      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006048:	4b0b      	ldr	r3, [pc, #44]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800604e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006056:	4908      	ldr	r1, [pc, #32]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006058:	4313      	orrs	r3, r2
 800605a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006062:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006066:	d109      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006068:	4b03      	ldr	r3, [pc, #12]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	4a02      	ldr	r2, [pc, #8]	@ (8006078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800606e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006072:	60d3      	str	r3, [r2, #12]
 8006074:	e002      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006076:	bf00      	nop
 8006078:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d015      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006088:	4b29      	ldr	r3, [pc, #164]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800608a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800608e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006096:	4926      	ldr	r1, [pc, #152]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006098:	4313      	orrs	r3, r2
 800609a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060a6:	d105      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060a8:	4b21      	ldr	r3, [pc, #132]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	4a20      	ldr	r2, [pc, #128]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060b2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d015      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80060c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ce:	4918      	ldr	r1, [pc, #96]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060de:	d105      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060e0:	4b13      	ldr	r3, [pc, #76]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	4a12      	ldr	r2, [pc, #72]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060ea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d015      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80060f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006106:	490a      	ldr	r1, [pc, #40]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006108:	4313      	orrs	r3, r2
 800610a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006112:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006116:	d105      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006118:	4b05      	ldr	r3, [pc, #20]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	4a04      	ldr	r2, [pc, #16]	@ (8006130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800611e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006122:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006124:	7cbb      	ldrb	r3, [r7, #18]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	40021000 	.word	0x40021000

08006134 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e09d      	b.n	8006282 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614a:	2b00      	cmp	r3, #0
 800614c:	d108      	bne.n	8006160 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006156:	d009      	beq.n	800616c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	61da      	str	r2, [r3, #28]
 800615e:	e005      	b.n	800616c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fc f9ec 	bl	8002564 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80061ac:	d902      	bls.n	80061b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
 80061b2:	e002      	b.n	80061ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80061b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80061b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80061c2:	d007      	beq.n	80061d4 <HAL_SPI_Init+0xa0>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80061cc:	d002      	beq.n	80061d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80061e4:	431a      	orrs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	431a      	orrs	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006202:	431a      	orrs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800620c:	431a      	orrs	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006216:	ea42 0103 	orr.w	r1, r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	0c1b      	lsrs	r3, r3, #16
 8006230:	f003 0204 	and.w	r2, r3, #4
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	431a      	orrs	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006250:	ea42 0103 	orr.w	r1, r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69da      	ldr	r2, [r3, #28]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006270:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b088      	sub	sp, #32
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	603b      	str	r3, [r7, #0]
 8006296:	4613      	mov	r3, r2
 8006298:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800629a:	f7fc ff35 	bl	8003108 <HAL_GetTick>
 800629e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80062a0:	88fb      	ldrh	r3, [r7, #6]
 80062a2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d001      	beq.n	80062b4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80062b0:	2302      	movs	r3, #2
 80062b2:	e15c      	b.n	800656e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d002      	beq.n	80062c0 <HAL_SPI_Transmit+0x36>
 80062ba:	88fb      	ldrh	r3, [r7, #6]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e154      	b.n	800656e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d101      	bne.n	80062d2 <HAL_SPI_Transmit+0x48>
 80062ce:	2302      	movs	r3, #2
 80062d0:	e14d      	b.n	800656e <HAL_SPI_Transmit+0x2e4>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2203      	movs	r2, #3
 80062de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	88fa      	ldrh	r2, [r7, #6]
 80062f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	88fa      	ldrh	r2, [r7, #6]
 80062f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006324:	d10f      	bne.n	8006346 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006334:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006344:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006350:	2b40      	cmp	r3, #64	@ 0x40
 8006352:	d007      	beq.n	8006364 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006362:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800636c:	d952      	bls.n	8006414 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <HAL_SPI_Transmit+0xf2>
 8006376:	8b7b      	ldrh	r3, [r7, #26]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d145      	bne.n	8006408 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006380:	881a      	ldrh	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800638c:	1c9a      	adds	r2, r3, #2
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006396:	b29b      	uxth	r3, r3
 8006398:	3b01      	subs	r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063a0:	e032      	b.n	8006408 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d112      	bne.n	80063d6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b4:	881a      	ldrh	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c0:	1c9a      	adds	r2, r3, #2
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	3b01      	subs	r3, #1
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063d4:	e018      	b.n	8006408 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063d6:	f7fc fe97 	bl	8003108 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d803      	bhi.n	80063ee <HAL_SPI_Transmit+0x164>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	d102      	bne.n	80063f4 <HAL_SPI_Transmit+0x16a>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d109      	bne.n	8006408 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e0b2      	b.n	800656e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1c7      	bne.n	80063a2 <HAL_SPI_Transmit+0x118>
 8006412:	e083      	b.n	800651c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <HAL_SPI_Transmit+0x198>
 800641c:	8b7b      	ldrh	r3, [r7, #26]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d177      	bne.n	8006512 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b01      	cmp	r3, #1
 800642a:	d912      	bls.n	8006452 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006430:	881a      	ldrh	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643c:	1c9a      	adds	r2, r3, #2
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b02      	subs	r3, #2
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006450:	e05f      	b.n	8006512 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	330c      	adds	r3, #12
 800645c:	7812      	ldrb	r2, [r2, #0]
 800645e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006478:	e04b      	b.n	8006512 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b02      	cmp	r3, #2
 8006486:	d12b      	bne.n	80064e0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800648c:	b29b      	uxth	r3, r3
 800648e:	2b01      	cmp	r3, #1
 8006490:	d912      	bls.n	80064b8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006496:	881a      	ldrh	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a2:	1c9a      	adds	r2, r3, #2
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b02      	subs	r3, #2
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064b6:	e02c      	b.n	8006512 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	330c      	adds	r3, #12
 80064c2:	7812      	ldrb	r2, [r2, #0]
 80064c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ca:	1c5a      	adds	r2, r3, #1
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	3b01      	subs	r3, #1
 80064d8:	b29a      	uxth	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064de:	e018      	b.n	8006512 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064e0:	f7fc fe12 	bl	8003108 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d803      	bhi.n	80064f8 <HAL_SPI_Transmit+0x26e>
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f6:	d102      	bne.n	80064fe <HAL_SPI_Transmit+0x274>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d109      	bne.n	8006512 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e02d      	b.n	800656e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006516:	b29b      	uxth	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1ae      	bne.n	800647a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800651c:	69fa      	ldr	r2, [r7, #28]
 800651e:	6839      	ldr	r1, [r7, #0]
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 fcf5 	bl	8006f10 <SPI_EndRxTxTransaction>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2220      	movs	r2, #32
 8006530:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800653a:	2300      	movs	r3, #0
 800653c:	617b      	str	r3, [r7, #20]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e000      	b.n	800656e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800656c:	2300      	movs	r3, #0
  }
}
 800656e:	4618      	mov	r0, r3
 8006570:	3720      	adds	r7, #32
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b088      	sub	sp, #32
 800657a:	af02      	add	r7, sp, #8
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	603b      	str	r3, [r7, #0]
 8006582:	4613      	mov	r3, r2
 8006584:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b01      	cmp	r3, #1
 8006590:	d001      	beq.n	8006596 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006592:	2302      	movs	r3, #2
 8006594:	e123      	b.n	80067de <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d002      	beq.n	80065a2 <HAL_SPI_Receive+0x2c>
 800659c:	88fb      	ldrh	r3, [r7, #6]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e11b      	b.n	80067de <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065ae:	d112      	bne.n	80065d6 <HAL_SPI_Receive+0x60>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10e      	bne.n	80065d6 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2204      	movs	r2, #4
 80065bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80065c0:	88fa      	ldrh	r2, [r7, #6]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	4613      	mov	r3, r2
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	68b9      	ldr	r1, [r7, #8]
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f000 f90a 	bl	80067e6 <HAL_SPI_TransmitReceive>
 80065d2:	4603      	mov	r3, r0
 80065d4:	e103      	b.n	80067de <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065d6:	f7fc fd97 	bl	8003108 <HAL_GetTick>
 80065da:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d101      	bne.n	80065ea <HAL_SPI_Receive+0x74>
 80065e6:	2302      	movs	r3, #2
 80065e8:	e0f9      	b.n	80067de <HAL_SPI_Receive+0x268>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2204      	movs	r2, #4
 80065f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	88fa      	ldrh	r2, [r7, #6]
 800660a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	88fa      	ldrh	r2, [r7, #6]
 8006612:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800663c:	d908      	bls.n	8006650 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800664c:	605a      	str	r2, [r3, #4]
 800664e:	e007      	b.n	8006660 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800665e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006668:	d10f      	bne.n	800668a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006678:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006688:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006694:	2b40      	cmp	r3, #64	@ 0x40
 8006696:	d007      	beq.n	80066a8 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80066b0:	d875      	bhi.n	800679e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80066b2:	e037      	b.n	8006724 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d117      	bne.n	80066f2 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f103 020c 	add.w	r2, r3, #12
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ce:	7812      	ldrb	r2, [r2, #0]
 80066d0:	b2d2      	uxtb	r2, r2
 80066d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	3b01      	subs	r3, #1
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80066f0:	e018      	b.n	8006724 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066f2:	f7fc fd09 	bl	8003108 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d803      	bhi.n	800670a <HAL_SPI_Receive+0x194>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006708:	d102      	bne.n	8006710 <HAL_SPI_Receive+0x19a>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d109      	bne.n	8006724 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e05c      	b.n	80067de <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800672a:	b29b      	uxth	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1c1      	bne.n	80066b4 <HAL_SPI_Receive+0x13e>
 8006730:	e03b      	b.n	80067aa <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b01      	cmp	r3, #1
 800673e:	d115      	bne.n	800676c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800674a:	b292      	uxth	r2, r2
 800674c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006752:	1c9a      	adds	r2, r3, #2
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800675e:	b29b      	uxth	r3, r3
 8006760:	3b01      	subs	r3, #1
 8006762:	b29a      	uxth	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800676a:	e018      	b.n	800679e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800676c:	f7fc fccc 	bl	8003108 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	429a      	cmp	r2, r3
 800677a:	d803      	bhi.n	8006784 <HAL_SPI_Receive+0x20e>
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006782:	d102      	bne.n	800678a <HAL_SPI_Receive+0x214>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e01f      	b.n	80067de <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1c3      	bne.n	8006732 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 fb56 	bl	8006e60 <SPI_EndRxTransaction>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2220      	movs	r2, #32
 80067be:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e000      	b.n	80067de <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80067dc:	2300      	movs	r3, #0
  }
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b08a      	sub	sp, #40	@ 0x28
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	60f8      	str	r0, [r7, #12]
 80067ee:	60b9      	str	r1, [r7, #8]
 80067f0:	607a      	str	r2, [r7, #4]
 80067f2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80067f4:	2301      	movs	r3, #1
 80067f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067f8:	f7fc fc86 	bl	8003108 <HAL_GetTick>
 80067fc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006804:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800680c:	887b      	ldrh	r3, [r7, #2]
 800680e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006810:	887b      	ldrh	r3, [r7, #2]
 8006812:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006814:	7ffb      	ldrb	r3, [r7, #31]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d00c      	beq.n	8006834 <HAL_SPI_TransmitReceive+0x4e>
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006820:	d106      	bne.n	8006830 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d102      	bne.n	8006830 <HAL_SPI_TransmitReceive+0x4a>
 800682a:	7ffb      	ldrb	r3, [r7, #31]
 800682c:	2b04      	cmp	r3, #4
 800682e:	d001      	beq.n	8006834 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006830:	2302      	movs	r3, #2
 8006832:	e1f3      	b.n	8006c1c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d005      	beq.n	8006846 <HAL_SPI_TransmitReceive+0x60>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <HAL_SPI_TransmitReceive+0x60>
 8006840:	887b      	ldrh	r3, [r7, #2]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e1e8      	b.n	8006c1c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_SPI_TransmitReceive+0x72>
 8006854:	2302      	movs	r3, #2
 8006856:	e1e1      	b.n	8006c1c <HAL_SPI_TransmitReceive+0x436>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b04      	cmp	r3, #4
 800686a:	d003      	beq.n	8006874 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2205      	movs	r2, #5
 8006870:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	887a      	ldrh	r2, [r7, #2]
 8006884:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	887a      	ldrh	r2, [r7, #2]
 800688c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	887a      	ldrh	r2, [r7, #2]
 800689a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	887a      	ldrh	r2, [r7, #2]
 80068a0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068b6:	d802      	bhi.n	80068be <HAL_SPI_TransmitReceive+0xd8>
 80068b8:	8abb      	ldrh	r3, [r7, #20]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d908      	bls.n	80068d0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80068cc:	605a      	str	r2, [r3, #4]
 80068ce:	e007      	b.n	80068e0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80068de:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ea:	2b40      	cmp	r3, #64	@ 0x40
 80068ec:	d007      	beq.n	80068fe <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006906:	f240 8083 	bls.w	8006a10 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <HAL_SPI_TransmitReceive+0x132>
 8006912:	8afb      	ldrh	r3, [r7, #22]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d16f      	bne.n	80069f8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691c:	881a      	ldrh	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006928:	1c9a      	adds	r2, r3, #2
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006932:	b29b      	uxth	r3, r3
 8006934:	3b01      	subs	r3, #1
 8006936:	b29a      	uxth	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800693c:	e05c      	b.n	80069f8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b02      	cmp	r3, #2
 800694a:	d11b      	bne.n	8006984 <HAL_SPI_TransmitReceive+0x19e>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006950:	b29b      	uxth	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d016      	beq.n	8006984 <HAL_SPI_TransmitReceive+0x19e>
 8006956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006958:	2b01      	cmp	r3, #1
 800695a:	d113      	bne.n	8006984 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006960:	881a      	ldrh	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696c:	1c9a      	adds	r2, r3, #2
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006976:	b29b      	uxth	r3, r3
 8006978:	3b01      	subs	r3, #1
 800697a:	b29a      	uxth	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b01      	cmp	r3, #1
 8006990:	d11c      	bne.n	80069cc <HAL_SPI_TransmitReceive+0x1e6>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d016      	beq.n	80069cc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a8:	b292      	uxth	r2, r2
 80069aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b0:	1c9a      	adds	r2, r3, #2
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069c8:	2301      	movs	r3, #1
 80069ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069cc:	f7fc fb9c 	bl	8003108 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069d8:	429a      	cmp	r2, r3
 80069da:	d80d      	bhi.n	80069f8 <HAL_SPI_TransmitReceive+0x212>
 80069dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e2:	d009      	beq.n	80069f8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e111      	b.n	8006c1c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d19d      	bne.n	800693e <HAL_SPI_TransmitReceive+0x158>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d197      	bne.n	800693e <HAL_SPI_TransmitReceive+0x158>
 8006a0e:	e0e5      	b.n	8006bdc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <HAL_SPI_TransmitReceive+0x23a>
 8006a18:	8afb      	ldrh	r3, [r7, #22]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	f040 80d1 	bne.w	8006bc2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d912      	bls.n	8006a50 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2e:	881a      	ldrh	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3a:	1c9a      	adds	r2, r3, #2
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	3b02      	subs	r3, #2
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a4e:	e0b8      	b.n	8006bc2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	330c      	adds	r3, #12
 8006a5a:	7812      	ldrb	r2, [r2, #0]
 8006a5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a76:	e0a4      	b.n	8006bc2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d134      	bne.n	8006af0 <HAL_SPI_TransmitReceive+0x30a>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d02f      	beq.n	8006af0 <HAL_SPI_TransmitReceive+0x30a>
 8006a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d12c      	bne.n	8006af0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d912      	bls.n	8006ac6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa4:	881a      	ldrh	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab0:	1c9a      	adds	r2, r3, #2
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	3b02      	subs	r3, #2
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ac4:	e012      	b.n	8006aec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	330c      	adds	r3, #12
 8006ad0:	7812      	ldrb	r2, [r2, #0]
 8006ad2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d148      	bne.n	8006b90 <HAL_SPI_TransmitReceive+0x3aa>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d042      	beq.n	8006b90 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d923      	bls.n	8006b5e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b20:	b292      	uxth	r2, r2
 8006b22:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b28:	1c9a      	adds	r2, r3, #2
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	3b02      	subs	r3, #2
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d81f      	bhi.n	8006b8c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b5a:	605a      	str	r2, [r3, #4]
 8006b5c:	e016      	b.n	8006b8c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f103 020c 	add.w	r2, r3, #12
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b6a:	7812      	ldrb	r2, [r2, #0]
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b90:	f7fc faba 	bl	8003108 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d803      	bhi.n	8006ba8 <HAL_SPI_TransmitReceive+0x3c2>
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba6:	d102      	bne.n	8006bae <HAL_SPI_TransmitReceive+0x3c8>
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d109      	bne.n	8006bc2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e02c      	b.n	8006c1c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f47f af55 	bne.w	8006a78 <HAL_SPI_TransmitReceive+0x292>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f47f af4e 	bne.w	8006a78 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bdc:	6a3a      	ldr	r2, [r7, #32]
 8006bde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f995 	bl	8006f10 <SPI_EndRxTxTransaction>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d008      	beq.n	8006bfe <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e00e      	b.n	8006c1c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e000      	b.n	8006c1c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
  }
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3728      	adds	r7, #40	@ 0x28
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	603b      	str	r3, [r7, #0]
 8006c30:	4613      	mov	r3, r2
 8006c32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c34:	f7fc fa68 	bl	8003108 <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3c:	1a9b      	subs	r3, r3, r2
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	4413      	add	r3, r2
 8006c42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c44:	f7fc fa60 	bl	8003108 <HAL_GetTick>
 8006c48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c4a:	4b39      	ldr	r3, [pc, #228]	@ (8006d30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	015b      	lsls	r3, r3, #5
 8006c50:	0d1b      	lsrs	r3, r3, #20
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	fb02 f303 	mul.w	r3, r2, r3
 8006c58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c5a:	e054      	b.n	8006d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c62:	d050      	beq.n	8006d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c64:	f7fc fa50 	bl	8003108 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d902      	bls.n	8006c7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d13d      	bne.n	8006cf6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006c88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c92:	d111      	bne.n	8006cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c9c:	d004      	beq.n	8006ca8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca6:	d107      	bne.n	8006cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cc0:	d10f      	bne.n	8006ce2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ce0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e017      	b.n	8006d26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	3b01      	subs	r3, #1
 8006d04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4013      	ands	r3, r2
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	bf0c      	ite	eq
 8006d16:	2301      	moveq	r3, #1
 8006d18:	2300      	movne	r3, #0
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	79fb      	ldrb	r3, [r7, #7]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d19b      	bne.n	8006c5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3720      	adds	r7, #32
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000004 	.word	0x20000004

08006d34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08a      	sub	sp, #40	@ 0x28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d42:	2300      	movs	r3, #0
 8006d44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d46:	f7fc f9df 	bl	8003108 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4e:	1a9b      	subs	r3, r3, r2
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	4413      	add	r3, r2
 8006d54:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006d56:	f7fc f9d7 	bl	8003108 <HAL_GetTick>
 8006d5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	330c      	adds	r3, #12
 8006d62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d64:	4b3d      	ldr	r3, [pc, #244]	@ (8006e5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	00da      	lsls	r2, r3, #3
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	0d1b      	lsrs	r3, r3, #20
 8006d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d76:	fb02 f303 	mul.w	r3, r2, r3
 8006d7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d7c:	e060      	b.n	8006e40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006d84:	d107      	bne.n	8006d96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9c:	d050      	beq.n	8006e40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d9e:	f7fc f9b3 	bl	8003108 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d902      	bls.n	8006db4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d13d      	bne.n	8006e30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006dc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dcc:	d111      	bne.n	8006df2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dd6:	d004      	beq.n	8006de2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006de0:	d107      	bne.n	8006df2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006df0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dfa:	d10f      	bne.n	8006e1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e010      	b.n	8006e52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d196      	bne.n	8006d7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3728      	adds	r7, #40	@ 0x28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000004 	.word	0x20000004

08006e60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af02      	add	r7, sp, #8
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e74:	d111      	bne.n	8006e9a <SPI_EndRxTransaction+0x3a>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e7e:	d004      	beq.n	8006e8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e88:	d107      	bne.n	8006e9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e98:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2180      	movs	r1, #128	@ 0x80
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f7ff febd 	bl	8006c24 <SPI_WaitFlagStateUntilTimeout>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d007      	beq.n	8006ec0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eb4:	f043 0220 	orr.w	r2, r3, #32
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e023      	b.n	8006f08 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ec8:	d11d      	bne.n	8006f06 <SPI_EndRxTransaction+0xa6>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ed2:	d004      	beq.n	8006ede <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006edc:	d113      	bne.n	8006f06 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f7ff ff22 	bl	8006d34 <SPI_WaitFifoStateUntilTimeout>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d007      	beq.n	8006f06 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006efa:	f043 0220 	orr.w	r2, r3, #32
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e000      	b.n	8006f08 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af02      	add	r7, sp, #8
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f7ff ff03 	bl	8006d34 <SPI_WaitFifoStateUntilTimeout>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d007      	beq.n	8006f44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f38:	f043 0220 	orr.w	r2, r3, #32
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e027      	b.n	8006f94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2180      	movs	r1, #128	@ 0x80
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f7ff fe68 	bl	8006c24 <SPI_WaitFlagStateUntilTimeout>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d007      	beq.n	8006f6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f5e:	f043 0220 	orr.w	r2, r3, #32
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e014      	b.n	8006f94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f7ff fedc 	bl	8006d34 <SPI_WaitFifoStateUntilTimeout>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d007      	beq.n	8006f92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f86:	f043 0220 	orr.w	r2, r3, #32
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e000      	b.n	8006f94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e049      	b.n	8007042 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d106      	bne.n	8006fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f841 	bl	800704a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	4619      	mov	r1, r3
 8006fda:	4610      	mov	r0, r2
 8006fdc:	f000 fb64 	bl	80076a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800704a:	b480      	push	{r7}
 800704c:	b083      	sub	sp, #12
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007052:	bf00      	nop
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
	...

08007060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b01      	cmp	r3, #1
 8007072:	d001      	beq.n	8007078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e054      	b.n	8007122 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2202      	movs	r2, #2
 800707c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0201 	orr.w	r2, r2, #1
 800708e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a26      	ldr	r2, [pc, #152]	@ (8007130 <HAL_TIM_Base_Start_IT+0xd0>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d022      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0x80>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070a2:	d01d      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0x80>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a22      	ldr	r2, [pc, #136]	@ (8007134 <HAL_TIM_Base_Start_IT+0xd4>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d018      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0x80>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a21      	ldr	r2, [pc, #132]	@ (8007138 <HAL_TIM_Base_Start_IT+0xd8>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d013      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0x80>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a1f      	ldr	r2, [pc, #124]	@ (800713c <HAL_TIM_Base_Start_IT+0xdc>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d00e      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0x80>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a1e      	ldr	r2, [pc, #120]	@ (8007140 <HAL_TIM_Base_Start_IT+0xe0>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d009      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0x80>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a1c      	ldr	r2, [pc, #112]	@ (8007144 <HAL_TIM_Base_Start_IT+0xe4>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d004      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0x80>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a1b      	ldr	r2, [pc, #108]	@ (8007148 <HAL_TIM_Base_Start_IT+0xe8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d115      	bne.n	800710c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	4b19      	ldr	r3, [pc, #100]	@ (800714c <HAL_TIM_Base_Start_IT+0xec>)
 80070e8:	4013      	ands	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b06      	cmp	r3, #6
 80070f0:	d015      	beq.n	800711e <HAL_TIM_Base_Start_IT+0xbe>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070f8:	d011      	beq.n	800711e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f042 0201 	orr.w	r2, r2, #1
 8007108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800710a:	e008      	b.n	800711e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f042 0201 	orr.w	r2, r2, #1
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	e000      	b.n	8007120 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800711e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	40012c00 	.word	0x40012c00
 8007134:	40000400 	.word	0x40000400
 8007138:	40000800 	.word	0x40000800
 800713c:	40000c00 	.word	0x40000c00
 8007140:	40013400 	.word	0x40013400
 8007144:	40014000 	.word	0x40014000
 8007148:	40015000 	.word	0x40015000
 800714c:	00010007 	.word	0x00010007

08007150 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e097      	b.n	8007294 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7fb fc9f 	bl	8002abc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2202      	movs	r2, #2
 8007182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	6812      	ldr	r2, [r2, #0]
 8007190:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007194:	f023 0307 	bic.w	r3, r3, #7
 8007198:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3304      	adds	r3, #4
 80071a2:	4619      	mov	r1, r3
 80071a4:	4610      	mov	r0, r2
 80071a6:	f000 fa7f 	bl	80076a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071d2:	f023 0303 	bic.w	r3, r3, #3
 80071d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	021b      	lsls	r3, r3, #8
 80071e2:	4313      	orrs	r3, r2
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80071f0:	f023 030c 	bic.w	r3, r3, #12
 80071f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007200:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	68da      	ldr	r2, [r3, #12]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	021b      	lsls	r3, r3, #8
 800720c:	4313      	orrs	r3, r2
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	4313      	orrs	r3, r2
 8007212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	011a      	lsls	r2, r3, #4
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	031b      	lsls	r3, r3, #12
 8007220:	4313      	orrs	r3, r2
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	4313      	orrs	r3, r2
 8007226:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800722e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007236:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	011b      	lsls	r3, r3, #4
 8007242:	4313      	orrs	r3, r2
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80072b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072c4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d110      	bne.n	80072ee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d102      	bne.n	80072d8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80072d2:	7b7b      	ldrb	r3, [r7, #13]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d001      	beq.n	80072dc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e069      	b.n	80073b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072ec:	e031      	b.n	8007352 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	d110      	bne.n	8007316 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d102      	bne.n	8007300 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80072fa:	7b3b      	ldrb	r3, [r7, #12]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d001      	beq.n	8007304 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e055      	b.n	80073b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007314:	e01d      	b.n	8007352 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d108      	bne.n	800732e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800731c:	7bbb      	ldrb	r3, [r7, #14]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d105      	bne.n	800732e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007322:	7b7b      	ldrb	r3, [r7, #13]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d102      	bne.n	800732e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007328:	7b3b      	ldrb	r3, [r7, #12]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d001      	beq.n	8007332 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e03e      	b.n	80073b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2202      	movs	r2, #2
 8007336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2202      	movs	r2, #2
 800733e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2202      	movs	r2, #2
 8007346:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2202      	movs	r2, #2
 800734e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <HAL_TIM_Encoder_Start+0xc4>
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	2b04      	cmp	r3, #4
 800735c:	d008      	beq.n	8007370 <HAL_TIM_Encoder_Start+0xd4>
 800735e:	e00f      	b.n	8007380 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2201      	movs	r2, #1
 8007366:	2100      	movs	r1, #0
 8007368:	4618      	mov	r0, r3
 800736a:	f000 fa51 	bl	8007810 <TIM_CCxChannelCmd>
      break;
 800736e:	e016      	b.n	800739e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2201      	movs	r2, #1
 8007376:	2104      	movs	r1, #4
 8007378:	4618      	mov	r0, r3
 800737a:	f000 fa49 	bl	8007810 <TIM_CCxChannelCmd>
      break;
 800737e:	e00e      	b.n	800739e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2201      	movs	r2, #1
 8007386:	2100      	movs	r1, #0
 8007388:	4618      	mov	r0, r3
 800738a:	f000 fa41 	bl	8007810 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2201      	movs	r2, #1
 8007394:	2104      	movs	r1, #4
 8007396:	4618      	mov	r0, r3
 8007398:	f000 fa3a 	bl	8007810 <TIM_CCxChannelCmd>
      break;
 800739c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f042 0201 	orr.w	r2, r2, #1
 80073ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d020      	beq.n	800741c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01b      	beq.n	800741c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f06f 0202 	mvn.w	r2, #2
 80073ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f931 	bl	800766a <HAL_TIM_IC_CaptureCallback>
 8007408:	e005      	b.n	8007416 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f923 	bl	8007656 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f934 	bl	800767e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f003 0304 	and.w	r3, r3, #4
 8007422:	2b00      	cmp	r3, #0
 8007424:	d020      	beq.n	8007468 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d01b      	beq.n	8007468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f06f 0204 	mvn.w	r2, #4
 8007438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2202      	movs	r2, #2
 800743e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f90b 	bl	800766a <HAL_TIM_IC_CaptureCallback>
 8007454:	e005      	b.n	8007462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f8fd 	bl	8007656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f90e 	bl	800767e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f003 0308 	and.w	r3, r3, #8
 800746e:	2b00      	cmp	r3, #0
 8007470:	d020      	beq.n	80074b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b00      	cmp	r3, #0
 800747a:	d01b      	beq.n	80074b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f06f 0208 	mvn.w	r2, #8
 8007484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2204      	movs	r2, #4
 800748a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	f003 0303 	and.w	r3, r3, #3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f8e5 	bl	800766a <HAL_TIM_IC_CaptureCallback>
 80074a0:	e005      	b.n	80074ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f8d7 	bl	8007656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f8e8 	bl	800767e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f003 0310 	and.w	r3, r3, #16
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d020      	beq.n	8007500 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f003 0310 	and.w	r3, r3, #16
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d01b      	beq.n	8007500 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f06f 0210 	mvn.w	r2, #16
 80074d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2208      	movs	r2, #8
 80074d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f8bf 	bl	800766a <HAL_TIM_IC_CaptureCallback>
 80074ec:	e005      	b.n	80074fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f8b1 	bl	8007656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f8c2 	bl	800767e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00c      	beq.n	8007524 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d007      	beq.n	8007524 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f06f 0201 	mvn.w	r2, #1
 800751c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7fa fd16 	bl	8001f50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800752a:	2b00      	cmp	r3, #0
 800752c:	d104      	bne.n	8007538 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00c      	beq.n	8007552 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800753e:	2b00      	cmp	r3, #0
 8007540:	d007      	beq.n	8007552 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800754a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fa25 	bl	800799c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00c      	beq.n	8007576 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007562:	2b00      	cmp	r3, #0
 8007564:	d007      	beq.n	8007576 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800756e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fa1d 	bl	80079b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00c      	beq.n	800759a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007586:	2b00      	cmp	r3, #0
 8007588:	d007      	beq.n	800759a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f87c 	bl	8007692 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f003 0320 	and.w	r3, r3, #32
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00c      	beq.n	80075be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f003 0320 	and.w	r3, r3, #32
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d007      	beq.n	80075be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f06f 0220 	mvn.w	r2, #32
 80075b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f9e5 	bl	8007988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00c      	beq.n	80075e2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d007      	beq.n	80075e2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80075da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f9f1 	bl	80079c4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00c      	beq.n	8007606 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d007      	beq.n	8007606 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80075fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f9e9 	bl	80079d8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00c      	beq.n	800762a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d007      	beq.n	800762a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f9e1 	bl	80079ec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00c      	beq.n	800764e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d007      	beq.n	800764e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f9d9 	bl	8007a00 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800764e:	bf00      	nop
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007686:	bf00      	nop
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007692:	b480      	push	{r7}
 8007694:	b083      	sub	sp, #12
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800769a:	bf00      	nop
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
	...

080076a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a4c      	ldr	r2, [pc, #304]	@ (80077ec <TIM_Base_SetConfig+0x144>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d017      	beq.n	80076f0 <TIM_Base_SetConfig+0x48>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076c6:	d013      	beq.n	80076f0 <TIM_Base_SetConfig+0x48>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a49      	ldr	r2, [pc, #292]	@ (80077f0 <TIM_Base_SetConfig+0x148>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00f      	beq.n	80076f0 <TIM_Base_SetConfig+0x48>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a48      	ldr	r2, [pc, #288]	@ (80077f4 <TIM_Base_SetConfig+0x14c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d00b      	beq.n	80076f0 <TIM_Base_SetConfig+0x48>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a47      	ldr	r2, [pc, #284]	@ (80077f8 <TIM_Base_SetConfig+0x150>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d007      	beq.n	80076f0 <TIM_Base_SetConfig+0x48>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a46      	ldr	r2, [pc, #280]	@ (80077fc <TIM_Base_SetConfig+0x154>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d003      	beq.n	80076f0 <TIM_Base_SetConfig+0x48>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a45      	ldr	r2, [pc, #276]	@ (8007800 <TIM_Base_SetConfig+0x158>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d108      	bne.n	8007702 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a39      	ldr	r2, [pc, #228]	@ (80077ec <TIM_Base_SetConfig+0x144>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d023      	beq.n	8007752 <TIM_Base_SetConfig+0xaa>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007710:	d01f      	beq.n	8007752 <TIM_Base_SetConfig+0xaa>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a36      	ldr	r2, [pc, #216]	@ (80077f0 <TIM_Base_SetConfig+0x148>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d01b      	beq.n	8007752 <TIM_Base_SetConfig+0xaa>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a35      	ldr	r2, [pc, #212]	@ (80077f4 <TIM_Base_SetConfig+0x14c>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d017      	beq.n	8007752 <TIM_Base_SetConfig+0xaa>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a34      	ldr	r2, [pc, #208]	@ (80077f8 <TIM_Base_SetConfig+0x150>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d013      	beq.n	8007752 <TIM_Base_SetConfig+0xaa>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a33      	ldr	r2, [pc, #204]	@ (80077fc <TIM_Base_SetConfig+0x154>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d00f      	beq.n	8007752 <TIM_Base_SetConfig+0xaa>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a33      	ldr	r2, [pc, #204]	@ (8007804 <TIM_Base_SetConfig+0x15c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d00b      	beq.n	8007752 <TIM_Base_SetConfig+0xaa>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a32      	ldr	r2, [pc, #200]	@ (8007808 <TIM_Base_SetConfig+0x160>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d007      	beq.n	8007752 <TIM_Base_SetConfig+0xaa>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a31      	ldr	r2, [pc, #196]	@ (800780c <TIM_Base_SetConfig+0x164>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d003      	beq.n	8007752 <TIM_Base_SetConfig+0xaa>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a2c      	ldr	r2, [pc, #176]	@ (8007800 <TIM_Base_SetConfig+0x158>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d108      	bne.n	8007764 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	4313      	orrs	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a18      	ldr	r2, [pc, #96]	@ (80077ec <TIM_Base_SetConfig+0x144>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d013      	beq.n	80077b8 <TIM_Base_SetConfig+0x110>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a1a      	ldr	r2, [pc, #104]	@ (80077fc <TIM_Base_SetConfig+0x154>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d00f      	beq.n	80077b8 <TIM_Base_SetConfig+0x110>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a1a      	ldr	r2, [pc, #104]	@ (8007804 <TIM_Base_SetConfig+0x15c>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d00b      	beq.n	80077b8 <TIM_Base_SetConfig+0x110>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a19      	ldr	r2, [pc, #100]	@ (8007808 <TIM_Base_SetConfig+0x160>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d007      	beq.n	80077b8 <TIM_Base_SetConfig+0x110>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a18      	ldr	r2, [pc, #96]	@ (800780c <TIM_Base_SetConfig+0x164>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d003      	beq.n	80077b8 <TIM_Base_SetConfig+0x110>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a13      	ldr	r2, [pc, #76]	@ (8007800 <TIM_Base_SetConfig+0x158>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d103      	bne.n	80077c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	691a      	ldr	r2, [r3, #16]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d105      	bne.n	80077de <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f023 0201 	bic.w	r2, r3, #1
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	611a      	str	r2, [r3, #16]
  }
}
 80077de:	bf00      	nop
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	40012c00 	.word	0x40012c00
 80077f0:	40000400 	.word	0x40000400
 80077f4:	40000800 	.word	0x40000800
 80077f8:	40000c00 	.word	0x40000c00
 80077fc:	40013400 	.word	0x40013400
 8007800:	40015000 	.word	0x40015000
 8007804:	40014000 	.word	0x40014000
 8007808:	40014400 	.word	0x40014400
 800780c:	40014800 	.word	0x40014800

08007810 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f003 031f 	and.w	r3, r3, #31
 8007822:	2201      	movs	r2, #1
 8007824:	fa02 f303 	lsl.w	r3, r2, r3
 8007828:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6a1a      	ldr	r2, [r3, #32]
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	43db      	mvns	r3, r3
 8007832:	401a      	ands	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a1a      	ldr	r2, [r3, #32]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f003 031f 	and.w	r3, r3, #31
 8007842:	6879      	ldr	r1, [r7, #4]
 8007844:	fa01 f303 	lsl.w	r3, r1, r3
 8007848:	431a      	orrs	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	621a      	str	r2, [r3, #32]
}
 800784e:	bf00      	nop
 8007850:	371c      	adds	r7, #28
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
	...

0800785c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800786c:	2b01      	cmp	r3, #1
 800786e:	d101      	bne.n	8007874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007870:	2302      	movs	r3, #2
 8007872:	e074      	b.n	800795e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2202      	movs	r2, #2
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a34      	ldr	r2, [pc, #208]	@ (800796c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d009      	beq.n	80078b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a33      	ldr	r2, [pc, #204]	@ (8007970 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d004      	beq.n	80078b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a31      	ldr	r2, [pc, #196]	@ (8007974 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d108      	bne.n	80078c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80078b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80078ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a21      	ldr	r2, [pc, #132]	@ (800796c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d022      	beq.n	8007932 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078f4:	d01d      	beq.n	8007932 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a1f      	ldr	r2, [pc, #124]	@ (8007978 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d018      	beq.n	8007932 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a1d      	ldr	r2, [pc, #116]	@ (800797c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d013      	beq.n	8007932 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a1c      	ldr	r2, [pc, #112]	@ (8007980 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d00e      	beq.n	8007932 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a15      	ldr	r2, [pc, #84]	@ (8007970 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d009      	beq.n	8007932 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a18      	ldr	r2, [pc, #96]	@ (8007984 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d004      	beq.n	8007932 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a11      	ldr	r2, [pc, #68]	@ (8007974 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d10c      	bne.n	800794c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	4313      	orrs	r3, r2
 8007942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	40012c00 	.word	0x40012c00
 8007970:	40013400 	.word	0x40013400
 8007974:	40015000 	.word	0x40015000
 8007978:	40000400 	.word	0x40000400
 800797c:	40000800 	.word	0x40000800
 8007980:	40000c00 	.word	0x40000c00
 8007984:	40014000 	.word	0x40014000

08007988 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e042      	b.n	8007aac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d106      	bne.n	8007a3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7fb fa33 	bl	8002ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2224      	movs	r2, #36	@ 0x24
 8007a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f022 0201 	bic.w	r2, r2, #1
 8007a54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d002      	beq.n	8007a64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fbb2 	bl	80081c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f8b3 	bl	8007bd0 <UART_SetConfig>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d101      	bne.n	8007a74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e01b      	b.n	8007aac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689a      	ldr	r2, [r3, #8]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f042 0201 	orr.w	r2, r2, #1
 8007aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fc31 	bl	800830c <UART_CheckIdleState>
 8007aaa:	4603      	mov	r3, r0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08a      	sub	sp, #40	@ 0x28
 8007ab8:	af02      	add	r7, sp, #8
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	603b      	str	r3, [r7, #0]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aca:	2b20      	cmp	r3, #32
 8007acc:	d17b      	bne.n	8007bc6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <HAL_UART_Transmit+0x26>
 8007ad4:	88fb      	ldrh	r3, [r7, #6]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e074      	b.n	8007bc8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2221      	movs	r2, #33	@ 0x21
 8007aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007aee:	f7fb fb0b 	bl	8003108 <HAL_GetTick>
 8007af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	88fa      	ldrh	r2, [r7, #6]
 8007af8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	88fa      	ldrh	r2, [r7, #6]
 8007b00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b0c:	d108      	bne.n	8007b20 <HAL_UART_Transmit+0x6c>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d104      	bne.n	8007b20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b16:	2300      	movs	r3, #0
 8007b18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	61bb      	str	r3, [r7, #24]
 8007b1e:	e003      	b.n	8007b28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b24:	2300      	movs	r3, #0
 8007b26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b28:	e030      	b.n	8007b8c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2200      	movs	r2, #0
 8007b32:	2180      	movs	r1, #128	@ 0x80
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 fc93 	bl	8008460 <UART_WaitOnFlagUntilTimeout>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d005      	beq.n	8007b4c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2220      	movs	r2, #32
 8007b44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e03d      	b.n	8007bc8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10b      	bne.n	8007b6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	461a      	mov	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	3302      	adds	r3, #2
 8007b66:	61bb      	str	r3, [r7, #24]
 8007b68:	e007      	b.n	8007b7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	781a      	ldrb	r2, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	3301      	adds	r3, #1
 8007b78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	3b01      	subs	r3, #1
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1c8      	bne.n	8007b2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	2140      	movs	r1, #64	@ 0x40
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 fc5c 	bl	8008460 <UART_WaitOnFlagUntilTimeout>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d005      	beq.n	8007bba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e006      	b.n	8007bc8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	e000      	b.n	8007bc8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007bc6:	2302      	movs	r3, #2
  }
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3720      	adds	r7, #32
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bd4:	b08c      	sub	sp, #48	@ 0x30
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	689a      	ldr	r2, [r3, #8]
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	431a      	orrs	r2, r3
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	4baa      	ldr	r3, [pc, #680]	@ (8007ea8 <UART_SetConfig+0x2d8>)
 8007c00:	4013      	ands	r3, r2
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	6812      	ldr	r2, [r2, #0]
 8007c06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c08:	430b      	orrs	r3, r1
 8007c0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	68da      	ldr	r2, [r3, #12]
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a9f      	ldr	r2, [pc, #636]	@ (8007eac <UART_SetConfig+0x2dc>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d004      	beq.n	8007c3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007c46:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	6812      	ldr	r2, [r2, #0]
 8007c4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c50:	430b      	orrs	r3, r1
 8007c52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5a:	f023 010f 	bic.w	r1, r3, #15
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a90      	ldr	r2, [pc, #576]	@ (8007eb0 <UART_SetConfig+0x2e0>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d125      	bne.n	8007cc0 <UART_SetConfig+0xf0>
 8007c74:	4b8f      	ldr	r3, [pc, #572]	@ (8007eb4 <UART_SetConfig+0x2e4>)
 8007c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c7a:	f003 0303 	and.w	r3, r3, #3
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d81a      	bhi.n	8007cb8 <UART_SetConfig+0xe8>
 8007c82:	a201      	add	r2, pc, #4	@ (adr r2, 8007c88 <UART_SetConfig+0xb8>)
 8007c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c88:	08007c99 	.word	0x08007c99
 8007c8c:	08007ca9 	.word	0x08007ca9
 8007c90:	08007ca1 	.word	0x08007ca1
 8007c94:	08007cb1 	.word	0x08007cb1
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c9e:	e116      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ca6:	e112      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007ca8:	2304      	movs	r3, #4
 8007caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cae:	e10e      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007cb0:	2308      	movs	r3, #8
 8007cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cb6:	e10a      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007cb8:	2310      	movs	r3, #16
 8007cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cbe:	e106      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a7c      	ldr	r2, [pc, #496]	@ (8007eb8 <UART_SetConfig+0x2e8>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d138      	bne.n	8007d3c <UART_SetConfig+0x16c>
 8007cca:	4b7a      	ldr	r3, [pc, #488]	@ (8007eb4 <UART_SetConfig+0x2e4>)
 8007ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cd0:	f003 030c 	and.w	r3, r3, #12
 8007cd4:	2b0c      	cmp	r3, #12
 8007cd6:	d82d      	bhi.n	8007d34 <UART_SetConfig+0x164>
 8007cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ce0 <UART_SetConfig+0x110>)
 8007cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cde:	bf00      	nop
 8007ce0:	08007d15 	.word	0x08007d15
 8007ce4:	08007d35 	.word	0x08007d35
 8007ce8:	08007d35 	.word	0x08007d35
 8007cec:	08007d35 	.word	0x08007d35
 8007cf0:	08007d25 	.word	0x08007d25
 8007cf4:	08007d35 	.word	0x08007d35
 8007cf8:	08007d35 	.word	0x08007d35
 8007cfc:	08007d35 	.word	0x08007d35
 8007d00:	08007d1d 	.word	0x08007d1d
 8007d04:	08007d35 	.word	0x08007d35
 8007d08:	08007d35 	.word	0x08007d35
 8007d0c:	08007d35 	.word	0x08007d35
 8007d10:	08007d2d 	.word	0x08007d2d
 8007d14:	2300      	movs	r3, #0
 8007d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d1a:	e0d8      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d22:	e0d4      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007d24:	2304      	movs	r3, #4
 8007d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d2a:	e0d0      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007d2c:	2308      	movs	r3, #8
 8007d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d32:	e0cc      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007d34:	2310      	movs	r3, #16
 8007d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d3a:	e0c8      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a5e      	ldr	r2, [pc, #376]	@ (8007ebc <UART_SetConfig+0x2ec>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d125      	bne.n	8007d92 <UART_SetConfig+0x1c2>
 8007d46:	4b5b      	ldr	r3, [pc, #364]	@ (8007eb4 <UART_SetConfig+0x2e4>)
 8007d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007d50:	2b30      	cmp	r3, #48	@ 0x30
 8007d52:	d016      	beq.n	8007d82 <UART_SetConfig+0x1b2>
 8007d54:	2b30      	cmp	r3, #48	@ 0x30
 8007d56:	d818      	bhi.n	8007d8a <UART_SetConfig+0x1ba>
 8007d58:	2b20      	cmp	r3, #32
 8007d5a:	d00a      	beq.n	8007d72 <UART_SetConfig+0x1a2>
 8007d5c:	2b20      	cmp	r3, #32
 8007d5e:	d814      	bhi.n	8007d8a <UART_SetConfig+0x1ba>
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <UART_SetConfig+0x19a>
 8007d64:	2b10      	cmp	r3, #16
 8007d66:	d008      	beq.n	8007d7a <UART_SetConfig+0x1aa>
 8007d68:	e00f      	b.n	8007d8a <UART_SetConfig+0x1ba>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d70:	e0ad      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007d72:	2302      	movs	r3, #2
 8007d74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d78:	e0a9      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007d7a:	2304      	movs	r3, #4
 8007d7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d80:	e0a5      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007d82:	2308      	movs	r3, #8
 8007d84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d88:	e0a1      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007d8a:	2310      	movs	r3, #16
 8007d8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d90:	e09d      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a4a      	ldr	r2, [pc, #296]	@ (8007ec0 <UART_SetConfig+0x2f0>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d125      	bne.n	8007de8 <UART_SetConfig+0x218>
 8007d9c:	4b45      	ldr	r3, [pc, #276]	@ (8007eb4 <UART_SetConfig+0x2e4>)
 8007d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007da2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007da6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007da8:	d016      	beq.n	8007dd8 <UART_SetConfig+0x208>
 8007daa:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dac:	d818      	bhi.n	8007de0 <UART_SetConfig+0x210>
 8007dae:	2b80      	cmp	r3, #128	@ 0x80
 8007db0:	d00a      	beq.n	8007dc8 <UART_SetConfig+0x1f8>
 8007db2:	2b80      	cmp	r3, #128	@ 0x80
 8007db4:	d814      	bhi.n	8007de0 <UART_SetConfig+0x210>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <UART_SetConfig+0x1f0>
 8007dba:	2b40      	cmp	r3, #64	@ 0x40
 8007dbc:	d008      	beq.n	8007dd0 <UART_SetConfig+0x200>
 8007dbe:	e00f      	b.n	8007de0 <UART_SetConfig+0x210>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dc6:	e082      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007dc8:	2302      	movs	r3, #2
 8007dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dce:	e07e      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007dd0:	2304      	movs	r3, #4
 8007dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dd6:	e07a      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007dd8:	2308      	movs	r3, #8
 8007dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dde:	e076      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007de0:	2310      	movs	r3, #16
 8007de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007de6:	e072      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a35      	ldr	r2, [pc, #212]	@ (8007ec4 <UART_SetConfig+0x2f4>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d12a      	bne.n	8007e48 <UART_SetConfig+0x278>
 8007df2:	4b30      	ldr	r3, [pc, #192]	@ (8007eb4 <UART_SetConfig+0x2e4>)
 8007df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007df8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e00:	d01a      	beq.n	8007e38 <UART_SetConfig+0x268>
 8007e02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e06:	d81b      	bhi.n	8007e40 <UART_SetConfig+0x270>
 8007e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e0c:	d00c      	beq.n	8007e28 <UART_SetConfig+0x258>
 8007e0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e12:	d815      	bhi.n	8007e40 <UART_SetConfig+0x270>
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <UART_SetConfig+0x250>
 8007e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e1c:	d008      	beq.n	8007e30 <UART_SetConfig+0x260>
 8007e1e:	e00f      	b.n	8007e40 <UART_SetConfig+0x270>
 8007e20:	2300      	movs	r3, #0
 8007e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e26:	e052      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e2e:	e04e      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007e30:	2304      	movs	r3, #4
 8007e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e36:	e04a      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007e38:	2308      	movs	r3, #8
 8007e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e3e:	e046      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007e40:	2310      	movs	r3, #16
 8007e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e46:	e042      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a17      	ldr	r2, [pc, #92]	@ (8007eac <UART_SetConfig+0x2dc>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d13a      	bne.n	8007ec8 <UART_SetConfig+0x2f8>
 8007e52:	4b18      	ldr	r3, [pc, #96]	@ (8007eb4 <UART_SetConfig+0x2e4>)
 8007e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007e5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e60:	d01a      	beq.n	8007e98 <UART_SetConfig+0x2c8>
 8007e62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e66:	d81b      	bhi.n	8007ea0 <UART_SetConfig+0x2d0>
 8007e68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e6c:	d00c      	beq.n	8007e88 <UART_SetConfig+0x2b8>
 8007e6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e72:	d815      	bhi.n	8007ea0 <UART_SetConfig+0x2d0>
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d003      	beq.n	8007e80 <UART_SetConfig+0x2b0>
 8007e78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e7c:	d008      	beq.n	8007e90 <UART_SetConfig+0x2c0>
 8007e7e:	e00f      	b.n	8007ea0 <UART_SetConfig+0x2d0>
 8007e80:	2300      	movs	r3, #0
 8007e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e86:	e022      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e8e:	e01e      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007e90:	2304      	movs	r3, #4
 8007e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e96:	e01a      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007e98:	2308      	movs	r3, #8
 8007e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e9e:	e016      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007ea0:	2310      	movs	r3, #16
 8007ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ea6:	e012      	b.n	8007ece <UART_SetConfig+0x2fe>
 8007ea8:	cfff69f3 	.word	0xcfff69f3
 8007eac:	40008000 	.word	0x40008000
 8007eb0:	40013800 	.word	0x40013800
 8007eb4:	40021000 	.word	0x40021000
 8007eb8:	40004400 	.word	0x40004400
 8007ebc:	40004800 	.word	0x40004800
 8007ec0:	40004c00 	.word	0x40004c00
 8007ec4:	40005000 	.word	0x40005000
 8007ec8:	2310      	movs	r3, #16
 8007eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4aae      	ldr	r2, [pc, #696]	@ (800818c <UART_SetConfig+0x5bc>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	f040 8097 	bne.w	8008008 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007eda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ede:	2b08      	cmp	r3, #8
 8007ee0:	d823      	bhi.n	8007f2a <UART_SetConfig+0x35a>
 8007ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee8 <UART_SetConfig+0x318>)
 8007ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee8:	08007f0d 	.word	0x08007f0d
 8007eec:	08007f2b 	.word	0x08007f2b
 8007ef0:	08007f15 	.word	0x08007f15
 8007ef4:	08007f2b 	.word	0x08007f2b
 8007ef8:	08007f1b 	.word	0x08007f1b
 8007efc:	08007f2b 	.word	0x08007f2b
 8007f00:	08007f2b 	.word	0x08007f2b
 8007f04:	08007f2b 	.word	0x08007f2b
 8007f08:	08007f23 	.word	0x08007f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f0c:	f7fd fe20 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8007f10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f12:	e010      	b.n	8007f36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f14:	4b9e      	ldr	r3, [pc, #632]	@ (8008190 <UART_SetConfig+0x5c0>)
 8007f16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f18:	e00d      	b.n	8007f36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f1a:	f7fd fdab 	bl	8005a74 <HAL_RCC_GetSysClockFreq>
 8007f1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f20:	e009      	b.n	8007f36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f28:	e005      	b.n	8007f36 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007f34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 8130 	beq.w	800819e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f42:	4a94      	ldr	r2, [pc, #592]	@ (8008194 <UART_SetConfig+0x5c4>)
 8007f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	4613      	mov	r3, r2
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	4413      	add	r3, r2
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d305      	bcc.n	8007f6e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d903      	bls.n	8007f76 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f74:	e113      	b.n	800819e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f78:	2200      	movs	r2, #0
 8007f7a:	60bb      	str	r3, [r7, #8]
 8007f7c:	60fa      	str	r2, [r7, #12]
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f82:	4a84      	ldr	r2, [pc, #528]	@ (8008194 <UART_SetConfig+0x5c4>)
 8007f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	603b      	str	r3, [r7, #0]
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f98:	f7f8 fe30 	bl	8000bfc <__aeabi_uldivmod>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	f04f 0200 	mov.w	r2, #0
 8007fa8:	f04f 0300 	mov.w	r3, #0
 8007fac:	020b      	lsls	r3, r1, #8
 8007fae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fb2:	0202      	lsls	r2, r0, #8
 8007fb4:	6979      	ldr	r1, [r7, #20]
 8007fb6:	6849      	ldr	r1, [r1, #4]
 8007fb8:	0849      	lsrs	r1, r1, #1
 8007fba:	2000      	movs	r0, #0
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	4605      	mov	r5, r0
 8007fc0:	eb12 0804 	adds.w	r8, r2, r4
 8007fc4:	eb43 0905 	adc.w	r9, r3, r5
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	469a      	mov	sl, r3
 8007fd0:	4693      	mov	fp, r2
 8007fd2:	4652      	mov	r2, sl
 8007fd4:	465b      	mov	r3, fp
 8007fd6:	4640      	mov	r0, r8
 8007fd8:	4649      	mov	r1, r9
 8007fda:	f7f8 fe0f 	bl	8000bfc <__aeabi_uldivmod>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fec:	d308      	bcc.n	8008000 <UART_SetConfig+0x430>
 8007fee:	6a3b      	ldr	r3, [r7, #32]
 8007ff0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ff4:	d204      	bcs.n	8008000 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6a3a      	ldr	r2, [r7, #32]
 8007ffc:	60da      	str	r2, [r3, #12]
 8007ffe:	e0ce      	b.n	800819e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008006:	e0ca      	b.n	800819e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	69db      	ldr	r3, [r3, #28]
 800800c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008010:	d166      	bne.n	80080e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008012:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008016:	2b08      	cmp	r3, #8
 8008018:	d827      	bhi.n	800806a <UART_SetConfig+0x49a>
 800801a:	a201      	add	r2, pc, #4	@ (adr r2, 8008020 <UART_SetConfig+0x450>)
 800801c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008020:	08008045 	.word	0x08008045
 8008024:	0800804d 	.word	0x0800804d
 8008028:	08008055 	.word	0x08008055
 800802c:	0800806b 	.word	0x0800806b
 8008030:	0800805b 	.word	0x0800805b
 8008034:	0800806b 	.word	0x0800806b
 8008038:	0800806b 	.word	0x0800806b
 800803c:	0800806b 	.word	0x0800806b
 8008040:	08008063 	.word	0x08008063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008044:	f7fd fd84 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8008048:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800804a:	e014      	b.n	8008076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800804c:	f7fd fd96 	bl	8005b7c <HAL_RCC_GetPCLK2Freq>
 8008050:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008052:	e010      	b.n	8008076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008054:	4b4e      	ldr	r3, [pc, #312]	@ (8008190 <UART_SetConfig+0x5c0>)
 8008056:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008058:	e00d      	b.n	8008076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800805a:	f7fd fd0b 	bl	8005a74 <HAL_RCC_GetSysClockFreq>
 800805e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008060:	e009      	b.n	8008076 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008066:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008068:	e005      	b.n	8008076 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008074:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 8090 	beq.w	800819e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008082:	4a44      	ldr	r2, [pc, #272]	@ (8008194 <UART_SetConfig+0x5c4>)
 8008084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008088:	461a      	mov	r2, r3
 800808a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008090:	005a      	lsls	r2, r3, #1
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	085b      	lsrs	r3, r3, #1
 8008098:	441a      	add	r2, r3
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	2b0f      	cmp	r3, #15
 80080a8:	d916      	bls.n	80080d8 <UART_SetConfig+0x508>
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080b0:	d212      	bcs.n	80080d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	f023 030f 	bic.w	r3, r3, #15
 80080ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080bc:	6a3b      	ldr	r3, [r7, #32]
 80080be:	085b      	lsrs	r3, r3, #1
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	f003 0307 	and.w	r3, r3, #7
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	8bfb      	ldrh	r3, [r7, #30]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	8bfa      	ldrh	r2, [r7, #30]
 80080d4:	60da      	str	r2, [r3, #12]
 80080d6:	e062      	b.n	800819e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80080de:	e05e      	b.n	800819e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80080e4:	2b08      	cmp	r3, #8
 80080e6:	d828      	bhi.n	800813a <UART_SetConfig+0x56a>
 80080e8:	a201      	add	r2, pc, #4	@ (adr r2, 80080f0 <UART_SetConfig+0x520>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	08008115 	.word	0x08008115
 80080f4:	0800811d 	.word	0x0800811d
 80080f8:	08008125 	.word	0x08008125
 80080fc:	0800813b 	.word	0x0800813b
 8008100:	0800812b 	.word	0x0800812b
 8008104:	0800813b 	.word	0x0800813b
 8008108:	0800813b 	.word	0x0800813b
 800810c:	0800813b 	.word	0x0800813b
 8008110:	08008133 	.word	0x08008133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008114:	f7fd fd1c 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8008118:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800811a:	e014      	b.n	8008146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800811c:	f7fd fd2e 	bl	8005b7c <HAL_RCC_GetPCLK2Freq>
 8008120:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008122:	e010      	b.n	8008146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008124:	4b1a      	ldr	r3, [pc, #104]	@ (8008190 <UART_SetConfig+0x5c0>)
 8008126:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008128:	e00d      	b.n	8008146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800812a:	f7fd fca3 	bl	8005a74 <HAL_RCC_GetSysClockFreq>
 800812e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008130:	e009      	b.n	8008146 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008132:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008136:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008138:	e005      	b.n	8008146 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800813a:	2300      	movs	r3, #0
 800813c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008144:	bf00      	nop
    }

    if (pclk != 0U)
 8008146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008148:	2b00      	cmp	r3, #0
 800814a:	d028      	beq.n	800819e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008150:	4a10      	ldr	r2, [pc, #64]	@ (8008194 <UART_SetConfig+0x5c4>)
 8008152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008156:	461a      	mov	r2, r3
 8008158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815a:	fbb3 f2f2 	udiv	r2, r3, r2
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	085b      	lsrs	r3, r3, #1
 8008164:	441a      	add	r2, r3
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	fbb2 f3f3 	udiv	r3, r2, r3
 800816e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008170:	6a3b      	ldr	r3, [r7, #32]
 8008172:	2b0f      	cmp	r3, #15
 8008174:	d910      	bls.n	8008198 <UART_SetConfig+0x5c8>
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800817c:	d20c      	bcs.n	8008198 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	b29a      	uxth	r2, r3
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	60da      	str	r2, [r3, #12]
 8008188:	e009      	b.n	800819e <UART_SetConfig+0x5ce>
 800818a:	bf00      	nop
 800818c:	40008000 	.word	0x40008000
 8008190:	00f42400 	.word	0x00f42400
 8008194:	0800b63c 	.word	0x0800b63c
      }
      else
      {
        ret = HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2200      	movs	r2, #0
 80081b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	2200      	movs	r2, #0
 80081b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80081ba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3730      	adds	r7, #48	@ 0x30
 80081c2:	46bd      	mov	sp, r7
 80081c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080081c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d4:	f003 0308 	and.w	r3, r3, #8
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00a      	beq.n	80081f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00a      	beq.n	8008214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	430a      	orrs	r2, r1
 8008212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00a      	beq.n	8008236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800823a:	f003 0304 	and.w	r3, r3, #4
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800825c:	f003 0310 	and.w	r3, r3, #16
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00a      	beq.n	800827a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800827e:	f003 0320 	and.w	r3, r3, #32
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00a      	beq.n	800829c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d01a      	beq.n	80082de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	430a      	orrs	r2, r1
 80082bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082c6:	d10a      	bne.n	80082de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	430a      	orrs	r2, r1
 80082dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	605a      	str	r2, [r3, #4]
  }
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b098      	sub	sp, #96	@ 0x60
 8008310:	af02      	add	r7, sp, #8
 8008312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800831c:	f7fa fef4 	bl	8003108 <HAL_GetTick>
 8008320:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0308 	and.w	r3, r3, #8
 800832c:	2b08      	cmp	r3, #8
 800832e:	d12f      	bne.n	8008390 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008330:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008338:	2200      	movs	r2, #0
 800833a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f88e 	bl	8008460 <UART_WaitOnFlagUntilTimeout>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d022      	beq.n	8008390 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008352:	e853 3f00 	ldrex	r3, [r3]
 8008356:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800835a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800835e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	461a      	mov	r2, r3
 8008366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008368:	647b      	str	r3, [r7, #68]	@ 0x44
 800836a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800836e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008370:	e841 2300 	strex	r3, r2, [r1]
 8008374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1e6      	bne.n	800834a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2220      	movs	r2, #32
 8008380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e063      	b.n	8008458 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0304 	and.w	r3, r3, #4
 800839a:	2b04      	cmp	r3, #4
 800839c:	d149      	bne.n	8008432 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800839e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083a6:	2200      	movs	r2, #0
 80083a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f857 	bl	8008460 <UART_WaitOnFlagUntilTimeout>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d03c      	beq.n	8008432 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c0:	e853 3f00 	ldrex	r3, [r3]
 80083c4:	623b      	str	r3, [r7, #32]
   return(result);
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80083d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083de:	e841 2300 	strex	r3, r2, [r1]
 80083e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1e6      	bne.n	80083b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	3308      	adds	r3, #8
 80083f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	e853 3f00 	ldrex	r3, [r3]
 80083f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f023 0301 	bic.w	r3, r3, #1
 8008400:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3308      	adds	r3, #8
 8008408:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800840a:	61fa      	str	r2, [r7, #28]
 800840c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840e:	69b9      	ldr	r1, [r7, #24]
 8008410:	69fa      	ldr	r2, [r7, #28]
 8008412:	e841 2300 	strex	r3, r2, [r1]
 8008416:	617b      	str	r3, [r7, #20]
   return(result);
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1e5      	bne.n	80083ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2220      	movs	r2, #32
 8008422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e012      	b.n	8008458 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2220      	movs	r2, #32
 8008436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2220      	movs	r2, #32
 800843e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3758      	adds	r7, #88	@ 0x58
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	603b      	str	r3, [r7, #0]
 800846c:	4613      	mov	r3, r2
 800846e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008470:	e04f      	b.n	8008512 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008478:	d04b      	beq.n	8008512 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800847a:	f7fa fe45 	bl	8003108 <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	69ba      	ldr	r2, [r7, #24]
 8008486:	429a      	cmp	r2, r3
 8008488:	d302      	bcc.n	8008490 <UART_WaitOnFlagUntilTimeout+0x30>
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008490:	2303      	movs	r3, #3
 8008492:	e04e      	b.n	8008532 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0304 	and.w	r3, r3, #4
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d037      	beq.n	8008512 <UART_WaitOnFlagUntilTimeout+0xb2>
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	2b80      	cmp	r3, #128	@ 0x80
 80084a6:	d034      	beq.n	8008512 <UART_WaitOnFlagUntilTimeout+0xb2>
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	2b40      	cmp	r3, #64	@ 0x40
 80084ac:	d031      	beq.n	8008512 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	69db      	ldr	r3, [r3, #28]
 80084b4:	f003 0308 	and.w	r3, r3, #8
 80084b8:	2b08      	cmp	r3, #8
 80084ba:	d110      	bne.n	80084de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2208      	movs	r2, #8
 80084c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 f838 	bl	800853a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2208      	movs	r2, #8
 80084ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e029      	b.n	8008532 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	69db      	ldr	r3, [r3, #28]
 80084e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084ec:	d111      	bne.n	8008512 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80084f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f000 f81e 	bl	800853a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2220      	movs	r2, #32
 8008502:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e00f      	b.n	8008532 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	69da      	ldr	r2, [r3, #28]
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	4013      	ands	r3, r2
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	429a      	cmp	r2, r3
 8008520:	bf0c      	ite	eq
 8008522:	2301      	moveq	r3, #1
 8008524:	2300      	movne	r3, #0
 8008526:	b2db      	uxtb	r3, r3
 8008528:	461a      	mov	r2, r3
 800852a:	79fb      	ldrb	r3, [r7, #7]
 800852c:	429a      	cmp	r2, r3
 800852e:	d0a0      	beq.n	8008472 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800853a:	b480      	push	{r7}
 800853c:	b095      	sub	sp, #84	@ 0x54
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800854a:	e853 3f00 	ldrex	r3, [r3]
 800854e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008552:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	461a      	mov	r2, r3
 800855e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008560:	643b      	str	r3, [r7, #64]	@ 0x40
 8008562:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008564:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008566:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008568:	e841 2300 	strex	r3, r2, [r1]
 800856c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800856e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1e6      	bne.n	8008542 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3308      	adds	r3, #8
 800857a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857c:	6a3b      	ldr	r3, [r7, #32]
 800857e:	e853 3f00 	ldrex	r3, [r3]
 8008582:	61fb      	str	r3, [r7, #28]
   return(result);
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800858a:	f023 0301 	bic.w	r3, r3, #1
 800858e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3308      	adds	r3, #8
 8008596:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008598:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800859a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800859e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085a0:	e841 2300 	strex	r3, r2, [r1]
 80085a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e3      	bne.n	8008574 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d118      	bne.n	80085e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	e853 3f00 	ldrex	r3, [r3]
 80085c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	f023 0310 	bic.w	r3, r3, #16
 80085c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085d2:	61bb      	str	r3, [r7, #24]
 80085d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d6:	6979      	ldr	r1, [r7, #20]
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	e841 2300 	strex	r3, r2, [r1]
 80085de:	613b      	str	r3, [r7, #16]
   return(result);
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1e6      	bne.n	80085b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2220      	movs	r2, #32
 80085ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80085fa:	bf00      	nop
 80085fc:	3754      	adds	r7, #84	@ 0x54
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008606:	b480      	push	{r7}
 8008608:	b085      	sub	sp, #20
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008614:	2b01      	cmp	r3, #1
 8008616:	d101      	bne.n	800861c <HAL_UARTEx_DisableFifoMode+0x16>
 8008618:	2302      	movs	r3, #2
 800861a:	e027      	b.n	800866c <HAL_UARTEx_DisableFifoMode+0x66>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2224      	movs	r2, #36	@ 0x24
 8008628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f022 0201 	bic.w	r2, r2, #1
 8008642:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800864a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2220      	movs	r2, #32
 800865e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008688:	2b01      	cmp	r3, #1
 800868a:	d101      	bne.n	8008690 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800868c:	2302      	movs	r3, #2
 800868e:	e02d      	b.n	80086ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2224      	movs	r2, #36	@ 0x24
 800869c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f022 0201 	bic.w	r2, r2, #1
 80086b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f84f 	bl	8008770 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2220      	movs	r2, #32
 80086de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008704:	2b01      	cmp	r3, #1
 8008706:	d101      	bne.n	800870c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008708:	2302      	movs	r3, #2
 800870a:	e02d      	b.n	8008768 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2224      	movs	r2, #36	@ 0x24
 8008718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0201 	bic.w	r2, r2, #1
 8008732:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	430a      	orrs	r2, r1
 8008746:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f811 	bl	8008770 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2220      	movs	r2, #32
 800875a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800877c:	2b00      	cmp	r3, #0
 800877e:	d108      	bne.n	8008792 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008790:	e031      	b.n	80087f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008792:	2308      	movs	r3, #8
 8008794:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008796:	2308      	movs	r3, #8
 8008798:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	0e5b      	lsrs	r3, r3, #25
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	f003 0307 	and.w	r3, r3, #7
 80087a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	0f5b      	lsrs	r3, r3, #29
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	f003 0307 	and.w	r3, r3, #7
 80087b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	7b3a      	ldrb	r2, [r7, #12]
 80087be:	4911      	ldr	r1, [pc, #68]	@ (8008804 <UARTEx_SetNbDataToProcess+0x94>)
 80087c0:	5c8a      	ldrb	r2, [r1, r2]
 80087c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80087c6:	7b3a      	ldrb	r2, [r7, #12]
 80087c8:	490f      	ldr	r1, [pc, #60]	@ (8008808 <UARTEx_SetNbDataToProcess+0x98>)
 80087ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	7b7a      	ldrb	r2, [r7, #13]
 80087dc:	4909      	ldr	r1, [pc, #36]	@ (8008804 <UARTEx_SetNbDataToProcess+0x94>)
 80087de:	5c8a      	ldrb	r2, [r1, r2]
 80087e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80087e4:	7b7a      	ldrb	r2, [r7, #13]
 80087e6:	4908      	ldr	r1, [pc, #32]	@ (8008808 <UARTEx_SetNbDataToProcess+0x98>)
 80087e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80087f6:	bf00      	nop
 80087f8:	3714      	adds	r7, #20
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	0800b654 	.word	0x0800b654
 8008808:	0800b65c 	.word	0x0800b65c

0800880c <__NVIC_SetPriority>:
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	4603      	mov	r3, r0
 8008814:	6039      	str	r1, [r7, #0]
 8008816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800881c:	2b00      	cmp	r3, #0
 800881e:	db0a      	blt.n	8008836 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	b2da      	uxtb	r2, r3
 8008824:	490c      	ldr	r1, [pc, #48]	@ (8008858 <__NVIC_SetPriority+0x4c>)
 8008826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800882a:	0112      	lsls	r2, r2, #4
 800882c:	b2d2      	uxtb	r2, r2
 800882e:	440b      	add	r3, r1
 8008830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008834:	e00a      	b.n	800884c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	b2da      	uxtb	r2, r3
 800883a:	4908      	ldr	r1, [pc, #32]	@ (800885c <__NVIC_SetPriority+0x50>)
 800883c:	79fb      	ldrb	r3, [r7, #7]
 800883e:	f003 030f 	and.w	r3, r3, #15
 8008842:	3b04      	subs	r3, #4
 8008844:	0112      	lsls	r2, r2, #4
 8008846:	b2d2      	uxtb	r2, r2
 8008848:	440b      	add	r3, r1
 800884a:	761a      	strb	r2, [r3, #24]
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr
 8008858:	e000e100 	.word	0xe000e100
 800885c:	e000ed00 	.word	0xe000ed00

08008860 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008860:	b580      	push	{r7, lr}
 8008862:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008864:	4b05      	ldr	r3, [pc, #20]	@ (800887c <SysTick_Handler+0x1c>)
 8008866:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008868:	f001 fcf6 	bl	800a258 <xTaskGetSchedulerState>
 800886c:	4603      	mov	r3, r0
 800886e:	2b01      	cmp	r3, #1
 8008870:	d001      	beq.n	8008876 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008872:	f002 faf1 	bl	800ae58 <xPortSysTickHandler>
  }
}
 8008876:	bf00      	nop
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	e000e010 	.word	0xe000e010

08008880 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008880:	b580      	push	{r7, lr}
 8008882:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008884:	2100      	movs	r1, #0
 8008886:	f06f 0004 	mvn.w	r0, #4
 800888a:	f7ff ffbf 	bl	800880c <__NVIC_SetPriority>
#endif
}
 800888e:	bf00      	nop
 8008890:	bd80      	pop	{r7, pc}
	...

08008894 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800889a:	f3ef 8305 	mrs	r3, IPSR
 800889e:	603b      	str	r3, [r7, #0]
  return(result);
 80088a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d003      	beq.n	80088ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80088a6:	f06f 0305 	mvn.w	r3, #5
 80088aa:	607b      	str	r3, [r7, #4]
 80088ac:	e00c      	b.n	80088c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80088ae:	4b0a      	ldr	r3, [pc, #40]	@ (80088d8 <osKernelInitialize+0x44>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d105      	bne.n	80088c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80088b6:	4b08      	ldr	r3, [pc, #32]	@ (80088d8 <osKernelInitialize+0x44>)
 80088b8:	2201      	movs	r2, #1
 80088ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80088bc:	2300      	movs	r3, #0
 80088be:	607b      	str	r3, [r7, #4]
 80088c0:	e002      	b.n	80088c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80088c2:	f04f 33ff 	mov.w	r3, #4294967295
 80088c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80088c8:	687b      	ldr	r3, [r7, #4]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	20000638 	.word	0x20000638

080088dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088e2:	f3ef 8305 	mrs	r3, IPSR
 80088e6:	603b      	str	r3, [r7, #0]
  return(result);
 80088e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d003      	beq.n	80088f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80088ee:	f06f 0305 	mvn.w	r3, #5
 80088f2:	607b      	str	r3, [r7, #4]
 80088f4:	e010      	b.n	8008918 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80088f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008924 <osKernelStart+0x48>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d109      	bne.n	8008912 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80088fe:	f7ff ffbf 	bl	8008880 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008902:	4b08      	ldr	r3, [pc, #32]	@ (8008924 <osKernelStart+0x48>)
 8008904:	2202      	movs	r2, #2
 8008906:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008908:	f001 f866 	bl	80099d8 <vTaskStartScheduler>
      stat = osOK;
 800890c:	2300      	movs	r3, #0
 800890e:	607b      	str	r3, [r7, #4]
 8008910:	e002      	b.n	8008918 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008912:	f04f 33ff 	mov.w	r3, #4294967295
 8008916:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008918:	687b      	ldr	r3, [r7, #4]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	20000638 	.word	0x20000638

08008928 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800892e:	f3ef 8305 	mrs	r3, IPSR
 8008932:	603b      	str	r3, [r7, #0]
  return(result);
 8008934:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800893a:	f001 f96b 	bl	8009c14 <xTaskGetTickCountFromISR>
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	e002      	b.n	8008948 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8008942:	f001 f957 	bl	8009bf4 <xTaskGetTickCount>
 8008946:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008948:	687b      	ldr	r3, [r7, #4]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008952:	b580      	push	{r7, lr}
 8008954:	b08e      	sub	sp, #56	@ 0x38
 8008956:	af04      	add	r7, sp, #16
 8008958:	60f8      	str	r0, [r7, #12]
 800895a:	60b9      	str	r1, [r7, #8]
 800895c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800895e:	2300      	movs	r3, #0
 8008960:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008962:	f3ef 8305 	mrs	r3, IPSR
 8008966:	617b      	str	r3, [r7, #20]
  return(result);
 8008968:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800896a:	2b00      	cmp	r3, #0
 800896c:	d17e      	bne.n	8008a6c <osThreadNew+0x11a>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d07b      	beq.n	8008a6c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008974:	2380      	movs	r3, #128	@ 0x80
 8008976:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008978:	2318      	movs	r3, #24
 800897a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800897c:	2300      	movs	r3, #0
 800897e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008980:	f04f 33ff 	mov.w	r3, #4294967295
 8008984:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d045      	beq.n	8008a18 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d002      	beq.n	800899a <osThreadNew+0x48>
        name = attr->name;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d002      	beq.n	80089a8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d008      	beq.n	80089c0 <osThreadNew+0x6e>
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	2b38      	cmp	r3, #56	@ 0x38
 80089b2:	d805      	bhi.n	80089c0 <osThreadNew+0x6e>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d001      	beq.n	80089c4 <osThreadNew+0x72>
        return (NULL);
 80089c0:	2300      	movs	r3, #0
 80089c2:	e054      	b.n	8008a6e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	695b      	ldr	r3, [r3, #20]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	695b      	ldr	r3, [r3, #20]
 80089d0:	089b      	lsrs	r3, r3, #2
 80089d2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00e      	beq.n	80089fa <osThreadNew+0xa8>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	2ba7      	cmp	r3, #167	@ 0xa7
 80089e2:	d90a      	bls.n	80089fa <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d006      	beq.n	80089fa <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <osThreadNew+0xa8>
        mem = 1;
 80089f4:	2301      	movs	r3, #1
 80089f6:	61bb      	str	r3, [r7, #24]
 80089f8:	e010      	b.n	8008a1c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10c      	bne.n	8008a1c <osThreadNew+0xca>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d108      	bne.n	8008a1c <osThreadNew+0xca>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d104      	bne.n	8008a1c <osThreadNew+0xca>
          mem = 0;
 8008a12:	2300      	movs	r3, #0
 8008a14:	61bb      	str	r3, [r7, #24]
 8008a16:	e001      	b.n	8008a1c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d110      	bne.n	8008a44 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a2a:	9202      	str	r2, [sp, #8]
 8008a2c:	9301      	str	r3, [sp, #4]
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	6a3a      	ldr	r2, [r7, #32]
 8008a36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 fde9 	bl	8009610 <xTaskCreateStatic>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	613b      	str	r3, [r7, #16]
 8008a42:	e013      	b.n	8008a6c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d110      	bne.n	8008a6c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	f107 0310 	add.w	r3, r7, #16
 8008a52:	9301      	str	r3, [sp, #4]
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f000 fe37 	bl	80096d0 <xTaskCreate>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d001      	beq.n	8008a6c <osThreadNew+0x11a>
            hTask = NULL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a6c:	693b      	ldr	r3, [r7, #16]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3728      	adds	r7, #40	@ 0x28
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b084      	sub	sp, #16
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a7e:	f3ef 8305 	mrs	r3, IPSR
 8008a82:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d003      	beq.n	8008a92 <osDelay+0x1c>
    stat = osErrorISR;
 8008a8a:	f06f 0305 	mvn.w	r3, #5
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	e007      	b.n	8008aa2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d002      	beq.n	8008aa2 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 ff65 	bl	800996c <vTaskDelay>
    }
  }

  return (stat);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	4a07      	ldr	r2, [pc, #28]	@ (8008ad8 <vApplicationGetIdleTaskMemory+0x2c>)
 8008abc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	4a06      	ldr	r2, [pc, #24]	@ (8008adc <vApplicationGetIdleTaskMemory+0x30>)
 8008ac2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2280      	movs	r2, #128	@ 0x80
 8008ac8:	601a      	str	r2, [r3, #0]
}
 8008aca:	bf00      	nop
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	2000063c 	.word	0x2000063c
 8008adc:	200006e4 	.word	0x200006e4

08008ae0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	4a07      	ldr	r2, [pc, #28]	@ (8008b0c <vApplicationGetTimerTaskMemory+0x2c>)
 8008af0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	4a06      	ldr	r2, [pc, #24]	@ (8008b10 <vApplicationGetTimerTaskMemory+0x30>)
 8008af6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008afe:	601a      	str	r2, [r3, #0]
}
 8008b00:	bf00      	nop
 8008b02:	3714      	adds	r7, #20
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	200008e4 	.word	0x200008e4
 8008b10:	2000098c 	.word	0x2000098c

08008b14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f103 0208 	add.w	r2, r3, #8
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f04f 32ff 	mov.w	r2, #4294967295
 8008b2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f103 0208 	add.w	r2, r3, #8
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f103 0208 	add.w	r2, r3, #8
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b62:	bf00      	nop
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b085      	sub	sp, #20
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	689a      	ldr	r2, [r3, #8]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	1c5a      	adds	r2, r3, #1
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	601a      	str	r2, [r3, #0]
}
 8008baa:	bf00      	nop
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b085      	sub	sp, #20
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bcc:	d103      	bne.n	8008bd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	e00c      	b.n	8008bf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	3308      	adds	r3, #8
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	e002      	b.n	8008be4 <vListInsert+0x2e>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d2f6      	bcs.n	8008bde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	683a      	ldr	r2, [r7, #0]
 8008bfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	601a      	str	r2, [r3, #0]
}
 8008c1c:	bf00      	nop
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	6892      	ldr	r2, [r2, #8]
 8008c3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	6852      	ldr	r2, [r2, #4]
 8008c48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d103      	bne.n	8008c5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	689a      	ldr	r2, [r3, #8]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	1e5a      	subs	r2, r3, #1
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10b      	bne.n	8008ca8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008ca2:	bf00      	nop
 8008ca4:	bf00      	nop
 8008ca6:	e7fd      	b.n	8008ca4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008ca8:	f002 f846 	bl	800ad38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cb4:	68f9      	ldr	r1, [r7, #12]
 8008cb6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008cb8:	fb01 f303 	mul.w	r3, r1, r3
 8008cbc:	441a      	add	r2, r3
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	68f9      	ldr	r1, [r7, #12]
 8008cdc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008cde:	fb01 f303 	mul.w	r3, r1, r3
 8008ce2:	441a      	add	r2, r3
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	22ff      	movs	r2, #255	@ 0xff
 8008cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	22ff      	movs	r2, #255	@ 0xff
 8008cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d109      	bne.n	8008d12 <xQueueGenericReset+0x96>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00f      	beq.n	8008d26 <xQueueGenericReset+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3310      	adds	r3, #16
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f001 f8e4 	bl	8009ed8 <xTaskRemoveFromEventList>
 8008d10:	e009      	b.n	8008d26 <xQueueGenericReset+0xaa>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	3310      	adds	r3, #16
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7ff fefc 	bl	8008b14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3324      	adds	r3, #36	@ 0x24
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7ff fef7 	bl	8008b14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d26:	f002 f839 	bl	800ad9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d2a:	2301      	movs	r3, #1
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b08e      	sub	sp, #56	@ 0x38
 8008d38:	af02      	add	r7, sp, #8
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
 8008d40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10b      	bne.n	8008d60 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4c:	f383 8811 	msr	BASEPRI, r3
 8008d50:	f3bf 8f6f 	isb	sy
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008d5a:	bf00      	nop
 8008d5c:	bf00      	nop
 8008d5e:	e7fd      	b.n	8008d5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d10b      	bne.n	8008d7e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008d78:	bf00      	nop
 8008d7a:	bf00      	nop
 8008d7c:	e7fd      	b.n	8008d7a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <xQueueGenericCreateStatic+0x56>
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <xQueueGenericCreateStatic+0x5a>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e000      	b.n	8008d90 <xQueueGenericCreateStatic+0x5c>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10b      	bne.n	8008dac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	623b      	str	r3, [r7, #32]
}
 8008da6:	bf00      	nop
 8008da8:	bf00      	nop
 8008daa:	e7fd      	b.n	8008da8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d102      	bne.n	8008db8 <xQueueGenericCreateStatic+0x84>
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d101      	bne.n	8008dbc <xQueueGenericCreateStatic+0x88>
 8008db8:	2301      	movs	r3, #1
 8008dba:	e000      	b.n	8008dbe <xQueueGenericCreateStatic+0x8a>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10b      	bne.n	8008dda <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	61fb      	str	r3, [r7, #28]
}
 8008dd4:	bf00      	nop
 8008dd6:	bf00      	nop
 8008dd8:	e7fd      	b.n	8008dd6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008dda:	2350      	movs	r3, #80	@ 0x50
 8008ddc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	2b50      	cmp	r3, #80	@ 0x50
 8008de2:	d00b      	beq.n	8008dfc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	61bb      	str	r3, [r7, #24]
}
 8008df6:	bf00      	nop
 8008df8:	bf00      	nop
 8008dfa:	e7fd      	b.n	8008df8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008dfc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00d      	beq.n	8008e24 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e10:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	68b9      	ldr	r1, [r7, #8]
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f000 f805 	bl	8008e2e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3730      	adds	r7, #48	@ 0x30
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b084      	sub	sp, #16
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	60f8      	str	r0, [r7, #12]
 8008e36:	60b9      	str	r1, [r7, #8]
 8008e38:	607a      	str	r2, [r7, #4]
 8008e3a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d103      	bne.n	8008e4a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	69ba      	ldr	r2, [r7, #24]
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	e002      	b.n	8008e50 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	69b8      	ldr	r0, [r7, #24]
 8008e60:	f7ff ff0c 	bl	8008c7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	78fa      	ldrb	r2, [r7, #3]
 8008e68:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e6c:	bf00      	nop
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b08e      	sub	sp, #56	@ 0x38
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
 8008e80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008e82:	2300      	movs	r3, #0
 8008e84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10b      	bne.n	8008ea8 <xQueueGenericSend+0x34>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008ea2:	bf00      	nop
 8008ea4:	bf00      	nop
 8008ea6:	e7fd      	b.n	8008ea4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d103      	bne.n	8008eb6 <xQueueGenericSend+0x42>
 8008eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <xQueueGenericSend+0x46>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e000      	b.n	8008ebc <xQueueGenericSend+0x48>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10b      	bne.n	8008ed8 <xQueueGenericSend+0x64>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008ed2:	bf00      	nop
 8008ed4:	bf00      	nop
 8008ed6:	e7fd      	b.n	8008ed4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d103      	bne.n	8008ee6 <xQueueGenericSend+0x72>
 8008ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d101      	bne.n	8008eea <xQueueGenericSend+0x76>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e000      	b.n	8008eec <xQueueGenericSend+0x78>
 8008eea:	2300      	movs	r3, #0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10b      	bne.n	8008f08 <xQueueGenericSend+0x94>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	623b      	str	r3, [r7, #32]
}
 8008f02:	bf00      	nop
 8008f04:	bf00      	nop
 8008f06:	e7fd      	b.n	8008f04 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f08:	f001 f9a6 	bl	800a258 <xTaskGetSchedulerState>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d102      	bne.n	8008f18 <xQueueGenericSend+0xa4>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d101      	bne.n	8008f1c <xQueueGenericSend+0xa8>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e000      	b.n	8008f1e <xQueueGenericSend+0xaa>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10b      	bne.n	8008f3a <xQueueGenericSend+0xc6>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	61fb      	str	r3, [r7, #28]
}
 8008f34:	bf00      	nop
 8008f36:	bf00      	nop
 8008f38:	e7fd      	b.n	8008f36 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f3a:	f001 fefd 	bl	800ad38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d302      	bcc.n	8008f50 <xQueueGenericSend+0xdc>
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d112      	bne.n	8008f76 <xQueueGenericSend+0x102>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f50:	683a      	ldr	r2, [r7, #0]
 8008f52:	68b9      	ldr	r1, [r7, #8]
 8008f54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f56:	f000 f9ed 	bl	8009334 <prvCopyDataToQueue>
 8008f5a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d004      	beq.n	8008f6e <xQueueGenericSend+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f66:	3324      	adds	r3, #36	@ 0x24
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 ffb5 	bl	8009ed8 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008f6e:	f001 ff15 	bl	800ad9c <vPortExitCritical>
				return pdPASS;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e062      	b.n	800903c <xQueueGenericSend+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d103      	bne.n	8008f84 <xQueueGenericSend+0x110>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f7c:	f001 ff0e 	bl	800ad9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008f80:	2300      	movs	r3, #0
 8008f82:	e05b      	b.n	800903c <xQueueGenericSend+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d106      	bne.n	8008f98 <xQueueGenericSend+0x124>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f8a:	f107 0314 	add.w	r3, r7, #20
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f001 f806 	bl	8009fa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f94:	2301      	movs	r3, #1
 8008f96:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f98:	f001 ff00 	bl	800ad9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f9c:	f000 fd8c 	bl	8009ab8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fa0:	f001 feca 	bl	800ad38 <vPortEnterCritical>
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008faa:	b25b      	sxtb	r3, r3
 8008fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb0:	d103      	bne.n	8008fba <xQueueGenericSend+0x146>
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fc0:	b25b      	sxtb	r3, r3
 8008fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc6:	d103      	bne.n	8008fd0 <xQueueGenericSend+0x15c>
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fd0:	f001 fee4 	bl	800ad9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fd4:	1d3a      	adds	r2, r7, #4
 8008fd6:	f107 0314 	add.w	r3, r7, #20
 8008fda:	4611      	mov	r1, r2
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 fff5 	bl	8009fcc <xTaskCheckForTimeOut>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d123      	bne.n	8009030 <xQueueGenericSend+0x1bc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008fe8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fea:	f000 fa9b 	bl	8009524 <prvIsQueueFull>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d017      	beq.n	8009024 <xQueueGenericSend+0x1b0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff6:	3310      	adds	r3, #16
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	4611      	mov	r1, r2
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f000 ff19 	bl	8009e34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009002:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009004:	f000 fa26 	bl	8009454 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009008:	f000 fd64 	bl	8009ad4 <xTaskResumeAll>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d193      	bne.n	8008f3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009012:	4b0c      	ldr	r3, [pc, #48]	@ (8009044 <xQueueGenericSend+0x1d0>)
 8009014:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	e78a      	b.n	8008f3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009024:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009026:	f000 fa15 	bl	8009454 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800902a:	f000 fd53 	bl	8009ad4 <xTaskResumeAll>
 800902e:	e784      	b.n	8008f3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009030:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009032:	f000 fa0f 	bl	8009454 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009036:	f000 fd4d 	bl	8009ad4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800903a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800903c:	4618      	mov	r0, r3
 800903e:	3738      	adds	r7, #56	@ 0x38
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	e000ed04 	.word	0xe000ed04

08009048 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b090      	sub	sp, #64	@ 0x40
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	607a      	str	r2, [r7, #4]
 8009054:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800905a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10b      	bne.n	8009078 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009072:	bf00      	nop
 8009074:	bf00      	nop
 8009076:	e7fd      	b.n	8009074 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d103      	bne.n	8009086 <xQueueGenericSendFromISR+0x3e>
 800907e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <xQueueGenericSendFromISR+0x42>
 8009086:	2301      	movs	r3, #1
 8009088:	e000      	b.n	800908c <xQueueGenericSendFromISR+0x44>
 800908a:	2300      	movs	r3, #0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10b      	bne.n	80090a8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80090a2:	bf00      	nop
 80090a4:	bf00      	nop
 80090a6:	e7fd      	b.n	80090a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d103      	bne.n	80090b6 <xQueueGenericSendFromISR+0x6e>
 80090ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d101      	bne.n	80090ba <xQueueGenericSendFromISR+0x72>
 80090b6:	2301      	movs	r3, #1
 80090b8:	e000      	b.n	80090bc <xQueueGenericSendFromISR+0x74>
 80090ba:	2300      	movs	r3, #0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10b      	bne.n	80090d8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	623b      	str	r3, [r7, #32]
}
 80090d2:	bf00      	nop
 80090d4:	bf00      	nop
 80090d6:	e7fd      	b.n	80090d4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090d8:	f001 ff0e 	bl	800aef8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80090dc:	f3ef 8211 	mrs	r2, BASEPRI
 80090e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	61fa      	str	r2, [r7, #28]
 80090f2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80090f4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80090f6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009100:	429a      	cmp	r2, r3
 8009102:	d302      	bcc.n	800910a <xQueueGenericSendFromISR+0xc2>
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	2b02      	cmp	r3, #2
 8009108:	d12f      	bne.n	800916a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800910a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800910c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009110:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009118:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	68b9      	ldr	r1, [r7, #8]
 800911e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009120:	f000 f908 	bl	8009334 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009124:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912c:	d112      	bne.n	8009154 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800912e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009132:	2b00      	cmp	r3, #0
 8009134:	d016      	beq.n	8009164 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009138:	3324      	adds	r3, #36	@ 0x24
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fecc 	bl	8009ed8 <xTaskRemoveFromEventList>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00e      	beq.n	8009164 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00b      	beq.n	8009164 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	601a      	str	r2, [r3, #0]
 8009152:	e007      	b.n	8009164 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009154:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009158:	3301      	adds	r3, #1
 800915a:	b2db      	uxtb	r3, r3
 800915c:	b25a      	sxtb	r2, r3
 800915e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009164:	2301      	movs	r3, #1
 8009166:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009168:	e001      	b.n	800916e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800916a:	2300      	movs	r3, #0
 800916c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800916e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009170:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009178:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800917a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800917c:	4618      	mov	r0, r3
 800917e:	3740      	adds	r7, #64	@ 0x40
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b08c      	sub	sp, #48	@ 0x30
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009190:	2300      	movs	r3, #0
 8009192:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10b      	bne.n	80091b6 <xQueueReceive+0x32>
	__asm volatile
 800919e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	623b      	str	r3, [r7, #32]
}
 80091b0:	bf00      	nop
 80091b2:	bf00      	nop
 80091b4:	e7fd      	b.n	80091b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d103      	bne.n	80091c4 <xQueueReceive+0x40>
 80091bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d101      	bne.n	80091c8 <xQueueReceive+0x44>
 80091c4:	2301      	movs	r3, #1
 80091c6:	e000      	b.n	80091ca <xQueueReceive+0x46>
 80091c8:	2300      	movs	r3, #0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10b      	bne.n	80091e6 <xQueueReceive+0x62>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	61fb      	str	r3, [r7, #28]
}
 80091e0:	bf00      	nop
 80091e2:	bf00      	nop
 80091e4:	e7fd      	b.n	80091e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80091e6:	f001 f837 	bl	800a258 <xTaskGetSchedulerState>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d102      	bne.n	80091f6 <xQueueReceive+0x72>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <xQueueReceive+0x76>
 80091f6:	2301      	movs	r3, #1
 80091f8:	e000      	b.n	80091fc <xQueueReceive+0x78>
 80091fa:	2300      	movs	r3, #0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10b      	bne.n	8009218 <xQueueReceive+0x94>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	61bb      	str	r3, [r7, #24]
}
 8009212:	bf00      	nop
 8009214:	bf00      	nop
 8009216:	e7fd      	b.n	8009214 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009218:	f001 fd8e 	bl	800ad38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800921c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009220:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009224:	2b00      	cmp	r3, #0
 8009226:	d014      	beq.n	8009252 <xQueueReceive+0xce>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009228:	68b9      	ldr	r1, [r7, #8]
 800922a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800922c:	f000 f8ec 	bl	8009408 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009232:	1e5a      	subs	r2, r3, #1
 8009234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009236:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d004      	beq.n	800924a <xQueueReceive+0xc6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009242:	3310      	adds	r3, #16
 8009244:	4618      	mov	r0, r3
 8009246:	f000 fe47 	bl	8009ed8 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800924a:	f001 fda7 	bl	800ad9c <vPortExitCritical>
				return pdPASS;
 800924e:	2301      	movs	r3, #1
 8009250:	e069      	b.n	8009326 <xQueueReceive+0x1a2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d103      	bne.n	8009260 <xQueueReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009258:	f001 fda0 	bl	800ad9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800925c:	2300      	movs	r3, #0
 800925e:	e062      	b.n	8009326 <xQueueReceive+0x1a2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009262:	2b00      	cmp	r3, #0
 8009264:	d106      	bne.n	8009274 <xQueueReceive+0xf0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009266:	f107 0310 	add.w	r3, r7, #16
 800926a:	4618      	mov	r0, r3
 800926c:	f000 fe98 	bl	8009fa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009270:	2301      	movs	r3, #1
 8009272:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009274:	f001 fd92 	bl	800ad9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009278:	f000 fc1e 	bl	8009ab8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800927c:	f001 fd5c 	bl	800ad38 <vPortEnterCritical>
 8009280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009282:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009286:	b25b      	sxtb	r3, r3
 8009288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800928c:	d103      	bne.n	8009296 <xQueueReceive+0x112>
 800928e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009290:	2200      	movs	r2, #0
 8009292:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009298:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800929c:	b25b      	sxtb	r3, r3
 800929e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a2:	d103      	bne.n	80092ac <xQueueReceive+0x128>
 80092a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a6:	2200      	movs	r2, #0
 80092a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092ac:	f001 fd76 	bl	800ad9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80092b0:	1d3a      	adds	r2, r7, #4
 80092b2:	f107 0310 	add.w	r3, r7, #16
 80092b6:	4611      	mov	r1, r2
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 fe87 	bl	8009fcc <xTaskCheckForTimeOut>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d123      	bne.n	800930c <xQueueReceive+0x188>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092c6:	f000 f917 	bl	80094f8 <prvIsQueueEmpty>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d017      	beq.n	8009300 <xQueueReceive+0x17c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80092d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d2:	3324      	adds	r3, #36	@ 0x24
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	4611      	mov	r1, r2
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 fdab 	bl	8009e34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80092de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092e0:	f000 f8b8 	bl	8009454 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80092e4:	f000 fbf6 	bl	8009ad4 <xTaskResumeAll>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d194      	bne.n	8009218 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80092ee:	4b10      	ldr	r3, [pc, #64]	@ (8009330 <xQueueReceive+0x1ac>)
 80092f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092f4:	601a      	str	r2, [r3, #0]
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	e78b      	b.n	8009218 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009300:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009302:	f000 f8a7 	bl	8009454 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009306:	f000 fbe5 	bl	8009ad4 <xTaskResumeAll>
 800930a:	e785      	b.n	8009218 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800930c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800930e:	f000 f8a1 	bl	8009454 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009312:	f000 fbdf 	bl	8009ad4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009316:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009318:	f000 f8ee 	bl	80094f8 <prvIsQueueEmpty>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	f43f af7a 	beq.w	8009218 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009324:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009326:	4618      	mov	r0, r3
 8009328:	3730      	adds	r7, #48	@ 0x30
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	e000ed04 	.word	0xe000ed04

08009334 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009340:	2300      	movs	r3, #0
 8009342:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009348:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10d      	bne.n	800936e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d14d      	bne.n	80093f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	4618      	mov	r0, r3
 8009360:	f000 ff98 	bl	800a294 <xTaskPriorityDisinherit>
 8009364:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	609a      	str	r2, [r3, #8]
 800936c:	e043      	b.n	80093f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d119      	bne.n	80093a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6858      	ldr	r0, [r3, #4]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937c:	461a      	mov	r2, r3
 800937e:	68b9      	ldr	r1, [r7, #8]
 8009380:	f002 f86e 	bl	800b460 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	685a      	ldr	r2, [r3, #4]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800938c:	441a      	add	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	429a      	cmp	r2, r3
 800939c:	d32b      	bcc.n	80093f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	605a      	str	r2, [r3, #4]
 80093a6:	e026      	b.n	80093f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	68d8      	ldr	r0, [r3, #12]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b0:	461a      	mov	r2, r3
 80093b2:	68b9      	ldr	r1, [r7, #8]
 80093b4:	f002 f854 	bl	800b460 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	68da      	ldr	r2, [r3, #12]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093c0:	425b      	negs	r3, r3
 80093c2:	441a      	add	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	68da      	ldr	r2, [r3, #12]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d207      	bcs.n	80093e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093dc:	425b      	negs	r3, r3
 80093de:	441a      	add	r2, r3
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d105      	bne.n	80093f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80093fe:	697b      	ldr	r3, [r7, #20]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009416:	2b00      	cmp	r3, #0
 8009418:	d018      	beq.n	800944c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	68da      	ldr	r2, [r3, #12]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009422:	441a      	add	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	68da      	ldr	r2, [r3, #12]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	429a      	cmp	r2, r3
 8009432:	d303      	bcc.n	800943c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	68d9      	ldr	r1, [r3, #12]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009444:	461a      	mov	r2, r3
 8009446:	6838      	ldr	r0, [r7, #0]
 8009448:	f002 f80a 	bl	800b460 <memcpy>
	}
}
 800944c:	bf00      	nop
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800945c:	f001 fc6c 	bl	800ad38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009466:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009468:	e011      	b.n	800948e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800946e:	2b00      	cmp	r3, #0
 8009470:	d012      	beq.n	8009498 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	3324      	adds	r3, #36	@ 0x24
 8009476:	4618      	mov	r0, r3
 8009478:	f000 fd2e 	bl	8009ed8 <xTaskRemoveFromEventList>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009482:	f000 fe07 	bl	800a094 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009486:	7bfb      	ldrb	r3, [r7, #15]
 8009488:	3b01      	subs	r3, #1
 800948a:	b2db      	uxtb	r3, r3
 800948c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800948e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009492:	2b00      	cmp	r3, #0
 8009494:	dce9      	bgt.n	800946a <prvUnlockQueue+0x16>
 8009496:	e000      	b.n	800949a <prvUnlockQueue+0x46>
					break;
 8009498:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	22ff      	movs	r2, #255	@ 0xff
 800949e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80094a2:	f001 fc7b 	bl	800ad9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80094a6:	f001 fc47 	bl	800ad38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094b2:	e011      	b.n	80094d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d012      	beq.n	80094e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	3310      	adds	r3, #16
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 fd09 	bl	8009ed8 <xTaskRemoveFromEventList>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d001      	beq.n	80094d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80094cc:	f000 fde2 	bl	800a094 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80094d0:	7bbb      	ldrb	r3, [r7, #14]
 80094d2:	3b01      	subs	r3, #1
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	dce9      	bgt.n	80094b4 <prvUnlockQueue+0x60>
 80094e0:	e000      	b.n	80094e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80094e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	22ff      	movs	r2, #255	@ 0xff
 80094e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80094ec:	f001 fc56 	bl	800ad9c <vPortExitCritical>
}
 80094f0:	bf00      	nop
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009500:	f001 fc1a 	bl	800ad38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009508:	2b00      	cmp	r3, #0
 800950a:	d102      	bne.n	8009512 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800950c:	2301      	movs	r3, #1
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	e001      	b.n	8009516 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009516:	f001 fc41 	bl	800ad9c <vPortExitCritical>

	return xReturn;
 800951a:	68fb      	ldr	r3, [r7, #12]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800952c:	f001 fc04 	bl	800ad38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009538:	429a      	cmp	r2, r3
 800953a:	d102      	bne.n	8009542 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800953c:	2301      	movs	r3, #1
 800953e:	60fb      	str	r3, [r7, #12]
 8009540:	e001      	b.n	8009546 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009542:	2300      	movs	r3, #0
 8009544:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009546:	f001 fc29 	bl	800ad9c <vPortExitCritical>

	return xReturn;
 800954a:	68fb      	ldr	r3, [r7, #12]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	e014      	b.n	800958e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009564:	4a0f      	ldr	r2, [pc, #60]	@ (80095a4 <vQueueAddToRegistry+0x50>)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10b      	bne.n	8009588 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009570:	490c      	ldr	r1, [pc, #48]	@ (80095a4 <vQueueAddToRegistry+0x50>)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800957a:	4a0a      	ldr	r2, [pc, #40]	@ (80095a4 <vQueueAddToRegistry+0x50>)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	4413      	add	r3, r2
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009586:	e006      	b.n	8009596 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	3301      	adds	r3, #1
 800958c:	60fb      	str	r3, [r7, #12]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b07      	cmp	r3, #7
 8009592:	d9e7      	bls.n	8009564 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009594:	bf00      	nop
 8009596:	bf00      	nop
 8009598:	3714      	adds	r7, #20
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	20000d8c 	.word	0x20000d8c

080095a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80095b8:	f001 fbbe 	bl	800ad38 <vPortEnterCritical>
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095c2:	b25b      	sxtb	r3, r3
 80095c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c8:	d103      	bne.n	80095d2 <vQueueWaitForMessageRestricted+0x2a>
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095d8:	b25b      	sxtb	r3, r3
 80095da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095de:	d103      	bne.n	80095e8 <vQueueWaitForMessageRestricted+0x40>
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095e8:	f001 fbd8 	bl	800ad9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d106      	bne.n	8009602 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	3324      	adds	r3, #36	@ 0x24
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	68b9      	ldr	r1, [r7, #8]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 fc3f 	bl	8009e80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009602:	6978      	ldr	r0, [r7, #20]
 8009604:	f7ff ff26 	bl	8009454 <prvUnlockQueue>
	}
 8009608:	bf00      	nop
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009610:	b580      	push	{r7, lr}
 8009612:	b08e      	sub	sp, #56	@ 0x38
 8009614:	af04      	add	r7, sp, #16
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
 800961c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800961e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10b      	bne.n	800963c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	623b      	str	r3, [r7, #32]
}
 8009636:	bf00      	nop
 8009638:	bf00      	nop
 800963a:	e7fd      	b.n	8009638 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800963c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10b      	bne.n	800965a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	61fb      	str	r3, [r7, #28]
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop
 8009658:	e7fd      	b.n	8009656 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800965a:	23a8      	movs	r3, #168	@ 0xa8
 800965c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	2ba8      	cmp	r3, #168	@ 0xa8
 8009662:	d00b      	beq.n	800967c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009668:	f383 8811 	msr	BASEPRI, r3
 800966c:	f3bf 8f6f 	isb	sy
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	61bb      	str	r3, [r7, #24]
}
 8009676:	bf00      	nop
 8009678:	bf00      	nop
 800967a:	e7fd      	b.n	8009678 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800967c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800967e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009680:	2b00      	cmp	r3, #0
 8009682:	d01e      	beq.n	80096c2 <xTaskCreateStatic+0xb2>
 8009684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009686:	2b00      	cmp	r3, #0
 8009688:	d01b      	beq.n	80096c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800968a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800968e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009690:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009692:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009696:	2202      	movs	r2, #2
 8009698:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800969c:	2300      	movs	r3, #0
 800969e:	9303      	str	r3, [sp, #12]
 80096a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a2:	9302      	str	r3, [sp, #8]
 80096a4:	f107 0314 	add.w	r3, r7, #20
 80096a8:	9301      	str	r3, [sp, #4]
 80096aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	68b9      	ldr	r1, [r7, #8]
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f000 f851 	bl	800975c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80096bc:	f000 f8f6 	bl	80098ac <prvAddNewTaskToReadyList>
 80096c0:	e001      	b.n	80096c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80096c2:	2300      	movs	r3, #0
 80096c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80096c6:	697b      	ldr	r3, [r7, #20]
	}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3728      	adds	r7, #40	@ 0x28
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b08c      	sub	sp, #48	@ 0x30
 80096d4:	af04      	add	r7, sp, #16
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	603b      	str	r3, [r7, #0]
 80096dc:	4613      	mov	r3, r2
 80096de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80096e0:	88fb      	ldrh	r3, [r7, #6]
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4618      	mov	r0, r3
 80096e6:	f001 fc49 	bl	800af7c <pvPortMalloc>
 80096ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00e      	beq.n	8009710 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80096f2:	20a8      	movs	r0, #168	@ 0xa8
 80096f4:	f001 fc42 	bl	800af7c <pvPortMalloc>
 80096f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d003      	beq.n	8009708 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	631a      	str	r2, [r3, #48]	@ 0x30
 8009706:	e005      	b.n	8009714 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009708:	6978      	ldr	r0, [r7, #20]
 800970a:	f001 fd05 	bl	800b118 <vPortFree>
 800970e:	e001      	b.n	8009714 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009710:	2300      	movs	r3, #0
 8009712:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d017      	beq.n	800974a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009722:	88fa      	ldrh	r2, [r7, #6]
 8009724:	2300      	movs	r3, #0
 8009726:	9303      	str	r3, [sp, #12]
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	9302      	str	r3, [sp, #8]
 800972c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800972e:	9301      	str	r3, [sp, #4]
 8009730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	68b9      	ldr	r1, [r7, #8]
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f000 f80f 	bl	800975c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800973e:	69f8      	ldr	r0, [r7, #28]
 8009740:	f000 f8b4 	bl	80098ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009744:	2301      	movs	r3, #1
 8009746:	61bb      	str	r3, [r7, #24]
 8009748:	e002      	b.n	8009750 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800974a:	f04f 33ff 	mov.w	r3, #4294967295
 800974e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009750:	69bb      	ldr	r3, [r7, #24]
	}
 8009752:	4618      	mov	r0, r3
 8009754:	3720      	adds	r7, #32
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
	...

0800975c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b088      	sub	sp, #32
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	607a      	str	r2, [r7, #4]
 8009768:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800976a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	461a      	mov	r2, r3
 8009774:	21a5      	movs	r1, #165	@ 0xa5
 8009776:	f001 fdef 	bl	800b358 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800977a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009784:	3b01      	subs	r3, #1
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	4413      	add	r3, r2
 800978a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	f023 0307 	bic.w	r3, r3, #7
 8009792:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	f003 0307 	and.w	r3, r3, #7
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00b      	beq.n	80097b6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	617b      	str	r3, [r7, #20]
}
 80097b0:	bf00      	nop
 80097b2:	bf00      	nop
 80097b4:	e7fd      	b.n	80097b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d01f      	beq.n	80097fc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097bc:	2300      	movs	r3, #0
 80097be:	61fb      	str	r3, [r7, #28]
 80097c0:	e012      	b.n	80097e8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	4413      	add	r3, r2
 80097c8:	7819      	ldrb	r1, [r3, #0]
 80097ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	4413      	add	r3, r2
 80097d0:	3334      	adds	r3, #52	@ 0x34
 80097d2:	460a      	mov	r2, r1
 80097d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	4413      	add	r3, r2
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d006      	beq.n	80097f0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	3301      	adds	r3, #1
 80097e6:	61fb      	str	r3, [r7, #28]
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	2b0f      	cmp	r3, #15
 80097ec:	d9e9      	bls.n	80097c2 <prvInitialiseNewTask+0x66>
 80097ee:	e000      	b.n	80097f2 <prvInitialiseNewTask+0x96>
			{
				break;
 80097f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80097f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80097fa:	e003      	b.n	8009804 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80097fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009806:	2b37      	cmp	r3, #55	@ 0x37
 8009808:	d901      	bls.n	800980e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800980a:	2337      	movs	r3, #55	@ 0x37
 800980c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800980e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009810:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009812:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009818:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800981a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981c:	2200      	movs	r2, #0
 800981e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009822:	3304      	adds	r3, #4
 8009824:	4618      	mov	r0, r3
 8009826:	f7ff f995 	bl	8008b54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800982a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982c:	3318      	adds	r3, #24
 800982e:	4618      	mov	r0, r3
 8009830:	f7ff f990 	bl	8008b54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009838:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800983a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800983c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009842:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009848:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800984a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984c:	2200      	movs	r2, #0
 800984e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009854:	2200      	movs	r2, #0
 8009856:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800985a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985c:	3354      	adds	r3, #84	@ 0x54
 800985e:	224c      	movs	r2, #76	@ 0x4c
 8009860:	2100      	movs	r1, #0
 8009862:	4618      	mov	r0, r3
 8009864:	f001 fd78 	bl	800b358 <memset>
 8009868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986a:	4a0d      	ldr	r2, [pc, #52]	@ (80098a0 <prvInitialiseNewTask+0x144>)
 800986c:	659a      	str	r2, [r3, #88]	@ 0x58
 800986e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009870:	4a0c      	ldr	r2, [pc, #48]	@ (80098a4 <prvInitialiseNewTask+0x148>)
 8009872:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009876:	4a0c      	ldr	r2, [pc, #48]	@ (80098a8 <prvInitialiseNewTask+0x14c>)
 8009878:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800987a:	683a      	ldr	r2, [r7, #0]
 800987c:	68f9      	ldr	r1, [r7, #12]
 800987e:	69b8      	ldr	r0, [r7, #24]
 8009880:	f001 f926 	bl	800aad0 <pxPortInitialiseStack>
 8009884:	4602      	mov	r2, r0
 8009886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009888:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800988a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800988c:	2b00      	cmp	r3, #0
 800988e:	d002      	beq.n	8009896 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009896:	bf00      	nop
 8009898:	3720      	adds	r7, #32
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	20002020 	.word	0x20002020
 80098a4:	20002088 	.word	0x20002088
 80098a8:	200020f0 	.word	0x200020f0

080098ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80098b4:	f001 fa40 	bl	800ad38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80098b8:	4b26      	ldr	r3, [pc, #152]	@ (8009954 <prvAddNewTaskToReadyList+0xa8>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	3301      	adds	r3, #1
 80098be:	4a25      	ldr	r2, [pc, #148]	@ (8009954 <prvAddNewTaskToReadyList+0xa8>)
 80098c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80098c2:	4b25      	ldr	r3, [pc, #148]	@ (8009958 <prvAddNewTaskToReadyList+0xac>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d109      	bne.n	80098de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80098ca:	4a23      	ldr	r2, [pc, #140]	@ (8009958 <prvAddNewTaskToReadyList+0xac>)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80098d0:	4b20      	ldr	r3, [pc, #128]	@ (8009954 <prvAddNewTaskToReadyList+0xa8>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d110      	bne.n	80098fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80098d8:	f000 fbfa 	bl	800a0d0 <prvInitialiseTaskLists>
 80098dc:	e00d      	b.n	80098fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80098de:	4b1f      	ldr	r3, [pc, #124]	@ (800995c <prvAddNewTaskToReadyList+0xb0>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d109      	bne.n	80098fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80098e6:	4b1c      	ldr	r3, [pc, #112]	@ (8009958 <prvAddNewTaskToReadyList+0xac>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d802      	bhi.n	80098fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80098f4:	4a18      	ldr	r2, [pc, #96]	@ (8009958 <prvAddNewTaskToReadyList+0xac>)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80098fa:	4b19      	ldr	r3, [pc, #100]	@ (8009960 <prvAddNewTaskToReadyList+0xb4>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3301      	adds	r3, #1
 8009900:	4a17      	ldr	r2, [pc, #92]	@ (8009960 <prvAddNewTaskToReadyList+0xb4>)
 8009902:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009904:	4b16      	ldr	r3, [pc, #88]	@ (8009960 <prvAddNewTaskToReadyList+0xb4>)
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009910:	4b14      	ldr	r3, [pc, #80]	@ (8009964 <prvAddNewTaskToReadyList+0xb8>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	429a      	cmp	r2, r3
 8009916:	d903      	bls.n	8009920 <prvAddNewTaskToReadyList+0x74>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991c:	4a11      	ldr	r2, [pc, #68]	@ (8009964 <prvAddNewTaskToReadyList+0xb8>)
 800991e:	6013      	str	r3, [r2, #0]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009924:	4613      	mov	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4a0e      	ldr	r2, [pc, #56]	@ (8009968 <prvAddNewTaskToReadyList+0xbc>)
 800992e:	441a      	add	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	3304      	adds	r3, #4
 8009934:	4619      	mov	r1, r3
 8009936:	4610      	mov	r0, r2
 8009938:	f7ff f919 	bl	8008b6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800993c:	f001 fa2e 	bl	800ad9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009940:	4b06      	ldr	r3, [pc, #24]	@ (800995c <prvAddNewTaskToReadyList+0xb0>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d001      	beq.n	800994c <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009948:	4b03      	ldr	r3, [pc, #12]	@ (8009958 <prvAddNewTaskToReadyList+0xac>)
 800994a:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800994c:	bf00      	nop
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	200012a0 	.word	0x200012a0
 8009958:	20000dcc 	.word	0x20000dcc
 800995c:	200012ac 	.word	0x200012ac
 8009960:	200012bc 	.word	0x200012bc
 8009964:	200012a8 	.word	0x200012a8
 8009968:	20000dd0 	.word	0x20000dd0

0800996c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009974:	2300      	movs	r3, #0
 8009976:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d018      	beq.n	80099b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800997e:	4b14      	ldr	r3, [pc, #80]	@ (80099d0 <vTaskDelay+0x64>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00b      	beq.n	800999e <vTaskDelay+0x32>
	__asm volatile
 8009986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800998a:	f383 8811 	msr	BASEPRI, r3
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	f3bf 8f4f 	dsb	sy
 8009996:	60bb      	str	r3, [r7, #8]
}
 8009998:	bf00      	nop
 800999a:	bf00      	nop
 800999c:	e7fd      	b.n	800999a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800999e:	f000 f88b 	bl	8009ab8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80099a2:	2100      	movs	r1, #0
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fce5 	bl	800a374 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80099aa:	f000 f893 	bl	8009ad4 <xTaskResumeAll>
 80099ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d107      	bne.n	80099c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80099b6:	4b07      	ldr	r3, [pc, #28]	@ (80099d4 <vTaskDelay+0x68>)
 80099b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099c6:	bf00      	nop
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	200012c8 	.word	0x200012c8
 80099d4:	e000ed04 	.word	0xe000ed04

080099d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b08a      	sub	sp, #40	@ 0x28
 80099dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80099de:	2300      	movs	r3, #0
 80099e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80099e2:	2300      	movs	r3, #0
 80099e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80099e6:	463a      	mov	r2, r7
 80099e8:	1d39      	adds	r1, r7, #4
 80099ea:	f107 0308 	add.w	r3, r7, #8
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7ff f85c 	bl	8008aac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80099f4:	6839      	ldr	r1, [r7, #0]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	9202      	str	r2, [sp, #8]
 80099fc:	9301      	str	r3, [sp, #4]
 80099fe:	2300      	movs	r3, #0
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	2300      	movs	r3, #0
 8009a04:	460a      	mov	r2, r1
 8009a06:	4924      	ldr	r1, [pc, #144]	@ (8009a98 <vTaskStartScheduler+0xc0>)
 8009a08:	4824      	ldr	r0, [pc, #144]	@ (8009a9c <vTaskStartScheduler+0xc4>)
 8009a0a:	f7ff fe01 	bl	8009610 <xTaskCreateStatic>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	4a23      	ldr	r2, [pc, #140]	@ (8009aa0 <vTaskStartScheduler+0xc8>)
 8009a12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009a14:	4b22      	ldr	r3, [pc, #136]	@ (8009aa0 <vTaskStartScheduler+0xc8>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d002      	beq.n	8009a22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	617b      	str	r3, [r7, #20]
 8009a20:	e001      	b.n	8009a26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009a22:	2300      	movs	r3, #0
 8009a24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d102      	bne.n	8009a32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009a2c:	f000 fcf6 	bl	800a41c <xTimerCreateTimerTask>
 8009a30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d11b      	bne.n	8009a70 <vTaskStartScheduler+0x98>
	__asm volatile
 8009a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	613b      	str	r3, [r7, #16]
}
 8009a4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009a4c:	4b15      	ldr	r3, [pc, #84]	@ (8009aa4 <vTaskStartScheduler+0xcc>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	3354      	adds	r3, #84	@ 0x54
 8009a52:	4a15      	ldr	r2, [pc, #84]	@ (8009aa8 <vTaskStartScheduler+0xd0>)
 8009a54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009a56:	4b15      	ldr	r3, [pc, #84]	@ (8009aac <vTaskStartScheduler+0xd4>)
 8009a58:	f04f 32ff 	mov.w	r2, #4294967295
 8009a5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a5e:	4b14      	ldr	r3, [pc, #80]	@ (8009ab0 <vTaskStartScheduler+0xd8>)
 8009a60:	2201      	movs	r2, #1
 8009a62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a64:	4b13      	ldr	r3, [pc, #76]	@ (8009ab4 <vTaskStartScheduler+0xdc>)
 8009a66:	2200      	movs	r2, #0
 8009a68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a6a:	f001 f8c1 	bl	800abf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a6e:	e00f      	b.n	8009a90 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a76:	d10b      	bne.n	8009a90 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	60fb      	str	r3, [r7, #12]
}
 8009a8a:	bf00      	nop
 8009a8c:	bf00      	nop
 8009a8e:	e7fd      	b.n	8009a8c <vTaskStartScheduler+0xb4>
}
 8009a90:	bf00      	nop
 8009a92:	3718      	adds	r7, #24
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	0800b57c 	.word	0x0800b57c
 8009a9c:	0800a0ad 	.word	0x0800a0ad
 8009aa0:	200012c4 	.word	0x200012c4
 8009aa4:	20000dcc 	.word	0x20000dcc
 8009aa8:	20000014 	.word	0x20000014
 8009aac:	200012c0 	.word	0x200012c0
 8009ab0:	200012ac 	.word	0x200012ac
 8009ab4:	200012a4 	.word	0x200012a4

08009ab8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ab8:	b480      	push	{r7}
 8009aba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009abc:	4b04      	ldr	r3, [pc, #16]	@ (8009ad0 <vTaskSuspendAll+0x18>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	4a03      	ldr	r2, [pc, #12]	@ (8009ad0 <vTaskSuspendAll+0x18>)
 8009ac4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009ac6:	bf00      	nop
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	200012c8 	.word	0x200012c8

08009ad4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009ada:	2300      	movs	r3, #0
 8009adc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009ae2:	4b3c      	ldr	r3, [pc, #240]	@ (8009bd4 <xTaskResumeAll+0x100>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10b      	bne.n	8009b02 <xTaskResumeAll+0x2e>
	__asm volatile
 8009aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aee:	f383 8811 	msr	BASEPRI, r3
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	603b      	str	r3, [r7, #0]
}
 8009afc:	bf00      	nop
 8009afe:	bf00      	nop
 8009b00:	e7fd      	b.n	8009afe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b02:	f001 f919 	bl	800ad38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b06:	4b33      	ldr	r3, [pc, #204]	@ (8009bd4 <xTaskResumeAll+0x100>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	4a31      	ldr	r2, [pc, #196]	@ (8009bd4 <xTaskResumeAll+0x100>)
 8009b0e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b10:	4b30      	ldr	r3, [pc, #192]	@ (8009bd4 <xTaskResumeAll+0x100>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d156      	bne.n	8009bc6 <xTaskResumeAll+0xf2>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b18:	4b2f      	ldr	r3, [pc, #188]	@ (8009bd8 <xTaskResumeAll+0x104>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d052      	beq.n	8009bc6 <xTaskResumeAll+0xf2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b20:	e02f      	b.n	8009b82 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b22:	4b2e      	ldr	r3, [pc, #184]	@ (8009bdc <xTaskResumeAll+0x108>)
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	3318      	adds	r3, #24
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7ff f87a 	bl	8008c28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3304      	adds	r3, #4
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7ff f875 	bl	8008c28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b42:	4b27      	ldr	r3, [pc, #156]	@ (8009be0 <xTaskResumeAll+0x10c>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d903      	bls.n	8009b52 <xTaskResumeAll+0x7e>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b4e:	4a24      	ldr	r2, [pc, #144]	@ (8009be0 <xTaskResumeAll+0x10c>)
 8009b50:	6013      	str	r3, [r2, #0]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b56:	4613      	mov	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4413      	add	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4a21      	ldr	r2, [pc, #132]	@ (8009be4 <xTaskResumeAll+0x110>)
 8009b60:	441a      	add	r2, r3
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	3304      	adds	r3, #4
 8009b66:	4619      	mov	r1, r3
 8009b68:	4610      	mov	r0, r2
 8009b6a:	f7ff f800 	bl	8008b6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b72:	4b1d      	ldr	r3, [pc, #116]	@ (8009be8 <xTaskResumeAll+0x114>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d302      	bcc.n	8009b82 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8009bec <xTaskResumeAll+0x118>)
 8009b7e:	2201      	movs	r2, #1
 8009b80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b82:	4b16      	ldr	r3, [pc, #88]	@ (8009bdc <xTaskResumeAll+0x108>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1cb      	bne.n	8009b22 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b90:	f000 fb42 	bl	800a218 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009b94:	4b16      	ldr	r3, [pc, #88]	@ (8009bf0 <xTaskResumeAll+0x11c>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d010      	beq.n	8009bc2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ba0:	f000 f84a 	bl	8009c38 <xTaskIncrementTick>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d002      	beq.n	8009bb0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009baa:	4b10      	ldr	r3, [pc, #64]	@ (8009bec <xTaskResumeAll+0x118>)
 8009bac:	2201      	movs	r2, #1
 8009bae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1f1      	bne.n	8009ba0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8009bf0 <xTaskResumeAll+0x11c>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8009bec <xTaskResumeAll+0x118>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009bc6:	f001 f8e9 	bl	800ad9c <vPortExitCritical>

	return xAlreadyYielded;
 8009bca:	687b      	ldr	r3, [r7, #4]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	200012c8 	.word	0x200012c8
 8009bd8:	200012a0 	.word	0x200012a0
 8009bdc:	20001260 	.word	0x20001260
 8009be0:	200012a8 	.word	0x200012a8
 8009be4:	20000dd0 	.word	0x20000dd0
 8009be8:	20000dcc 	.word	0x20000dcc
 8009bec:	200012b4 	.word	0x200012b4
 8009bf0:	200012b0 	.word	0x200012b0

08009bf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009bfa:	4b05      	ldr	r3, [pc, #20]	@ (8009c10 <xTaskGetTickCount+0x1c>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009c00:	687b      	ldr	r3, [r7, #4]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	370c      	adds	r7, #12
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	200012a4 	.word	0x200012a4

08009c14 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c1a:	f001 f96d 	bl	800aef8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009c1e:	2300      	movs	r3, #0
 8009c20:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009c22:	4b04      	ldr	r3, [pc, #16]	@ (8009c34 <xTaskGetTickCountFromISR+0x20>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c28:	683b      	ldr	r3, [r7, #0]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	200012a4 	.word	0x200012a4

08009c38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b086      	sub	sp, #24
 8009c3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c42:	4b40      	ldr	r3, [pc, #256]	@ (8009d44 <xTaskIncrementTick+0x10c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d171      	bne.n	8009d2e <xTaskIncrementTick+0xf6>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8009d48 <xTaskIncrementTick+0x110>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009c52:	4a3d      	ldr	r2, [pc, #244]	@ (8009d48 <xTaskIncrementTick+0x110>)
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d121      	bne.n	8009ca2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8009d4c <xTaskIncrementTick+0x114>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00b      	beq.n	8009c80 <xTaskIncrementTick+0x48>
	__asm volatile
 8009c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6c:	f383 8811 	msr	BASEPRI, r3
 8009c70:	f3bf 8f6f 	isb	sy
 8009c74:	f3bf 8f4f 	dsb	sy
 8009c78:	603b      	str	r3, [r7, #0]
}
 8009c7a:	bf00      	nop
 8009c7c:	bf00      	nop
 8009c7e:	e7fd      	b.n	8009c7c <xTaskIncrementTick+0x44>
 8009c80:	4b32      	ldr	r3, [pc, #200]	@ (8009d4c <xTaskIncrementTick+0x114>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	60fb      	str	r3, [r7, #12]
 8009c86:	4b32      	ldr	r3, [pc, #200]	@ (8009d50 <xTaskIncrementTick+0x118>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a30      	ldr	r2, [pc, #192]	@ (8009d4c <xTaskIncrementTick+0x114>)
 8009c8c:	6013      	str	r3, [r2, #0]
 8009c8e:	4a30      	ldr	r2, [pc, #192]	@ (8009d50 <xTaskIncrementTick+0x118>)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6013      	str	r3, [r2, #0]
 8009c94:	4b2f      	ldr	r3, [pc, #188]	@ (8009d54 <xTaskIncrementTick+0x11c>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	4a2e      	ldr	r2, [pc, #184]	@ (8009d54 <xTaskIncrementTick+0x11c>)
 8009c9c:	6013      	str	r3, [r2, #0]
 8009c9e:	f000 fabb 	bl	800a218 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8009d58 <xTaskIncrementTick+0x120>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	693a      	ldr	r2, [r7, #16]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d345      	bcc.n	8009d38 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cac:	4b27      	ldr	r3, [pc, #156]	@ (8009d4c <xTaskIncrementTick+0x114>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d104      	bne.n	8009cc0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cb6:	4b28      	ldr	r3, [pc, #160]	@ (8009d58 <xTaskIncrementTick+0x120>)
 8009cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cbc:	601a      	str	r2, [r3, #0]
					break;
 8009cbe:	e03b      	b.n	8009d38 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cc0:	4b22      	ldr	r3, [pc, #136]	@ (8009d4c <xTaskIncrementTick+0x114>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d203      	bcs.n	8009ce0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8009d58 <xTaskIncrementTick+0x120>)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009cde:	e02b      	b.n	8009d38 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	3304      	adds	r3, #4
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fe ff9f 	bl	8008c28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d004      	beq.n	8009cfc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	3318      	adds	r3, #24
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fe ff96 	bl	8008c28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d00:	4b16      	ldr	r3, [pc, #88]	@ (8009d5c <xTaskIncrementTick+0x124>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d903      	bls.n	8009d10 <xTaskIncrementTick+0xd8>
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d0c:	4a13      	ldr	r2, [pc, #76]	@ (8009d5c <xTaskIncrementTick+0x124>)
 8009d0e:	6013      	str	r3, [r2, #0]
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d14:	4613      	mov	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	4a10      	ldr	r2, [pc, #64]	@ (8009d60 <xTaskIncrementTick+0x128>)
 8009d1e:	441a      	add	r2, r3
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	3304      	adds	r3, #4
 8009d24:	4619      	mov	r1, r3
 8009d26:	4610      	mov	r0, r2
 8009d28:	f7fe ff21 	bl	8008b6e <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d2c:	e7be      	b.n	8009cac <xTaskIncrementTick+0x74>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d64 <xTaskIncrementTick+0x12c>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3301      	adds	r3, #1
 8009d34:	4a0b      	ldr	r2, [pc, #44]	@ (8009d64 <xTaskIncrementTick+0x12c>)
 8009d36:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009d38:	697b      	ldr	r3, [r7, #20]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	200012c8 	.word	0x200012c8
 8009d48:	200012a4 	.word	0x200012a4
 8009d4c:	20001258 	.word	0x20001258
 8009d50:	2000125c 	.word	0x2000125c
 8009d54:	200012b8 	.word	0x200012b8
 8009d58:	200012c0 	.word	0x200012c0
 8009d5c:	200012a8 	.word	0x200012a8
 8009d60:	20000dd0 	.word	0x20000dd0
 8009d64:	200012b0 	.word	0x200012b0

08009d68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8009e1c <vTaskSwitchContext+0xb4>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d76:	4b2a      	ldr	r3, [pc, #168]	@ (8009e20 <vTaskSwitchContext+0xb8>)
 8009d78:	2201      	movs	r2, #1
 8009d7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d7c:	e047      	b.n	8009e0e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009d7e:	4b28      	ldr	r3, [pc, #160]	@ (8009e20 <vTaskSwitchContext+0xb8>)
 8009d80:	2200      	movs	r2, #0
 8009d82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d84:	4b27      	ldr	r3, [pc, #156]	@ (8009e24 <vTaskSwitchContext+0xbc>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	60fb      	str	r3, [r7, #12]
 8009d8a:	e011      	b.n	8009db0 <vTaskSwitchContext+0x48>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d10b      	bne.n	8009daa <vTaskSwitchContext+0x42>
	__asm volatile
 8009d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	607b      	str	r3, [r7, #4]
}
 8009da4:	bf00      	nop
 8009da6:	bf00      	nop
 8009da8:	e7fd      	b.n	8009da6 <vTaskSwitchContext+0x3e>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	3b01      	subs	r3, #1
 8009dae:	60fb      	str	r3, [r7, #12]
 8009db0:	491d      	ldr	r1, [pc, #116]	@ (8009e28 <vTaskSwitchContext+0xc0>)
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	4613      	mov	r3, r2
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4413      	add	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	440b      	add	r3, r1
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d0e3      	beq.n	8009d8c <vTaskSwitchContext+0x24>
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4413      	add	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4a16      	ldr	r2, [pc, #88]	@ (8009e28 <vTaskSwitchContext+0xc0>)
 8009dd0:	4413      	add	r3, r2
 8009dd2:	60bb      	str	r3, [r7, #8]
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	605a      	str	r2, [r3, #4]
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	3308      	adds	r3, #8
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d104      	bne.n	8009df4 <vTaskSwitchContext+0x8c>
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	685a      	ldr	r2, [r3, #4]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	605a      	str	r2, [r3, #4]
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8009e2c <vTaskSwitchContext+0xc4>)
 8009dfc:	6013      	str	r3, [r2, #0]
 8009dfe:	4a09      	ldr	r2, [pc, #36]	@ (8009e24 <vTaskSwitchContext+0xbc>)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e04:	4b09      	ldr	r3, [pc, #36]	@ (8009e2c <vTaskSwitchContext+0xc4>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3354      	adds	r3, #84	@ 0x54
 8009e0a:	4a09      	ldr	r2, [pc, #36]	@ (8009e30 <vTaskSwitchContext+0xc8>)
 8009e0c:	6013      	str	r3, [r2, #0]
}
 8009e0e:	bf00      	nop
 8009e10:	3714      	adds	r7, #20
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	200012c8 	.word	0x200012c8
 8009e20:	200012b4 	.word	0x200012b4
 8009e24:	200012a8 	.word	0x200012a8
 8009e28:	20000dd0 	.word	0x20000dd0
 8009e2c:	20000dcc 	.word	0x20000dcc
 8009e30:	20000014 	.word	0x20000014

08009e34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10b      	bne.n	8009e5c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e48:	f383 8811 	msr	BASEPRI, r3
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	60fb      	str	r3, [r7, #12]
}
 8009e56:	bf00      	nop
 8009e58:	bf00      	nop
 8009e5a:	e7fd      	b.n	8009e58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e5c:	4b07      	ldr	r3, [pc, #28]	@ (8009e7c <vTaskPlaceOnEventList+0x48>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	3318      	adds	r3, #24
 8009e62:	4619      	mov	r1, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7fe fea6 	bl	8008bb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e6a:	2101      	movs	r1, #1
 8009e6c:	6838      	ldr	r0, [r7, #0]
 8009e6e:	f000 fa81 	bl	800a374 <prvAddCurrentTaskToDelayedList>
}
 8009e72:	bf00      	nop
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	20000dcc 	.word	0x20000dcc

08009e80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d10b      	bne.n	8009eaa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e96:	f383 8811 	msr	BASEPRI, r3
 8009e9a:	f3bf 8f6f 	isb	sy
 8009e9e:	f3bf 8f4f 	dsb	sy
 8009ea2:	617b      	str	r3, [r7, #20]
}
 8009ea4:	bf00      	nop
 8009ea6:	bf00      	nop
 8009ea8:	e7fd      	b.n	8009ea6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8009ed4 <vTaskPlaceOnEventListRestricted+0x54>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	3318      	adds	r3, #24
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f7fe fe5b 	bl	8008b6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d002      	beq.n	8009ec4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8009ec2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009ec4:	6879      	ldr	r1, [r7, #4]
 8009ec6:	68b8      	ldr	r0, [r7, #8]
 8009ec8:	f000 fa54 	bl	800a374 <prvAddCurrentTaskToDelayedList>
	}
 8009ecc:	bf00      	nop
 8009ece:	3718      	adds	r7, #24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	20000dcc 	.word	0x20000dcc

08009ed8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b086      	sub	sp, #24
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d10b      	bne.n	8009f06 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	60fb      	str	r3, [r7, #12]
}
 8009f00:	bf00      	nop
 8009f02:	bf00      	nop
 8009f04:	e7fd      	b.n	8009f02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	3318      	adds	r3, #24
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe fe8c 	bl	8008c28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f10:	4b1d      	ldr	r3, [pc, #116]	@ (8009f88 <xTaskRemoveFromEventList+0xb0>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d11d      	bne.n	8009f54 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fe fe83 	bl	8008c28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f26:	4b19      	ldr	r3, [pc, #100]	@ (8009f8c <xTaskRemoveFromEventList+0xb4>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d903      	bls.n	8009f36 <xTaskRemoveFromEventList+0x5e>
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f32:	4a16      	ldr	r2, [pc, #88]	@ (8009f8c <xTaskRemoveFromEventList+0xb4>)
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4a13      	ldr	r2, [pc, #76]	@ (8009f90 <xTaskRemoveFromEventList+0xb8>)
 8009f44:	441a      	add	r2, r3
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	3304      	adds	r3, #4
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	4610      	mov	r0, r2
 8009f4e:	f7fe fe0e 	bl	8008b6e <vListInsertEnd>
 8009f52:	e005      	b.n	8009f60 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	3318      	adds	r3, #24
 8009f58:	4619      	mov	r1, r3
 8009f5a:	480e      	ldr	r0, [pc, #56]	@ (8009f94 <xTaskRemoveFromEventList+0xbc>)
 8009f5c:	f7fe fe07 	bl	8008b6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f64:	4b0c      	ldr	r3, [pc, #48]	@ (8009f98 <xTaskRemoveFromEventList+0xc0>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d905      	bls.n	8009f7a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f72:	4b0a      	ldr	r3, [pc, #40]	@ (8009f9c <xTaskRemoveFromEventList+0xc4>)
 8009f74:	2201      	movs	r2, #1
 8009f76:	601a      	str	r2, [r3, #0]
 8009f78:	e001      	b.n	8009f7e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f7e:	697b      	ldr	r3, [r7, #20]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3718      	adds	r7, #24
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	200012c8 	.word	0x200012c8
 8009f8c:	200012a8 	.word	0x200012a8
 8009f90:	20000dd0 	.word	0x20000dd0
 8009f94:	20001260 	.word	0x20001260
 8009f98:	20000dcc 	.word	0x20000dcc
 8009f9c:	200012b4 	.word	0x200012b4

08009fa0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009fa8:	4b06      	ldr	r3, [pc, #24]	@ (8009fc4 <vTaskInternalSetTimeOutState+0x24>)
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009fb0:	4b05      	ldr	r3, [pc, #20]	@ (8009fc8 <vTaskInternalSetTimeOutState+0x28>)
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	605a      	str	r2, [r3, #4]
}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr
 8009fc4:	200012b8 	.word	0x200012b8
 8009fc8:	200012a4 	.word	0x200012a4

08009fcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b088      	sub	sp, #32
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10b      	bne.n	8009ff4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	613b      	str	r3, [r7, #16]
}
 8009fee:	bf00      	nop
 8009ff0:	bf00      	nop
 8009ff2:	e7fd      	b.n	8009ff0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10b      	bne.n	800a012 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	60fb      	str	r3, [r7, #12]
}
 800a00c:	bf00      	nop
 800a00e:	bf00      	nop
 800a010:	e7fd      	b.n	800a00e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a012:	f000 fe91 	bl	800ad38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a016:	4b1d      	ldr	r3, [pc, #116]	@ (800a08c <xTaskCheckForTimeOut+0xc0>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	69ba      	ldr	r2, [r7, #24]
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a02e:	d102      	bne.n	800a036 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a030:	2300      	movs	r3, #0
 800a032:	61fb      	str	r3, [r7, #28]
 800a034:	e023      	b.n	800a07e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	4b15      	ldr	r3, [pc, #84]	@ (800a090 <xTaskCheckForTimeOut+0xc4>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d007      	beq.n	800a052 <xTaskCheckForTimeOut+0x86>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	69ba      	ldr	r2, [r7, #24]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d302      	bcc.n	800a052 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a04c:	2301      	movs	r3, #1
 800a04e:	61fb      	str	r3, [r7, #28]
 800a050:	e015      	b.n	800a07e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d20b      	bcs.n	800a074 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	1ad2      	subs	r2, r2, r3
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f7ff ff99 	bl	8009fa0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a06e:	2300      	movs	r3, #0
 800a070:	61fb      	str	r3, [r7, #28]
 800a072:	e004      	b.n	800a07e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	2200      	movs	r2, #0
 800a078:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a07a:	2301      	movs	r3, #1
 800a07c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a07e:	f000 fe8d 	bl	800ad9c <vPortExitCritical>

	return xReturn;
 800a082:	69fb      	ldr	r3, [r7, #28]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3720      	adds	r7, #32
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	200012a4 	.word	0x200012a4
 800a090:	200012b8 	.word	0x200012b8

0800a094 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a094:	b480      	push	{r7}
 800a096:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a098:	4b03      	ldr	r3, [pc, #12]	@ (800a0a8 <vTaskMissedYield+0x14>)
 800a09a:	2201      	movs	r2, #1
 800a09c:	601a      	str	r2, [r3, #0]
}
 800a09e:	bf00      	nop
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr
 800a0a8:	200012b4 	.word	0x200012b4

0800a0ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a0b4:	f000 f84c 	bl	800a150 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800a0b8:	4b04      	ldr	r3, [pc, #16]	@ (800a0cc <prvIdleTask+0x20>)
 800a0ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0be:	601a      	str	r2, [r3, #0]
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0c8:	bf00      	nop
 800a0ca:	e7f3      	b.n	800a0b4 <prvIdleTask+0x8>
 800a0cc:	e000ed04 	.word	0xe000ed04

0800a0d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	607b      	str	r3, [r7, #4]
 800a0da:	e00c      	b.n	800a0f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4413      	add	r3, r2
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	4a12      	ldr	r2, [pc, #72]	@ (800a130 <prvInitialiseTaskLists+0x60>)
 800a0e8:	4413      	add	r3, r2
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fe fd12 	bl	8008b14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	607b      	str	r3, [r7, #4]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2b37      	cmp	r3, #55	@ 0x37
 800a0fa:	d9ef      	bls.n	800a0dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0fc:	480d      	ldr	r0, [pc, #52]	@ (800a134 <prvInitialiseTaskLists+0x64>)
 800a0fe:	f7fe fd09 	bl	8008b14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a102:	480d      	ldr	r0, [pc, #52]	@ (800a138 <prvInitialiseTaskLists+0x68>)
 800a104:	f7fe fd06 	bl	8008b14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a108:	480c      	ldr	r0, [pc, #48]	@ (800a13c <prvInitialiseTaskLists+0x6c>)
 800a10a:	f7fe fd03 	bl	8008b14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a10e:	480c      	ldr	r0, [pc, #48]	@ (800a140 <prvInitialiseTaskLists+0x70>)
 800a110:	f7fe fd00 	bl	8008b14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a114:	480b      	ldr	r0, [pc, #44]	@ (800a144 <prvInitialiseTaskLists+0x74>)
 800a116:	f7fe fcfd 	bl	8008b14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a11a:	4b0b      	ldr	r3, [pc, #44]	@ (800a148 <prvInitialiseTaskLists+0x78>)
 800a11c:	4a05      	ldr	r2, [pc, #20]	@ (800a134 <prvInitialiseTaskLists+0x64>)
 800a11e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a120:	4b0a      	ldr	r3, [pc, #40]	@ (800a14c <prvInitialiseTaskLists+0x7c>)
 800a122:	4a05      	ldr	r2, [pc, #20]	@ (800a138 <prvInitialiseTaskLists+0x68>)
 800a124:	601a      	str	r2, [r3, #0]
}
 800a126:	bf00      	nop
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	20000dd0 	.word	0x20000dd0
 800a134:	20001230 	.word	0x20001230
 800a138:	20001244 	.word	0x20001244
 800a13c:	20001260 	.word	0x20001260
 800a140:	20001274 	.word	0x20001274
 800a144:	2000128c 	.word	0x2000128c
 800a148:	20001258 	.word	0x20001258
 800a14c:	2000125c 	.word	0x2000125c

0800a150 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a156:	e019      	b.n	800a18c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a158:	f000 fdee 	bl	800ad38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a15c:	4b10      	ldr	r3, [pc, #64]	@ (800a1a0 <prvCheckTasksWaitingTermination+0x50>)
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	3304      	adds	r3, #4
 800a168:	4618      	mov	r0, r3
 800a16a:	f7fe fd5d 	bl	8008c28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a16e:	4b0d      	ldr	r3, [pc, #52]	@ (800a1a4 <prvCheckTasksWaitingTermination+0x54>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3b01      	subs	r3, #1
 800a174:	4a0b      	ldr	r2, [pc, #44]	@ (800a1a4 <prvCheckTasksWaitingTermination+0x54>)
 800a176:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a178:	4b0b      	ldr	r3, [pc, #44]	@ (800a1a8 <prvCheckTasksWaitingTermination+0x58>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3b01      	subs	r3, #1
 800a17e:	4a0a      	ldr	r2, [pc, #40]	@ (800a1a8 <prvCheckTasksWaitingTermination+0x58>)
 800a180:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a182:	f000 fe0b 	bl	800ad9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f810 	bl	800a1ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a18c:	4b06      	ldr	r3, [pc, #24]	@ (800a1a8 <prvCheckTasksWaitingTermination+0x58>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1e1      	bne.n	800a158 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop
 800a198:	3708      	adds	r7, #8
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	20001274 	.word	0x20001274
 800a1a4:	200012a0 	.word	0x200012a0
 800a1a8:	20001288 	.word	0x20001288

0800a1ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3354      	adds	r3, #84	@ 0x54
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f001 f8d5 	bl	800b368 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d108      	bne.n	800a1da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f000 ffa3 	bl	800b118 <vPortFree>
				vPortFree( pxTCB );
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 ffa0 	bl	800b118 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1d8:	e019      	b.n	800a20e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d103      	bne.n	800a1ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 ff97 	bl	800b118 <vPortFree>
	}
 800a1ea:	e010      	b.n	800a20e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d00b      	beq.n	800a20e <prvDeleteTCB+0x62>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	60fb      	str	r3, [r7, #12]
}
 800a208:	bf00      	nop
 800a20a:	bf00      	nop
 800a20c:	e7fd      	b.n	800a20a <prvDeleteTCB+0x5e>
	}
 800a20e:	bf00      	nop
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
	...

0800a218 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a21e:	4b0c      	ldr	r3, [pc, #48]	@ (800a250 <prvResetNextTaskUnblockTime+0x38>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d104      	bne.n	800a232 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a228:	4b0a      	ldr	r3, [pc, #40]	@ (800a254 <prvResetNextTaskUnblockTime+0x3c>)
 800a22a:	f04f 32ff 	mov.w	r2, #4294967295
 800a22e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a230:	e008      	b.n	800a244 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a232:	4b07      	ldr	r3, [pc, #28]	@ (800a250 <prvResetNextTaskUnblockTime+0x38>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	4a04      	ldr	r2, [pc, #16]	@ (800a254 <prvResetNextTaskUnblockTime+0x3c>)
 800a242:	6013      	str	r3, [r2, #0]
}
 800a244:	bf00      	nop
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr
 800a250:	20001258 	.word	0x20001258
 800a254:	200012c0 	.word	0x200012c0

0800a258 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a25e:	4b0b      	ldr	r3, [pc, #44]	@ (800a28c <xTaskGetSchedulerState+0x34>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d102      	bne.n	800a26c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a266:	2301      	movs	r3, #1
 800a268:	607b      	str	r3, [r7, #4]
 800a26a:	e008      	b.n	800a27e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a26c:	4b08      	ldr	r3, [pc, #32]	@ (800a290 <xTaskGetSchedulerState+0x38>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d102      	bne.n	800a27a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a274:	2302      	movs	r3, #2
 800a276:	607b      	str	r3, [r7, #4]
 800a278:	e001      	b.n	800a27e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a27a:	2300      	movs	r3, #0
 800a27c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a27e:	687b      	ldr	r3, [r7, #4]
	}
 800a280:	4618      	mov	r0, r3
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	200012ac 	.word	0x200012ac
 800a290:	200012c8 	.word	0x200012c8

0800a294 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d058      	beq.n	800a35c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a2aa:	4b2f      	ldr	r3, [pc, #188]	@ (800a368 <xTaskPriorityDisinherit+0xd4>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d00b      	beq.n	800a2cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	60fb      	str	r3, [r7, #12]
}
 800a2c6:	bf00      	nop
 800a2c8:	bf00      	nop
 800a2ca:	e7fd      	b.n	800a2c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10b      	bne.n	800a2ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	60bb      	str	r3, [r7, #8]
}
 800a2e6:	bf00      	nop
 800a2e8:	bf00      	nop
 800a2ea:	e7fd      	b.n	800a2e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2f0:	1e5a      	subs	r2, r3, #1
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d02c      	beq.n	800a35c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a306:	2b00      	cmp	r3, #0
 800a308:	d128      	bne.n	800a35c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	3304      	adds	r3, #4
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fe fc8a 	bl	8008c28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a320:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a32c:	4b0f      	ldr	r3, [pc, #60]	@ (800a36c <xTaskPriorityDisinherit+0xd8>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	429a      	cmp	r2, r3
 800a332:	d903      	bls.n	800a33c <xTaskPriorityDisinherit+0xa8>
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a338:	4a0c      	ldr	r2, [pc, #48]	@ (800a36c <xTaskPriorityDisinherit+0xd8>)
 800a33a:	6013      	str	r3, [r2, #0]
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a340:	4613      	mov	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	4a09      	ldr	r2, [pc, #36]	@ (800a370 <xTaskPriorityDisinherit+0xdc>)
 800a34a:	441a      	add	r2, r3
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	3304      	adds	r3, #4
 800a350:	4619      	mov	r1, r3
 800a352:	4610      	mov	r0, r2
 800a354:	f7fe fc0b 	bl	8008b6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a358:	2301      	movs	r3, #1
 800a35a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a35c:	697b      	ldr	r3, [r7, #20]
	}
 800a35e:	4618      	mov	r0, r3
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	20000dcc 	.word	0x20000dcc
 800a36c:	200012a8 	.word	0x200012a8
 800a370:	20000dd0 	.word	0x20000dd0

0800a374 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a37e:	4b21      	ldr	r3, [pc, #132]	@ (800a404 <prvAddCurrentTaskToDelayedList+0x90>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a384:	4b20      	ldr	r3, [pc, #128]	@ (800a408 <prvAddCurrentTaskToDelayedList+0x94>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	3304      	adds	r3, #4
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fe fc4c 	bl	8008c28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a396:	d10a      	bne.n	800a3ae <prvAddCurrentTaskToDelayedList+0x3a>
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d007      	beq.n	800a3ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a39e:	4b1a      	ldr	r3, [pc, #104]	@ (800a408 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	4819      	ldr	r0, [pc, #100]	@ (800a40c <prvAddCurrentTaskToDelayedList+0x98>)
 800a3a8:	f7fe fbe1 	bl	8008b6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a3ac:	e026      	b.n	800a3fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a3b6:	4b14      	ldr	r3, [pc, #80]	@ (800a408 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d209      	bcs.n	800a3da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3c6:	4b12      	ldr	r3, [pc, #72]	@ (800a410 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	4b0f      	ldr	r3, [pc, #60]	@ (800a408 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	3304      	adds	r3, #4
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	f7fe fbef 	bl	8008bb6 <vListInsert>
}
 800a3d8:	e010      	b.n	800a3fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3da:	4b0e      	ldr	r3, [pc, #56]	@ (800a414 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	4b0a      	ldr	r3, [pc, #40]	@ (800a408 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	3304      	adds	r3, #4
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	4610      	mov	r0, r2
 800a3e8:	f7fe fbe5 	bl	8008bb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a418 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d202      	bcs.n	800a3fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a3f6:	4a08      	ldr	r2, [pc, #32]	@ (800a418 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	6013      	str	r3, [r2, #0]
}
 800a3fc:	bf00      	nop
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	200012a4 	.word	0x200012a4
 800a408:	20000dcc 	.word	0x20000dcc
 800a40c:	2000128c 	.word	0x2000128c
 800a410:	2000125c 	.word	0x2000125c
 800a414:	20001258 	.word	0x20001258
 800a418:	200012c0 	.word	0x200012c0

0800a41c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b08a      	sub	sp, #40	@ 0x28
 800a420:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a422:	2300      	movs	r3, #0
 800a424:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a426:	f000 fb13 	bl	800aa50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a42a:	4b1d      	ldr	r3, [pc, #116]	@ (800a4a0 <xTimerCreateTimerTask+0x84>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d021      	beq.n	800a476 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a432:	2300      	movs	r3, #0
 800a434:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a436:	2300      	movs	r3, #0
 800a438:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a43a:	1d3a      	adds	r2, r7, #4
 800a43c:	f107 0108 	add.w	r1, r7, #8
 800a440:	f107 030c 	add.w	r3, r7, #12
 800a444:	4618      	mov	r0, r3
 800a446:	f7fe fb4b 	bl	8008ae0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a44a:	6879      	ldr	r1, [r7, #4]
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	9202      	str	r2, [sp, #8]
 800a452:	9301      	str	r3, [sp, #4]
 800a454:	2302      	movs	r3, #2
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	2300      	movs	r3, #0
 800a45a:	460a      	mov	r2, r1
 800a45c:	4911      	ldr	r1, [pc, #68]	@ (800a4a4 <xTimerCreateTimerTask+0x88>)
 800a45e:	4812      	ldr	r0, [pc, #72]	@ (800a4a8 <xTimerCreateTimerTask+0x8c>)
 800a460:	f7ff f8d6 	bl	8009610 <xTaskCreateStatic>
 800a464:	4603      	mov	r3, r0
 800a466:	4a11      	ldr	r2, [pc, #68]	@ (800a4ac <xTimerCreateTimerTask+0x90>)
 800a468:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a46a:	4b10      	ldr	r3, [pc, #64]	@ (800a4ac <xTimerCreateTimerTask+0x90>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a472:	2301      	movs	r3, #1
 800a474:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10b      	bne.n	800a494 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a480:	f383 8811 	msr	BASEPRI, r3
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	f3bf 8f4f 	dsb	sy
 800a48c:	613b      	str	r3, [r7, #16]
}
 800a48e:	bf00      	nop
 800a490:	bf00      	nop
 800a492:	e7fd      	b.n	800a490 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a494:	697b      	ldr	r3, [r7, #20]
}
 800a496:	4618      	mov	r0, r3
 800a498:	3718      	adds	r7, #24
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	200012fc 	.word	0x200012fc
 800a4a4:	0800b584 	.word	0x0800b584
 800a4a8:	0800a5e9 	.word	0x0800a5e9
 800a4ac:	20001300 	.word	0x20001300

0800a4b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b08a      	sub	sp, #40	@ 0x28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	607a      	str	r2, [r7, #4]
 800a4bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10b      	bne.n	800a4e0 <xTimerGenericCommand+0x30>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	623b      	str	r3, [r7, #32]
}
 800a4da:	bf00      	nop
 800a4dc:	bf00      	nop
 800a4de:	e7fd      	b.n	800a4dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a4e0:	4b19      	ldr	r3, [pc, #100]	@ (800a548 <xTimerGenericCommand+0x98>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d02a      	beq.n	800a53e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	2b05      	cmp	r3, #5
 800a4f8:	dc18      	bgt.n	800a52c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a4fa:	f7ff fead 	bl	800a258 <xTaskGetSchedulerState>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b02      	cmp	r3, #2
 800a502:	d109      	bne.n	800a518 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a504:	4b10      	ldr	r3, [pc, #64]	@ (800a548 <xTimerGenericCommand+0x98>)
 800a506:	6818      	ldr	r0, [r3, #0]
 800a508:	f107 0110 	add.w	r1, r7, #16
 800a50c:	2300      	movs	r3, #0
 800a50e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a510:	f7fe fcb0 	bl	8008e74 <xQueueGenericSend>
 800a514:	6278      	str	r0, [r7, #36]	@ 0x24
 800a516:	e012      	b.n	800a53e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a518:	4b0b      	ldr	r3, [pc, #44]	@ (800a548 <xTimerGenericCommand+0x98>)
 800a51a:	6818      	ldr	r0, [r3, #0]
 800a51c:	f107 0110 	add.w	r1, r7, #16
 800a520:	2300      	movs	r3, #0
 800a522:	2200      	movs	r2, #0
 800a524:	f7fe fca6 	bl	8008e74 <xQueueGenericSend>
 800a528:	6278      	str	r0, [r7, #36]	@ 0x24
 800a52a:	e008      	b.n	800a53e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a52c:	4b06      	ldr	r3, [pc, #24]	@ (800a548 <xTimerGenericCommand+0x98>)
 800a52e:	6818      	ldr	r0, [r3, #0]
 800a530:	f107 0110 	add.w	r1, r7, #16
 800a534:	2300      	movs	r3, #0
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	f7fe fd86 	bl	8009048 <xQueueGenericSendFromISR>
 800a53c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a540:	4618      	mov	r0, r3
 800a542:	3728      	adds	r7, #40	@ 0x28
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	200012fc 	.word	0x200012fc

0800a54c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b088      	sub	sp, #32
 800a550:	af02      	add	r7, sp, #8
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a556:	4b23      	ldr	r3, [pc, #140]	@ (800a5e4 <prvProcessExpiredTimer+0x98>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	3304      	adds	r3, #4
 800a564:	4618      	mov	r0, r3
 800a566:	f7fe fb5f 	bl	8008c28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a570:	f003 0304 	and.w	r3, r3, #4
 800a574:	2b00      	cmp	r3, #0
 800a576:	d023      	beq.n	800a5c0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	699a      	ldr	r2, [r3, #24]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	18d1      	adds	r1, r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	6978      	ldr	r0, [r7, #20]
 800a586:	f000 f8d5 	bl	800a734 <prvInsertTimerInActiveList>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d020      	beq.n	800a5d2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a590:	2300      	movs	r3, #0
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	2300      	movs	r3, #0
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	2100      	movs	r1, #0
 800a59a:	6978      	ldr	r0, [r7, #20]
 800a59c:	f7ff ff88 	bl	800a4b0 <xTimerGenericCommand>
 800a5a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d114      	bne.n	800a5d2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	60fb      	str	r3, [r7, #12]
}
 800a5ba:	bf00      	nop
 800a5bc:	bf00      	nop
 800a5be:	e7fd      	b.n	800a5bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5c6:	f023 0301 	bic.w	r3, r3, #1
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
 800a5d6:	6978      	ldr	r0, [r7, #20]
 800a5d8:	4798      	blx	r3
}
 800a5da:	bf00      	nop
 800a5dc:	3718      	adds	r7, #24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	200012f4 	.word	0x200012f4

0800a5e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5f0:	f107 0308 	add.w	r3, r7, #8
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f000 f859 	bl	800a6ac <prvGetNextExpireTime>
 800a5fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	4619      	mov	r1, r3
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f000 f805 	bl	800a610 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a606:	f000 f8d7 	bl	800a7b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a60a:	bf00      	nop
 800a60c:	e7f0      	b.n	800a5f0 <prvTimerTask+0x8>
	...

0800a610 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a61a:	f7ff fa4d 	bl	8009ab8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a61e:	f107 0308 	add.w	r3, r7, #8
 800a622:	4618      	mov	r0, r3
 800a624:	f000 f866 	bl	800a6f4 <prvSampleTimeNow>
 800a628:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d130      	bne.n	800a692 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10a      	bne.n	800a64c <prvProcessTimerOrBlockTask+0x3c>
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d806      	bhi.n	800a64c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a63e:	f7ff fa49 	bl	8009ad4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a642:	68f9      	ldr	r1, [r7, #12]
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7ff ff81 	bl	800a54c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a64a:	e024      	b.n	800a696 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d008      	beq.n	800a664 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a652:	4b13      	ldr	r3, [pc, #76]	@ (800a6a0 <prvProcessTimerOrBlockTask+0x90>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d101      	bne.n	800a660 <prvProcessTimerOrBlockTask+0x50>
 800a65c:	2301      	movs	r3, #1
 800a65e:	e000      	b.n	800a662 <prvProcessTimerOrBlockTask+0x52>
 800a660:	2300      	movs	r3, #0
 800a662:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a664:	4b0f      	ldr	r3, [pc, #60]	@ (800a6a4 <prvProcessTimerOrBlockTask+0x94>)
 800a666:	6818      	ldr	r0, [r3, #0]
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	683a      	ldr	r2, [r7, #0]
 800a670:	4619      	mov	r1, r3
 800a672:	f7fe ff99 	bl	80095a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a676:	f7ff fa2d 	bl	8009ad4 <xTaskResumeAll>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10a      	bne.n	800a696 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a680:	4b09      	ldr	r3, [pc, #36]	@ (800a6a8 <prvProcessTimerOrBlockTask+0x98>)
 800a682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a686:	601a      	str	r2, [r3, #0]
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	f3bf 8f6f 	isb	sy
}
 800a690:	e001      	b.n	800a696 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a692:	f7ff fa1f 	bl	8009ad4 <xTaskResumeAll>
}
 800a696:	bf00      	nop
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	200012f8 	.word	0x200012f8
 800a6a4:	200012fc 	.word	0x200012fc
 800a6a8:	e000ed04 	.word	0xe000ed04

0800a6ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a6b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a6f0 <prvGetNextExpireTime+0x44>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d101      	bne.n	800a6c2 <prvGetNextExpireTime+0x16>
 800a6be:	2201      	movs	r2, #1
 800a6c0:	e000      	b.n	800a6c4 <prvGetNextExpireTime+0x18>
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d105      	bne.n	800a6dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6d0:	4b07      	ldr	r3, [pc, #28]	@ (800a6f0 <prvGetNextExpireTime+0x44>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	60fb      	str	r3, [r7, #12]
 800a6da:	e001      	b.n	800a6e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3714      	adds	r7, #20
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	200012f4 	.word	0x200012f4

0800a6f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a6fc:	f7ff fa7a 	bl	8009bf4 <xTaskGetTickCount>
 800a700:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a702:	4b0b      	ldr	r3, [pc, #44]	@ (800a730 <prvSampleTimeNow+0x3c>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d205      	bcs.n	800a718 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a70c:	f000 f93a 	bl	800a984 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	601a      	str	r2, [r3, #0]
 800a716:	e002      	b.n	800a71e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a71e:	4a04      	ldr	r2, [pc, #16]	@ (800a730 <prvSampleTimeNow+0x3c>)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a724:	68fb      	ldr	r3, [r7, #12]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	20001304 	.word	0x20001304

0800a734 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]
 800a740:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a742:	2300      	movs	r3, #0
 800a744:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a752:	68ba      	ldr	r2, [r7, #8]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	429a      	cmp	r2, r3
 800a758:	d812      	bhi.n	800a780 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	1ad2      	subs	r2, r2, r3
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	429a      	cmp	r2, r3
 800a766:	d302      	bcc.n	800a76e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a768:	2301      	movs	r3, #1
 800a76a:	617b      	str	r3, [r7, #20]
 800a76c:	e01b      	b.n	800a7a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a76e:	4b10      	ldr	r3, [pc, #64]	@ (800a7b0 <prvInsertTimerInActiveList+0x7c>)
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	3304      	adds	r3, #4
 800a776:	4619      	mov	r1, r3
 800a778:	4610      	mov	r0, r2
 800a77a:	f7fe fa1c 	bl	8008bb6 <vListInsert>
 800a77e:	e012      	b.n	800a7a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	429a      	cmp	r2, r3
 800a786:	d206      	bcs.n	800a796 <prvInsertTimerInActiveList+0x62>
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d302      	bcc.n	800a796 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a790:	2301      	movs	r3, #1
 800a792:	617b      	str	r3, [r7, #20]
 800a794:	e007      	b.n	800a7a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a796:	4b07      	ldr	r3, [pc, #28]	@ (800a7b4 <prvInsertTimerInActiveList+0x80>)
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3304      	adds	r3, #4
 800a79e:	4619      	mov	r1, r3
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	f7fe fa08 	bl	8008bb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a7a6:	697b      	ldr	r3, [r7, #20]
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3718      	adds	r7, #24
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	200012f8 	.word	0x200012f8
 800a7b4:	200012f4 	.word	0x200012f4

0800a7b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b08e      	sub	sp, #56	@ 0x38
 800a7bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7be:	e0ce      	b.n	800a95e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	da19      	bge.n	800a7fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a7c6:	1d3b      	adds	r3, r7, #4
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d10b      	bne.n	800a7ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d6:	f383 8811 	msr	BASEPRI, r3
 800a7da:	f3bf 8f6f 	isb	sy
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	61fb      	str	r3, [r7, #28]
}
 800a7e4:	bf00      	nop
 800a7e6:	bf00      	nop
 800a7e8:	e7fd      	b.n	800a7e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a7ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7f0:	6850      	ldr	r0, [r2, #4]
 800a7f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7f4:	6892      	ldr	r2, [r2, #8]
 800a7f6:	4611      	mov	r1, r2
 800a7f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f2c0 80ae 	blt.w	800a95e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a808:	695b      	ldr	r3, [r3, #20]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d004      	beq.n	800a818 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a810:	3304      	adds	r3, #4
 800a812:	4618      	mov	r0, r3
 800a814:	f7fe fa08 	bl	8008c28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a818:	463b      	mov	r3, r7
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7ff ff6a 	bl	800a6f4 <prvSampleTimeNow>
 800a820:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2b09      	cmp	r3, #9
 800a826:	f200 8097 	bhi.w	800a958 <prvProcessReceivedCommands+0x1a0>
 800a82a:	a201      	add	r2, pc, #4	@ (adr r2, 800a830 <prvProcessReceivedCommands+0x78>)
 800a82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a830:	0800a859 	.word	0x0800a859
 800a834:	0800a859 	.word	0x0800a859
 800a838:	0800a859 	.word	0x0800a859
 800a83c:	0800a8cf 	.word	0x0800a8cf
 800a840:	0800a8e3 	.word	0x0800a8e3
 800a844:	0800a92f 	.word	0x0800a92f
 800a848:	0800a859 	.word	0x0800a859
 800a84c:	0800a859 	.word	0x0800a859
 800a850:	0800a8cf 	.word	0x0800a8cf
 800a854:	0800a8e3 	.word	0x0800a8e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a85a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a85e:	f043 0301 	orr.w	r3, r3, #1
 800a862:	b2da      	uxtb	r2, r3
 800a864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a866:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	18d1      	adds	r1, r2, r3
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a876:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a878:	f7ff ff5c 	bl	800a734 <prvInsertTimerInActiveList>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d06c      	beq.n	800a95c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a884:	6a1b      	ldr	r3, [r3, #32]
 800a886:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a888:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a88c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a890:	f003 0304 	and.w	r3, r3, #4
 800a894:	2b00      	cmp	r3, #0
 800a896:	d061      	beq.n	800a95c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	441a      	add	r2, r3
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	9300      	str	r3, [sp, #0]
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8aa:	f7ff fe01 	bl	800a4b0 <xTimerGenericCommand>
 800a8ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a8b0:	6a3b      	ldr	r3, [r7, #32]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d152      	bne.n	800a95c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	61bb      	str	r3, [r7, #24]
}
 800a8c8:	bf00      	nop
 800a8ca:	bf00      	nop
 800a8cc:	e7fd      	b.n	800a8ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8d4:	f023 0301 	bic.w	r3, r3, #1
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a8e0:	e03d      	b.n	800a95e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8e8:	f043 0301 	orr.w	r3, r3, #1
 800a8ec:	b2da      	uxtb	r2, r3
 800a8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d10b      	bne.n	800a91a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a906:	f383 8811 	msr	BASEPRI, r3
 800a90a:	f3bf 8f6f 	isb	sy
 800a90e:	f3bf 8f4f 	dsb	sy
 800a912:	617b      	str	r3, [r7, #20]
}
 800a914:	bf00      	nop
 800a916:	bf00      	nop
 800a918:	e7fd      	b.n	800a916 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a91c:	699a      	ldr	r2, [r3, #24]
 800a91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a920:	18d1      	adds	r1, r2, r3
 800a922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a928:	f7ff ff04 	bl	800a734 <prvInsertTimerInActiveList>
					break;
 800a92c:	e017      	b.n	800a95e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a92e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a930:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a934:	f003 0302 	and.w	r3, r3, #2
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d103      	bne.n	800a944 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a93c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a93e:	f000 fbeb 	bl	800b118 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a942:	e00c      	b.n	800a95e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a946:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a94a:	f023 0301 	bic.w	r3, r3, #1
 800a94e:	b2da      	uxtb	r2, r3
 800a950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a952:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a956:	e002      	b.n	800a95e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a958:	bf00      	nop
 800a95a:	e000      	b.n	800a95e <prvProcessReceivedCommands+0x1a6>
					break;
 800a95c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a95e:	4b08      	ldr	r3, [pc, #32]	@ (800a980 <prvProcessReceivedCommands+0x1c8>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	1d39      	adds	r1, r7, #4
 800a964:	2200      	movs	r2, #0
 800a966:	4618      	mov	r0, r3
 800a968:	f7fe fc0c 	bl	8009184 <xQueueReceive>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f47f af26 	bne.w	800a7c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a974:	bf00      	nop
 800a976:	bf00      	nop
 800a978:	3730      	adds	r7, #48	@ 0x30
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	200012fc 	.word	0x200012fc

0800a984 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b088      	sub	sp, #32
 800a988:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a98a:	e049      	b.n	800aa20 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a98c:	4b2e      	ldr	r3, [pc, #184]	@ (800aa48 <prvSwitchTimerLists+0xc4>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a996:	4b2c      	ldr	r3, [pc, #176]	@ (800aa48 <prvSwitchTimerLists+0xc4>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7fe f93f 	bl	8008c28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6a1b      	ldr	r3, [r3, #32]
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a9b8:	f003 0304 	and.w	r3, r3, #4
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d02f      	beq.n	800aa20 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	699b      	ldr	r3, [r3, #24]
 800a9c4:	693a      	ldr	r2, [r7, #16]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d90e      	bls.n	800a9f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	68ba      	ldr	r2, [r7, #8]
 800a9d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9de:	4b1a      	ldr	r3, [pc, #104]	@ (800aa48 <prvSwitchTimerLists+0xc4>)
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	f7fe f8e4 	bl	8008bb6 <vListInsert>
 800a9ee:	e017      	b.n	800aa20 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	693a      	ldr	r2, [r7, #16]
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f7ff fd58 	bl	800a4b0 <xTimerGenericCommand>
 800aa00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10b      	bne.n	800aa20 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800aa08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0c:	f383 8811 	msr	BASEPRI, r3
 800aa10:	f3bf 8f6f 	isb	sy
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	603b      	str	r3, [r7, #0]
}
 800aa1a:	bf00      	nop
 800aa1c:	bf00      	nop
 800aa1e:	e7fd      	b.n	800aa1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa20:	4b09      	ldr	r3, [pc, #36]	@ (800aa48 <prvSwitchTimerLists+0xc4>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1b0      	bne.n	800a98c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aa2a:	4b07      	ldr	r3, [pc, #28]	@ (800aa48 <prvSwitchTimerLists+0xc4>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aa30:	4b06      	ldr	r3, [pc, #24]	@ (800aa4c <prvSwitchTimerLists+0xc8>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a04      	ldr	r2, [pc, #16]	@ (800aa48 <prvSwitchTimerLists+0xc4>)
 800aa36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aa38:	4a04      	ldr	r2, [pc, #16]	@ (800aa4c <prvSwitchTimerLists+0xc8>)
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	6013      	str	r3, [r2, #0]
}
 800aa3e:	bf00      	nop
 800aa40:	3718      	adds	r7, #24
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	200012f4 	.word	0x200012f4
 800aa4c:	200012f8 	.word	0x200012f8

0800aa50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aa56:	f000 f96f 	bl	800ad38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aa5a:	4b15      	ldr	r3, [pc, #84]	@ (800aab0 <prvCheckForValidListAndQueue+0x60>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d120      	bne.n	800aaa4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa62:	4814      	ldr	r0, [pc, #80]	@ (800aab4 <prvCheckForValidListAndQueue+0x64>)
 800aa64:	f7fe f856 	bl	8008b14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa68:	4813      	ldr	r0, [pc, #76]	@ (800aab8 <prvCheckForValidListAndQueue+0x68>)
 800aa6a:	f7fe f853 	bl	8008b14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aa6e:	4b13      	ldr	r3, [pc, #76]	@ (800aabc <prvCheckForValidListAndQueue+0x6c>)
 800aa70:	4a10      	ldr	r2, [pc, #64]	@ (800aab4 <prvCheckForValidListAndQueue+0x64>)
 800aa72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aa74:	4b12      	ldr	r3, [pc, #72]	@ (800aac0 <prvCheckForValidListAndQueue+0x70>)
 800aa76:	4a10      	ldr	r2, [pc, #64]	@ (800aab8 <prvCheckForValidListAndQueue+0x68>)
 800aa78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	9300      	str	r3, [sp, #0]
 800aa7e:	4b11      	ldr	r3, [pc, #68]	@ (800aac4 <prvCheckForValidListAndQueue+0x74>)
 800aa80:	4a11      	ldr	r2, [pc, #68]	@ (800aac8 <prvCheckForValidListAndQueue+0x78>)
 800aa82:	2110      	movs	r1, #16
 800aa84:	200a      	movs	r0, #10
 800aa86:	f7fe f955 	bl	8008d34 <xQueueGenericCreateStatic>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	4a08      	ldr	r2, [pc, #32]	@ (800aab0 <prvCheckForValidListAndQueue+0x60>)
 800aa8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa90:	4b07      	ldr	r3, [pc, #28]	@ (800aab0 <prvCheckForValidListAndQueue+0x60>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d005      	beq.n	800aaa4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa98:	4b05      	ldr	r3, [pc, #20]	@ (800aab0 <prvCheckForValidListAndQueue+0x60>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	490b      	ldr	r1, [pc, #44]	@ (800aacc <prvCheckForValidListAndQueue+0x7c>)
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe fd58 	bl	8009554 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aaa4:	f000 f97a 	bl	800ad9c <vPortExitCritical>
}
 800aaa8:	bf00      	nop
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	200012fc 	.word	0x200012fc
 800aab4:	200012cc 	.word	0x200012cc
 800aab8:	200012e0 	.word	0x200012e0
 800aabc:	200012f4 	.word	0x200012f4
 800aac0:	200012f8 	.word	0x200012f8
 800aac4:	200013a8 	.word	0x200013a8
 800aac8:	20001308 	.word	0x20001308
 800aacc:	0800b58c 	.word	0x0800b58c

0800aad0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	3b04      	subs	r3, #4
 800aae0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800aae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	3b04      	subs	r3, #4
 800aaee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	f023 0201 	bic.w	r2, r3, #1
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	3b04      	subs	r3, #4
 800aafe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab00:	4a0c      	ldr	r2, [pc, #48]	@ (800ab34 <pxPortInitialiseStack+0x64>)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	3b14      	subs	r3, #20
 800ab0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	3b04      	subs	r3, #4
 800ab16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f06f 0202 	mvn.w	r2, #2
 800ab1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	3b20      	subs	r3, #32
 800ab24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab26:	68fb      	ldr	r3, [r7, #12]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	0800ab39 	.word	0x0800ab39

0800ab38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab42:	4b13      	ldr	r3, [pc, #76]	@ (800ab90 <prvTaskExitError+0x58>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab4a:	d00b      	beq.n	800ab64 <prvTaskExitError+0x2c>
	__asm volatile
 800ab4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	60fb      	str	r3, [r7, #12]
}
 800ab5e:	bf00      	nop
 800ab60:	bf00      	nop
 800ab62:	e7fd      	b.n	800ab60 <prvTaskExitError+0x28>
	__asm volatile
 800ab64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	60bb      	str	r3, [r7, #8]
}
 800ab76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab78:	bf00      	nop
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d0fc      	beq.n	800ab7a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab80:	bf00      	nop
 800ab82:	bf00      	nop
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	20000010 	.word	0x20000010
	...

0800aba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aba0:	4b07      	ldr	r3, [pc, #28]	@ (800abc0 <pxCurrentTCBConst2>)
 800aba2:	6819      	ldr	r1, [r3, #0]
 800aba4:	6808      	ldr	r0, [r1, #0]
 800aba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abaa:	f380 8809 	msr	PSP, r0
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f04f 0000 	mov.w	r0, #0
 800abb6:	f380 8811 	msr	BASEPRI, r0
 800abba:	4770      	bx	lr
 800abbc:	f3af 8000 	nop.w

0800abc0 <pxCurrentTCBConst2>:
 800abc0:	20000dcc 	.word	0x20000dcc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800abc4:	bf00      	nop
 800abc6:	bf00      	nop

0800abc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800abc8:	4808      	ldr	r0, [pc, #32]	@ (800abec <prvPortStartFirstTask+0x24>)
 800abca:	6800      	ldr	r0, [r0, #0]
 800abcc:	6800      	ldr	r0, [r0, #0]
 800abce:	f380 8808 	msr	MSP, r0
 800abd2:	f04f 0000 	mov.w	r0, #0
 800abd6:	f380 8814 	msr	CONTROL, r0
 800abda:	b662      	cpsie	i
 800abdc:	b661      	cpsie	f
 800abde:	f3bf 8f4f 	dsb	sy
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	df00      	svc	0
 800abe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800abea:	bf00      	nop
 800abec:	e000ed08 	.word	0xe000ed08

0800abf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800abf6:	4b47      	ldr	r3, [pc, #284]	@ (800ad14 <xPortStartScheduler+0x124>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a47      	ldr	r2, [pc, #284]	@ (800ad18 <xPortStartScheduler+0x128>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d10b      	bne.n	800ac18 <xPortStartScheduler+0x28>
	__asm volatile
 800ac00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac04:	f383 8811 	msr	BASEPRI, r3
 800ac08:	f3bf 8f6f 	isb	sy
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	613b      	str	r3, [r7, #16]
}
 800ac12:	bf00      	nop
 800ac14:	bf00      	nop
 800ac16:	e7fd      	b.n	800ac14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ac18:	4b3e      	ldr	r3, [pc, #248]	@ (800ad14 <xPortStartScheduler+0x124>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a3f      	ldr	r2, [pc, #252]	@ (800ad1c <xPortStartScheduler+0x12c>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d10b      	bne.n	800ac3a <xPortStartScheduler+0x4a>
	__asm volatile
 800ac22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	60fb      	str	r3, [r7, #12]
}
 800ac34:	bf00      	nop
 800ac36:	bf00      	nop
 800ac38:	e7fd      	b.n	800ac36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac3a:	4b39      	ldr	r3, [pc, #228]	@ (800ad20 <xPortStartScheduler+0x130>)
 800ac3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	22ff      	movs	r2, #255	@ 0xff
 800ac4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac54:	78fb      	ldrb	r3, [r7, #3]
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ac5c:	b2da      	uxtb	r2, r3
 800ac5e:	4b31      	ldr	r3, [pc, #196]	@ (800ad24 <xPortStartScheduler+0x134>)
 800ac60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac62:	4b31      	ldr	r3, [pc, #196]	@ (800ad28 <xPortStartScheduler+0x138>)
 800ac64:	2207      	movs	r2, #7
 800ac66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac68:	e009      	b.n	800ac7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ac6a:	4b2f      	ldr	r3, [pc, #188]	@ (800ad28 <xPortStartScheduler+0x138>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	4a2d      	ldr	r2, [pc, #180]	@ (800ad28 <xPortStartScheduler+0x138>)
 800ac72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac74:	78fb      	ldrb	r3, [r7, #3]
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	005b      	lsls	r3, r3, #1
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac7e:	78fb      	ldrb	r3, [r7, #3]
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac86:	2b80      	cmp	r3, #128	@ 0x80
 800ac88:	d0ef      	beq.n	800ac6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac8a:	4b27      	ldr	r3, [pc, #156]	@ (800ad28 <xPortStartScheduler+0x138>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f1c3 0307 	rsb	r3, r3, #7
 800ac92:	2b04      	cmp	r3, #4
 800ac94:	d00b      	beq.n	800acae <xPortStartScheduler+0xbe>
	__asm volatile
 800ac96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac9a:	f383 8811 	msr	BASEPRI, r3
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	60bb      	str	r3, [r7, #8]
}
 800aca8:	bf00      	nop
 800acaa:	bf00      	nop
 800acac:	e7fd      	b.n	800acaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800acae:	4b1e      	ldr	r3, [pc, #120]	@ (800ad28 <xPortStartScheduler+0x138>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	021b      	lsls	r3, r3, #8
 800acb4:	4a1c      	ldr	r2, [pc, #112]	@ (800ad28 <xPortStartScheduler+0x138>)
 800acb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800acb8:	4b1b      	ldr	r3, [pc, #108]	@ (800ad28 <xPortStartScheduler+0x138>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800acc0:	4a19      	ldr	r2, [pc, #100]	@ (800ad28 <xPortStartScheduler+0x138>)
 800acc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	b2da      	uxtb	r2, r3
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800accc:	4b17      	ldr	r3, [pc, #92]	@ (800ad2c <xPortStartScheduler+0x13c>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a16      	ldr	r2, [pc, #88]	@ (800ad2c <xPortStartScheduler+0x13c>)
 800acd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800acd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800acd8:	4b14      	ldr	r3, [pc, #80]	@ (800ad2c <xPortStartScheduler+0x13c>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a13      	ldr	r2, [pc, #76]	@ (800ad2c <xPortStartScheduler+0x13c>)
 800acde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ace2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ace4:	f000 f8da 	bl	800ae9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ace8:	4b11      	ldr	r3, [pc, #68]	@ (800ad30 <xPortStartScheduler+0x140>)
 800acea:	2200      	movs	r2, #0
 800acec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800acee:	f000 f8f9 	bl	800aee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800acf2:	4b10      	ldr	r3, [pc, #64]	@ (800ad34 <xPortStartScheduler+0x144>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a0f      	ldr	r2, [pc, #60]	@ (800ad34 <xPortStartScheduler+0x144>)
 800acf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800acfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800acfe:	f7ff ff63 	bl	800abc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ad02:	f7ff f831 	bl	8009d68 <vTaskSwitchContext>
	prvTaskExitError();
 800ad06:	f7ff ff17 	bl	800ab38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3718      	adds	r7, #24
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	e000ed00 	.word	0xe000ed00
 800ad18:	410fc271 	.word	0x410fc271
 800ad1c:	410fc270 	.word	0x410fc270
 800ad20:	e000e400 	.word	0xe000e400
 800ad24:	200013f8 	.word	0x200013f8
 800ad28:	200013fc 	.word	0x200013fc
 800ad2c:	e000ed20 	.word	0xe000ed20
 800ad30:	20000010 	.word	0x20000010
 800ad34:	e000ef34 	.word	0xe000ef34

0800ad38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	607b      	str	r3, [r7, #4]
}
 800ad50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ad52:	4b10      	ldr	r3, [pc, #64]	@ (800ad94 <vPortEnterCritical+0x5c>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3301      	adds	r3, #1
 800ad58:	4a0e      	ldr	r2, [pc, #56]	@ (800ad94 <vPortEnterCritical+0x5c>)
 800ad5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad5c:	4b0d      	ldr	r3, [pc, #52]	@ (800ad94 <vPortEnterCritical+0x5c>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d110      	bne.n	800ad86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad64:	4b0c      	ldr	r3, [pc, #48]	@ (800ad98 <vPortEnterCritical+0x60>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00b      	beq.n	800ad86 <vPortEnterCritical+0x4e>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	603b      	str	r3, [r7, #0]
}
 800ad80:	bf00      	nop
 800ad82:	bf00      	nop
 800ad84:	e7fd      	b.n	800ad82 <vPortEnterCritical+0x4a>
	}
}
 800ad86:	bf00      	nop
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	20000010 	.word	0x20000010
 800ad98:	e000ed04 	.word	0xe000ed04

0800ad9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ada2:	4b12      	ldr	r3, [pc, #72]	@ (800adec <vPortExitCritical+0x50>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10b      	bne.n	800adc2 <vPortExitCritical+0x26>
	__asm volatile
 800adaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	607b      	str	r3, [r7, #4]
}
 800adbc:	bf00      	nop
 800adbe:	bf00      	nop
 800adc0:	e7fd      	b.n	800adbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800adc2:	4b0a      	ldr	r3, [pc, #40]	@ (800adec <vPortExitCritical+0x50>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	3b01      	subs	r3, #1
 800adc8:	4a08      	ldr	r2, [pc, #32]	@ (800adec <vPortExitCritical+0x50>)
 800adca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800adcc:	4b07      	ldr	r3, [pc, #28]	@ (800adec <vPortExitCritical+0x50>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d105      	bne.n	800ade0 <vPortExitCritical+0x44>
 800add4:	2300      	movs	r3, #0
 800add6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	f383 8811 	msr	BASEPRI, r3
}
 800adde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ade0:	bf00      	nop
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr
 800adec:	20000010 	.word	0x20000010

0800adf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800adf0:	f3ef 8009 	mrs	r0, PSP
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	4b15      	ldr	r3, [pc, #84]	@ (800ae50 <pxCurrentTCBConst>)
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	f01e 0f10 	tst.w	lr, #16
 800ae00:	bf08      	it	eq
 800ae02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ae06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae0a:	6010      	str	r0, [r2, #0]
 800ae0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ae10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ae14:	f380 8811 	msr	BASEPRI, r0
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f7fe ffa2 	bl	8009d68 <vTaskSwitchContext>
 800ae24:	f04f 0000 	mov.w	r0, #0
 800ae28:	f380 8811 	msr	BASEPRI, r0
 800ae2c:	bc09      	pop	{r0, r3}
 800ae2e:	6819      	ldr	r1, [r3, #0]
 800ae30:	6808      	ldr	r0, [r1, #0]
 800ae32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae36:	f01e 0f10 	tst.w	lr, #16
 800ae3a:	bf08      	it	eq
 800ae3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae40:	f380 8809 	msr	PSP, r0
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	f3af 8000 	nop.w

0800ae50 <pxCurrentTCBConst>:
 800ae50:	20000dcc 	.word	0x20000dcc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae54:	bf00      	nop
 800ae56:	bf00      	nop

0800ae58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	607b      	str	r3, [r7, #4]
}
 800ae70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae72:	f7fe fee1 	bl	8009c38 <xTaskIncrementTick>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d003      	beq.n	800ae84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae7c:	4b06      	ldr	r3, [pc, #24]	@ (800ae98 <xPortSysTickHandler+0x40>)
 800ae7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae82:	601a      	str	r2, [r3, #0]
 800ae84:	2300      	movs	r3, #0
 800ae86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	f383 8811 	msr	BASEPRI, r3
}
 800ae8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae90:	bf00      	nop
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	e000ed04 	.word	0xe000ed04

0800ae9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aea0:	4b0b      	ldr	r3, [pc, #44]	@ (800aed0 <vPortSetupTimerInterrupt+0x34>)
 800aea2:	2200      	movs	r2, #0
 800aea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aea6:	4b0b      	ldr	r3, [pc, #44]	@ (800aed4 <vPortSetupTimerInterrupt+0x38>)
 800aea8:	2200      	movs	r2, #0
 800aeaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aeac:	4b0a      	ldr	r3, [pc, #40]	@ (800aed8 <vPortSetupTimerInterrupt+0x3c>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a0a      	ldr	r2, [pc, #40]	@ (800aedc <vPortSetupTimerInterrupt+0x40>)
 800aeb2:	fba2 2303 	umull	r2, r3, r2, r3
 800aeb6:	099b      	lsrs	r3, r3, #6
 800aeb8:	4a09      	ldr	r2, [pc, #36]	@ (800aee0 <vPortSetupTimerInterrupt+0x44>)
 800aeba:	3b01      	subs	r3, #1
 800aebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aebe:	4b04      	ldr	r3, [pc, #16]	@ (800aed0 <vPortSetupTimerInterrupt+0x34>)
 800aec0:	2207      	movs	r2, #7
 800aec2:	601a      	str	r2, [r3, #0]
}
 800aec4:	bf00      	nop
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	e000e010 	.word	0xe000e010
 800aed4:	e000e018 	.word	0xe000e018
 800aed8:	20000004 	.word	0x20000004
 800aedc:	10624dd3 	.word	0x10624dd3
 800aee0:	e000e014 	.word	0xe000e014

0800aee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aee4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800aef4 <vPortEnableVFP+0x10>
 800aee8:	6801      	ldr	r1, [r0, #0]
 800aeea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800aeee:	6001      	str	r1, [r0, #0]
 800aef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aef2:	bf00      	nop
 800aef4:	e000ed88 	.word	0xe000ed88

0800aef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aef8:	b480      	push	{r7}
 800aefa:	b085      	sub	sp, #20
 800aefc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aefe:	f3ef 8305 	mrs	r3, IPSR
 800af02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2b0f      	cmp	r3, #15
 800af08:	d915      	bls.n	800af36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800af0a:	4a18      	ldr	r2, [pc, #96]	@ (800af6c <vPortValidateInterruptPriority+0x74>)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	4413      	add	r3, r2
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800af14:	4b16      	ldr	r3, [pc, #88]	@ (800af70 <vPortValidateInterruptPriority+0x78>)
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	7afa      	ldrb	r2, [r7, #11]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d20b      	bcs.n	800af36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800af1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af22:	f383 8811 	msr	BASEPRI, r3
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	607b      	str	r3, [r7, #4]
}
 800af30:	bf00      	nop
 800af32:	bf00      	nop
 800af34:	e7fd      	b.n	800af32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800af36:	4b0f      	ldr	r3, [pc, #60]	@ (800af74 <vPortValidateInterruptPriority+0x7c>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800af3e:	4b0e      	ldr	r3, [pc, #56]	@ (800af78 <vPortValidateInterruptPriority+0x80>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	429a      	cmp	r2, r3
 800af44:	d90b      	bls.n	800af5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800af46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af4a:	f383 8811 	msr	BASEPRI, r3
 800af4e:	f3bf 8f6f 	isb	sy
 800af52:	f3bf 8f4f 	dsb	sy
 800af56:	603b      	str	r3, [r7, #0]
}
 800af58:	bf00      	nop
 800af5a:	bf00      	nop
 800af5c:	e7fd      	b.n	800af5a <vPortValidateInterruptPriority+0x62>
	}
 800af5e:	bf00      	nop
 800af60:	3714      	adds	r7, #20
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	e000e3f0 	.word	0xe000e3f0
 800af70:	200013f8 	.word	0x200013f8
 800af74:	e000ed0c 	.word	0xe000ed0c
 800af78:	200013fc 	.word	0x200013fc

0800af7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b08a      	sub	sp, #40	@ 0x28
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af84:	2300      	movs	r3, #0
 800af86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af88:	f7fe fd96 	bl	8009ab8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af8c:	4b5c      	ldr	r3, [pc, #368]	@ (800b100 <pvPortMalloc+0x184>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d101      	bne.n	800af98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af94:	f000 f924 	bl	800b1e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af98:	4b5a      	ldr	r3, [pc, #360]	@ (800b104 <pvPortMalloc+0x188>)
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4013      	ands	r3, r2
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	f040 8095 	bne.w	800b0d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d01e      	beq.n	800afea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800afac:	2208      	movs	r2, #8
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	4413      	add	r3, r2
 800afb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f003 0307 	and.w	r3, r3, #7
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d015      	beq.n	800afea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f023 0307 	bic.w	r3, r3, #7
 800afc4:	3308      	adds	r3, #8
 800afc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f003 0307 	and.w	r3, r3, #7
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00b      	beq.n	800afea <pvPortMalloc+0x6e>
	__asm volatile
 800afd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	617b      	str	r3, [r7, #20]
}
 800afe4:	bf00      	nop
 800afe6:	bf00      	nop
 800afe8:	e7fd      	b.n	800afe6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d06f      	beq.n	800b0d0 <pvPortMalloc+0x154>
 800aff0:	4b45      	ldr	r3, [pc, #276]	@ (800b108 <pvPortMalloc+0x18c>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d86a      	bhi.n	800b0d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800affa:	4b44      	ldr	r3, [pc, #272]	@ (800b10c <pvPortMalloc+0x190>)
 800affc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800affe:	4b43      	ldr	r3, [pc, #268]	@ (800b10c <pvPortMalloc+0x190>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b004:	e004      	b.n	800b010 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b008:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	429a      	cmp	r2, r3
 800b018:	d903      	bls.n	800b022 <pvPortMalloc+0xa6>
 800b01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1f1      	bne.n	800b006 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b022:	4b37      	ldr	r3, [pc, #220]	@ (800b100 <pvPortMalloc+0x184>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b028:	429a      	cmp	r2, r3
 800b02a:	d051      	beq.n	800b0d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b02c:	6a3b      	ldr	r3, [r7, #32]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2208      	movs	r2, #8
 800b032:	4413      	add	r3, r2
 800b034:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b040:	685a      	ldr	r2, [r3, #4]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	1ad2      	subs	r2, r2, r3
 800b046:	2308      	movs	r3, #8
 800b048:	005b      	lsls	r3, r3, #1
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d920      	bls.n	800b090 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b04e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4413      	add	r3, r2
 800b054:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	f003 0307 	and.w	r3, r3, #7
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00b      	beq.n	800b078 <pvPortMalloc+0xfc>
	__asm volatile
 800b060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b064:	f383 8811 	msr	BASEPRI, r3
 800b068:	f3bf 8f6f 	isb	sy
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	613b      	str	r3, [r7, #16]
}
 800b072:	bf00      	nop
 800b074:	bf00      	nop
 800b076:	e7fd      	b.n	800b074 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b07a:	685a      	ldr	r2, [r3, #4]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	1ad2      	subs	r2, r2, r3
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b08a:	69b8      	ldr	r0, [r7, #24]
 800b08c:	f000 f90a 	bl	800b2a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b090:	4b1d      	ldr	r3, [pc, #116]	@ (800b108 <pvPortMalloc+0x18c>)
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	4a1b      	ldr	r2, [pc, #108]	@ (800b108 <pvPortMalloc+0x18c>)
 800b09c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b09e:	4b1a      	ldr	r3, [pc, #104]	@ (800b108 <pvPortMalloc+0x18c>)
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	4b1b      	ldr	r3, [pc, #108]	@ (800b110 <pvPortMalloc+0x194>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d203      	bcs.n	800b0b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b0aa:	4b17      	ldr	r3, [pc, #92]	@ (800b108 <pvPortMalloc+0x18c>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a18      	ldr	r2, [pc, #96]	@ (800b110 <pvPortMalloc+0x194>)
 800b0b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b4:	685a      	ldr	r2, [r3, #4]
 800b0b6:	4b13      	ldr	r3, [pc, #76]	@ (800b104 <pvPortMalloc+0x188>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b0c6:	4b13      	ldr	r3, [pc, #76]	@ (800b114 <pvPortMalloc+0x198>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	4a11      	ldr	r2, [pc, #68]	@ (800b114 <pvPortMalloc+0x198>)
 800b0ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b0d0:	f7fe fd00 	bl	8009ad4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	f003 0307 	and.w	r3, r3, #7
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00b      	beq.n	800b0f6 <pvPortMalloc+0x17a>
	__asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	60fb      	str	r3, [r7, #12]
}
 800b0f0:	bf00      	nop
 800b0f2:	bf00      	nop
 800b0f4:	e7fd      	b.n	800b0f2 <pvPortMalloc+0x176>
	return pvReturn;
 800b0f6:	69fb      	ldr	r3, [r7, #28]
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3728      	adds	r7, #40	@ 0x28
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	20002008 	.word	0x20002008
 800b104:	2000201c 	.word	0x2000201c
 800b108:	2000200c 	.word	0x2000200c
 800b10c:	20002000 	.word	0x20002000
 800b110:	20002010 	.word	0x20002010
 800b114:	20002014 	.word	0x20002014

0800b118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b086      	sub	sp, #24
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d04f      	beq.n	800b1ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b12a:	2308      	movs	r3, #8
 800b12c:	425b      	negs	r3, r3
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	4413      	add	r3, r2
 800b132:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	685a      	ldr	r2, [r3, #4]
 800b13c:	4b25      	ldr	r3, [pc, #148]	@ (800b1d4 <vPortFree+0xbc>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4013      	ands	r3, r2
 800b142:	2b00      	cmp	r3, #0
 800b144:	d10b      	bne.n	800b15e <vPortFree+0x46>
	__asm volatile
 800b146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b14a:	f383 8811 	msr	BASEPRI, r3
 800b14e:	f3bf 8f6f 	isb	sy
 800b152:	f3bf 8f4f 	dsb	sy
 800b156:	60fb      	str	r3, [r7, #12]
}
 800b158:	bf00      	nop
 800b15a:	bf00      	nop
 800b15c:	e7fd      	b.n	800b15a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d00b      	beq.n	800b17e <vPortFree+0x66>
	__asm volatile
 800b166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	60bb      	str	r3, [r7, #8]
}
 800b178:	bf00      	nop
 800b17a:	bf00      	nop
 800b17c:	e7fd      	b.n	800b17a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	685a      	ldr	r2, [r3, #4]
 800b182:	4b14      	ldr	r3, [pc, #80]	@ (800b1d4 <vPortFree+0xbc>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4013      	ands	r3, r2
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d01e      	beq.n	800b1ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d11a      	bne.n	800b1ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	685a      	ldr	r2, [r3, #4]
 800b198:	4b0e      	ldr	r3, [pc, #56]	@ (800b1d4 <vPortFree+0xbc>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	43db      	mvns	r3, r3
 800b19e:	401a      	ands	r2, r3
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b1a4:	f7fe fc88 	bl	8009ab8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	685a      	ldr	r2, [r3, #4]
 800b1ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b1d8 <vPortFree+0xc0>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	4a09      	ldr	r2, [pc, #36]	@ (800b1d8 <vPortFree+0xc0>)
 800b1b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b1b6:	6938      	ldr	r0, [r7, #16]
 800b1b8:	f000 f874 	bl	800b2a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b1bc:	4b07      	ldr	r3, [pc, #28]	@ (800b1dc <vPortFree+0xc4>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	4a06      	ldr	r2, [pc, #24]	@ (800b1dc <vPortFree+0xc4>)
 800b1c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b1c6:	f7fe fc85 	bl	8009ad4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b1ca:	bf00      	nop
 800b1cc:	3718      	adds	r7, #24
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	2000201c 	.word	0x2000201c
 800b1d8:	2000200c 	.word	0x2000200c
 800b1dc:	20002018 	.word	0x20002018

0800b1e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b1e6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800b1ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b1ec:	4b27      	ldr	r3, [pc, #156]	@ (800b28c <prvHeapInit+0xac>)
 800b1ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f003 0307 	and.w	r3, r3, #7
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00c      	beq.n	800b214 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	3307      	adds	r3, #7
 800b1fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f023 0307 	bic.w	r3, r3, #7
 800b206:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	1ad3      	subs	r3, r2, r3
 800b20e:	4a1f      	ldr	r2, [pc, #124]	@ (800b28c <prvHeapInit+0xac>)
 800b210:	4413      	add	r3, r2
 800b212:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b218:	4a1d      	ldr	r2, [pc, #116]	@ (800b290 <prvHeapInit+0xb0>)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b21e:	4b1c      	ldr	r3, [pc, #112]	@ (800b290 <prvHeapInit+0xb0>)
 800b220:	2200      	movs	r2, #0
 800b222:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	68ba      	ldr	r2, [r7, #8]
 800b228:	4413      	add	r3, r2
 800b22a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b22c:	2208      	movs	r2, #8
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	1a9b      	subs	r3, r3, r2
 800b232:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f023 0307 	bic.w	r3, r3, #7
 800b23a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	4a15      	ldr	r2, [pc, #84]	@ (800b294 <prvHeapInit+0xb4>)
 800b240:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b242:	4b14      	ldr	r3, [pc, #80]	@ (800b294 <prvHeapInit+0xb4>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2200      	movs	r2, #0
 800b248:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b24a:	4b12      	ldr	r3, [pc, #72]	@ (800b294 <prvHeapInit+0xb4>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2200      	movs	r2, #0
 800b250:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	1ad2      	subs	r2, r2, r3
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b260:	4b0c      	ldr	r3, [pc, #48]	@ (800b294 <prvHeapInit+0xb4>)
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	4a0a      	ldr	r2, [pc, #40]	@ (800b298 <prvHeapInit+0xb8>)
 800b26e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	4a09      	ldr	r2, [pc, #36]	@ (800b29c <prvHeapInit+0xbc>)
 800b276:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b278:	4b09      	ldr	r3, [pc, #36]	@ (800b2a0 <prvHeapInit+0xc0>)
 800b27a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b27e:	601a      	str	r2, [r3, #0]
}
 800b280:	bf00      	nop
 800b282:	3714      	adds	r7, #20
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr
 800b28c:	20001400 	.word	0x20001400
 800b290:	20002000 	.word	0x20002000
 800b294:	20002008 	.word	0x20002008
 800b298:	20002010 	.word	0x20002010
 800b29c:	2000200c 	.word	0x2000200c
 800b2a0:	2000201c 	.word	0x2000201c

0800b2a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b2ac:	4b28      	ldr	r3, [pc, #160]	@ (800b350 <prvInsertBlockIntoFreeList+0xac>)
 800b2ae:	60fb      	str	r3, [r7, #12]
 800b2b0:	e002      	b.n	800b2b8 <prvInsertBlockIntoFreeList+0x14>
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	60fb      	str	r3, [r7, #12]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d8f7      	bhi.n	800b2b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d108      	bne.n	800b2e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	685a      	ldr	r2, [r3, #4]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	441a      	add	r2, r3
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	441a      	add	r2, r3
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d118      	bne.n	800b32c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	4b15      	ldr	r3, [pc, #84]	@ (800b354 <prvInsertBlockIntoFreeList+0xb0>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	429a      	cmp	r2, r3
 800b304:	d00d      	beq.n	800b322 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	685a      	ldr	r2, [r3, #4]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	441a      	add	r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	601a      	str	r2, [r3, #0]
 800b320:	e008      	b.n	800b334 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b322:	4b0c      	ldr	r3, [pc, #48]	@ (800b354 <prvInsertBlockIntoFreeList+0xb0>)
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	601a      	str	r2, [r3, #0]
 800b32a:	e003      	b.n	800b334 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d002      	beq.n	800b342 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b342:	bf00      	nop
 800b344:	3714      	adds	r7, #20
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr
 800b34e:	bf00      	nop
 800b350:	20002000 	.word	0x20002000
 800b354:	20002008 	.word	0x20002008

0800b358 <memset>:
 800b358:	4402      	add	r2, r0
 800b35a:	4603      	mov	r3, r0
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d100      	bne.n	800b362 <memset+0xa>
 800b360:	4770      	bx	lr
 800b362:	f803 1b01 	strb.w	r1, [r3], #1
 800b366:	e7f9      	b.n	800b35c <memset+0x4>

0800b368 <_reclaim_reent>:
 800b368:	4b29      	ldr	r3, [pc, #164]	@ (800b410 <_reclaim_reent+0xa8>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4283      	cmp	r3, r0
 800b36e:	b570      	push	{r4, r5, r6, lr}
 800b370:	4604      	mov	r4, r0
 800b372:	d04b      	beq.n	800b40c <_reclaim_reent+0xa4>
 800b374:	69c3      	ldr	r3, [r0, #28]
 800b376:	b1ab      	cbz	r3, 800b3a4 <_reclaim_reent+0x3c>
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	b16b      	cbz	r3, 800b398 <_reclaim_reent+0x30>
 800b37c:	2500      	movs	r5, #0
 800b37e:	69e3      	ldr	r3, [r4, #28]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	5959      	ldr	r1, [r3, r5]
 800b384:	2900      	cmp	r1, #0
 800b386:	d13b      	bne.n	800b400 <_reclaim_reent+0x98>
 800b388:	3504      	adds	r5, #4
 800b38a:	2d80      	cmp	r5, #128	@ 0x80
 800b38c:	d1f7      	bne.n	800b37e <_reclaim_reent+0x16>
 800b38e:	69e3      	ldr	r3, [r4, #28]
 800b390:	4620      	mov	r0, r4
 800b392:	68d9      	ldr	r1, [r3, #12]
 800b394:	f000 f872 	bl	800b47c <_free_r>
 800b398:	69e3      	ldr	r3, [r4, #28]
 800b39a:	6819      	ldr	r1, [r3, #0]
 800b39c:	b111      	cbz	r1, 800b3a4 <_reclaim_reent+0x3c>
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f000 f86c 	bl	800b47c <_free_r>
 800b3a4:	6961      	ldr	r1, [r4, #20]
 800b3a6:	b111      	cbz	r1, 800b3ae <_reclaim_reent+0x46>
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f000 f867 	bl	800b47c <_free_r>
 800b3ae:	69e1      	ldr	r1, [r4, #28]
 800b3b0:	b111      	cbz	r1, 800b3b8 <_reclaim_reent+0x50>
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	f000 f862 	bl	800b47c <_free_r>
 800b3b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b3ba:	b111      	cbz	r1, 800b3c2 <_reclaim_reent+0x5a>
 800b3bc:	4620      	mov	r0, r4
 800b3be:	f000 f85d 	bl	800b47c <_free_r>
 800b3c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3c4:	b111      	cbz	r1, 800b3cc <_reclaim_reent+0x64>
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f000 f858 	bl	800b47c <_free_r>
 800b3cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b3ce:	b111      	cbz	r1, 800b3d6 <_reclaim_reent+0x6e>
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f000 f853 	bl	800b47c <_free_r>
 800b3d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b3d8:	b111      	cbz	r1, 800b3e0 <_reclaim_reent+0x78>
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f000 f84e 	bl	800b47c <_free_r>
 800b3e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b3e2:	b111      	cbz	r1, 800b3ea <_reclaim_reent+0x82>
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	f000 f849 	bl	800b47c <_free_r>
 800b3ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b3ec:	b111      	cbz	r1, 800b3f4 <_reclaim_reent+0x8c>
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f000 f844 	bl	800b47c <_free_r>
 800b3f4:	6a23      	ldr	r3, [r4, #32]
 800b3f6:	b14b      	cbz	r3, 800b40c <_reclaim_reent+0xa4>
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3fe:	4718      	bx	r3
 800b400:	680e      	ldr	r6, [r1, #0]
 800b402:	4620      	mov	r0, r4
 800b404:	f000 f83a 	bl	800b47c <_free_r>
 800b408:	4631      	mov	r1, r6
 800b40a:	e7bb      	b.n	800b384 <_reclaim_reent+0x1c>
 800b40c:	bd70      	pop	{r4, r5, r6, pc}
 800b40e:	bf00      	nop
 800b410:	20000014 	.word	0x20000014

0800b414 <__libc_init_array>:
 800b414:	b570      	push	{r4, r5, r6, lr}
 800b416:	4d0d      	ldr	r5, [pc, #52]	@ (800b44c <__libc_init_array+0x38>)
 800b418:	4c0d      	ldr	r4, [pc, #52]	@ (800b450 <__libc_init_array+0x3c>)
 800b41a:	1b64      	subs	r4, r4, r5
 800b41c:	10a4      	asrs	r4, r4, #2
 800b41e:	2600      	movs	r6, #0
 800b420:	42a6      	cmp	r6, r4
 800b422:	d109      	bne.n	800b438 <__libc_init_array+0x24>
 800b424:	4d0b      	ldr	r5, [pc, #44]	@ (800b454 <__libc_init_array+0x40>)
 800b426:	4c0c      	ldr	r4, [pc, #48]	@ (800b458 <__libc_init_array+0x44>)
 800b428:	f000 f87e 	bl	800b528 <_init>
 800b42c:	1b64      	subs	r4, r4, r5
 800b42e:	10a4      	asrs	r4, r4, #2
 800b430:	2600      	movs	r6, #0
 800b432:	42a6      	cmp	r6, r4
 800b434:	d105      	bne.n	800b442 <__libc_init_array+0x2e>
 800b436:	bd70      	pop	{r4, r5, r6, pc}
 800b438:	f855 3b04 	ldr.w	r3, [r5], #4
 800b43c:	4798      	blx	r3
 800b43e:	3601      	adds	r6, #1
 800b440:	e7ee      	b.n	800b420 <__libc_init_array+0xc>
 800b442:	f855 3b04 	ldr.w	r3, [r5], #4
 800b446:	4798      	blx	r3
 800b448:	3601      	adds	r6, #1
 800b44a:	e7f2      	b.n	800b432 <__libc_init_array+0x1e>
 800b44c:	0800b66c 	.word	0x0800b66c
 800b450:	0800b66c 	.word	0x0800b66c
 800b454:	0800b66c 	.word	0x0800b66c
 800b458:	0800b670 	.word	0x0800b670

0800b45c <__retarget_lock_acquire_recursive>:
 800b45c:	4770      	bx	lr

0800b45e <__retarget_lock_release_recursive>:
 800b45e:	4770      	bx	lr

0800b460 <memcpy>:
 800b460:	440a      	add	r2, r1
 800b462:	4291      	cmp	r1, r2
 800b464:	f100 33ff 	add.w	r3, r0, #4294967295
 800b468:	d100      	bne.n	800b46c <memcpy+0xc>
 800b46a:	4770      	bx	lr
 800b46c:	b510      	push	{r4, lr}
 800b46e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b472:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b476:	4291      	cmp	r1, r2
 800b478:	d1f9      	bne.n	800b46e <memcpy+0xe>
 800b47a:	bd10      	pop	{r4, pc}

0800b47c <_free_r>:
 800b47c:	b538      	push	{r3, r4, r5, lr}
 800b47e:	4605      	mov	r5, r0
 800b480:	2900      	cmp	r1, #0
 800b482:	d041      	beq.n	800b508 <_free_r+0x8c>
 800b484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b488:	1f0c      	subs	r4, r1, #4
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	bfb8      	it	lt
 800b48e:	18e4      	addlt	r4, r4, r3
 800b490:	f000 f83e 	bl	800b510 <__malloc_lock>
 800b494:	4a1d      	ldr	r2, [pc, #116]	@ (800b50c <_free_r+0x90>)
 800b496:	6813      	ldr	r3, [r2, #0]
 800b498:	b933      	cbnz	r3, 800b4a8 <_free_r+0x2c>
 800b49a:	6063      	str	r3, [r4, #4]
 800b49c:	6014      	str	r4, [r2, #0]
 800b49e:	4628      	mov	r0, r5
 800b4a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4a4:	f000 b83a 	b.w	800b51c <__malloc_unlock>
 800b4a8:	42a3      	cmp	r3, r4
 800b4aa:	d908      	bls.n	800b4be <_free_r+0x42>
 800b4ac:	6820      	ldr	r0, [r4, #0]
 800b4ae:	1821      	adds	r1, r4, r0
 800b4b0:	428b      	cmp	r3, r1
 800b4b2:	bf01      	itttt	eq
 800b4b4:	6819      	ldreq	r1, [r3, #0]
 800b4b6:	685b      	ldreq	r3, [r3, #4]
 800b4b8:	1809      	addeq	r1, r1, r0
 800b4ba:	6021      	streq	r1, [r4, #0]
 800b4bc:	e7ed      	b.n	800b49a <_free_r+0x1e>
 800b4be:	461a      	mov	r2, r3
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	b10b      	cbz	r3, 800b4c8 <_free_r+0x4c>
 800b4c4:	42a3      	cmp	r3, r4
 800b4c6:	d9fa      	bls.n	800b4be <_free_r+0x42>
 800b4c8:	6811      	ldr	r1, [r2, #0]
 800b4ca:	1850      	adds	r0, r2, r1
 800b4cc:	42a0      	cmp	r0, r4
 800b4ce:	d10b      	bne.n	800b4e8 <_free_r+0x6c>
 800b4d0:	6820      	ldr	r0, [r4, #0]
 800b4d2:	4401      	add	r1, r0
 800b4d4:	1850      	adds	r0, r2, r1
 800b4d6:	4283      	cmp	r3, r0
 800b4d8:	6011      	str	r1, [r2, #0]
 800b4da:	d1e0      	bne.n	800b49e <_free_r+0x22>
 800b4dc:	6818      	ldr	r0, [r3, #0]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	6053      	str	r3, [r2, #4]
 800b4e2:	4408      	add	r0, r1
 800b4e4:	6010      	str	r0, [r2, #0]
 800b4e6:	e7da      	b.n	800b49e <_free_r+0x22>
 800b4e8:	d902      	bls.n	800b4f0 <_free_r+0x74>
 800b4ea:	230c      	movs	r3, #12
 800b4ec:	602b      	str	r3, [r5, #0]
 800b4ee:	e7d6      	b.n	800b49e <_free_r+0x22>
 800b4f0:	6820      	ldr	r0, [r4, #0]
 800b4f2:	1821      	adds	r1, r4, r0
 800b4f4:	428b      	cmp	r3, r1
 800b4f6:	bf04      	itt	eq
 800b4f8:	6819      	ldreq	r1, [r3, #0]
 800b4fa:	685b      	ldreq	r3, [r3, #4]
 800b4fc:	6063      	str	r3, [r4, #4]
 800b4fe:	bf04      	itt	eq
 800b500:	1809      	addeq	r1, r1, r0
 800b502:	6021      	streq	r1, [r4, #0]
 800b504:	6054      	str	r4, [r2, #4]
 800b506:	e7ca      	b.n	800b49e <_free_r+0x22>
 800b508:	bd38      	pop	{r3, r4, r5, pc}
 800b50a:	bf00      	nop
 800b50c:	2000215c 	.word	0x2000215c

0800b510 <__malloc_lock>:
 800b510:	4801      	ldr	r0, [pc, #4]	@ (800b518 <__malloc_lock+0x8>)
 800b512:	f7ff bfa3 	b.w	800b45c <__retarget_lock_acquire_recursive>
 800b516:	bf00      	nop
 800b518:	20002158 	.word	0x20002158

0800b51c <__malloc_unlock>:
 800b51c:	4801      	ldr	r0, [pc, #4]	@ (800b524 <__malloc_unlock+0x8>)
 800b51e:	f7ff bf9e 	b.w	800b45e <__retarget_lock_release_recursive>
 800b522:	bf00      	nop
 800b524:	20002158 	.word	0x20002158

0800b528 <_init>:
 800b528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52a:	bf00      	nop
 800b52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b52e:	bc08      	pop	{r3}
 800b530:	469e      	mov	lr, r3
 800b532:	4770      	bx	lr

0800b534 <_fini>:
 800b534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b536:	bf00      	nop
 800b538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b53a:	bc08      	pop	{r3}
 800b53c:	469e      	mov	lr, r3
 800b53e:	4770      	bx	lr
